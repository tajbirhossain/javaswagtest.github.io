Владимир Швец "От джуна до сеньора. Как стать востребованный разработчиком"

- Расскажи о себе
- Книга
	- «Книга — это не сочинительство, не заработок, а поступок. Поэт призван вызывать душевное потрясение, а не воспитывать идолопоклонников»
	- Книга "От джуна до сеньора.", где миддл?
	- Код, Люди, Я. Почему именно такой порядок?
	- Какие любимые авторы в ИТ или просто авторы, что читаешь?
	- Как выбирал стиль?
	- Как написать книгу? Ритуал вс муза?
	- Как выбрал нишу
	- Стоит ли писать о джуниорах, когда сам был джуниором 15 лет назад?
	- Есть много курсов как для джуниоров, так и для мидлла в сеньера. Как расти джуниору без книги?
- Код:
	- Что думаешь о книге чистый код? Роберт Мартин - дядюшка Боб
	- название переменных, комментарии, форматирование, обработка ошибок,  
	- Статья Кейси Муратори - https://www.computerenhance.com/p/clean-code-horrible-performance
	- Совершенный Код МакКонела
- Люди
	- Интервью. 
		- Моя нелюбовь к формальным собеседованиям привела меня к тому, что уже находясь по другую сторону стола я с куда большим пониманием и симпатией отношусь к разработчику, который хочет получить работу, и не пытаюсь выдавить из него реализацию алгоритма, которую он должен написать ПРЯМО СЕЙЧАС на бумажке (да, увы, я побывал и на таком собеседовании).”
		- В прошлом выпуске мы обсуждали как раз код на ""бумажке"". Что ты думашь о таком интервью?
	- Холивары
		- "холивары — для людей, у которых слишком много свободного времени."
	- 	Бюрократия
		- “Бюрократия — неотъемлемая часть больших компаний и продуктов.
		- Бюрократия бесит - подстраивайтесь, цитата
		- 
		- 
	- Идеальный продукт
	- Код-ревью




“Меня зовут Владимир, и я хочу рассказать о том, как выжить в IT. ”


“более 15 лет я занимаюсь коммерческой разработкой, в основном высоконагруженными веб-системами и приложениями; работал почти на всех должностях корпоративной лестницы — от тестировщика до ведущего архитектора. ”

Разделы - Код, Люди, Я

Код
	Стиль
	Именование и здравая логика
	Повторное использование кода
	Изобретение колеса
	Экосистема
		Любой проект — экосистема.
		У каждого проекта есть функции и предметная область.
		Вам обязательно нужно разбираться в предметной области проекта.
		Технологический стек проще контролировать, когда он небольшой”
	Рефакторинг
		“Регулярный рефакторинг обязателен.
		Убедитесь, что рефакторинг определенного кода действительно необходим.
		Планируйте рефакторинг и его границы.
		Проверяйте, проверяйте и проверяйте код после рефакторинга; он должен работать точно так же, как и до него.
		Не позволяйте перфекционизму утянуть вас на дно, вовремя останавливайтесь.”
	Работает - не трогай
		“Работает — не трогай.
		В попытке сделать лучше можно все сломать.
		Обновляйте систему постепенно, взвешивая плюсы и минусы.
		Никогда не гонитесь за самыми свежими обновлениями, если они не несут чего-то критически необходимого для вашего проекта.”
	Новый код
		“Читайте и анализируйте код нового проекта.
		Используйте время ознакомления с новым проектом по максимуму.
		Спрашивайте, спрашивайте и спрашивайте.
		Не бойтесь допускать ошибки; разработчиков, которые приходят на новый проект и моментально пишут идеально подходящий код, не существует”
		“История из жизни
			На одном из проектов с очень амбициозным и своенравным главным разработчиком мне пришлось 20 раз переписывать одну из своих первых задач. Сложность была в том, что мой код должен был выглядеть как его код, а писали мы очень по-разному. Задачу я все же завершил, но сделал для себя выводы о том, что нельзя заставить людей писать так, как хочется тебе, а не им. В дальнейшем этот пример очень помогал мне находить общий язык с новыми разработчиками на проекте. Каждый раз, когда мне хотелось, чтобы их код был похож на мой, я вспоминал эту историю и просто находил компромисс.”
	Код как документация
		“Пишите код как документацию.
		Документируйте емким текстом.
		Иногда код не может быть простым — документируйте!”
	Коллаборация
		“Уважайте чужой код.
		Корректная работа кода всегда важнее его внешнего вида.
		Если есть возможность, пообщайтесь с автором исправляемого кода.”
		“Напишите тесты до начала исправлений и проверьте уже исправленный код.
		Избегайте конфликтов с коллегами.”
		“История из жизни
			Однажды ко мне обратился друг с просьбой посмотреть, правильно ли проходит его код-ревью. В то время он как раз устроился в новую компанию и его работу часто проверяли коллеги. Он пожаловался, что сам тон комментариев и претензии, которые они предъявляют, звучат агрессивно и неприятно. Сначала я не воспринял ситуацию всерьез, подумал, что проблема преувеличена, но желание помочь взяло верх и я ознакомился с комментариями к его коду. «Побивание камнями», пожалуй, самое мягкое сравнение, которое приходит мне на ум. Я не знаю, с чем был связан этот разгул немотивированной агрессии по отношению к новому человеку в команде, но в тот момент ситуация расстроила меня настолько, что я, на тот момент уже будучи lead-разработчиком, попросил друга предоставить “мне слово на код-ревью. Я высказал все, что думаю о таком отношении внутри команды и о самой политике компании, которая это поощряет, после чего искренне посоветовал другу сменить место работы. Порой есть смысл тратить время и силы, чтобы попробовать изменить положение к лучшему, но эта ситуация была из разряда «собирай вещи и беги”
	Отладка
		“Старайтесь обходиться без выводов на экран.
		Найдите время на настройку отладчика, оно окупится с лихвой.
		Пользуйтесь отладкой регулярно, не позволяйте себе утратить навыки.
		Профилируйте, чтобы понять, насколько эффективно ваше приложение.”
	Инструменты и автоматизация
		“Выбирайте инструменты самостоятельно.
		Учитесь работать со своими инструментами, становитесь эффективнее.
		Пробуйте новые инструменты и подходы.
		Автоматизируйте рутинные задачи.”
	Тесты
		“Тесты нужны, даже если вас убеждают в обратном.
		Идеальный вариант, если ваш код будут проверять тестировщики или хотя бы ваши коллеги.”
		“Терпите скуку формальных тестов, это окупается.
		Один упавший тест — минус сотня недовольных клиентов.”
	Идиоматичность
		“Каждый язык программирования обладает своей идиоматичностью.
		Не пишите код на каждом новом языке программирования так же, как на предыдущем.
		Читайте код, читайте советы авторов языка, практикуйтесь.
		Если «заржавели» на одном языке, не бойтесь переключиться на другой и потратить время на его изучение.
		“История из жизни
			Вместо десятка слов я покажу вам код. Здорово, если вы уже немного знаете PHP и JavaScript, вам будет легче оценить эту шутку:
            $sum = 0;
			$arr = new Array(1, 2, 3);
			for ($i = 0; $i < $arr.length; $i++) {
				$sum += $arr[$i];
			}”
		“Это JavaScript-код, но написанный так, будто это PHP. Нет, делать так не надо никогда.”
	Open source
		“With great power comes great responsibility».
		Проверяйте лицензию у любого open source проекта, который собираетесь использовать.
		Выбирайте только качественные, проверенные временем и людьми проекты.
		Следите за обновлениями, но не обновляйтесь без необходимости.
		Изучайте код open source проектов, читайте его, старайтесь разобраться в том, как он работает.
		Не только берите, но старайтесь и отдавать что-то open source сообществу, только так оно будет оставаться живым.
	Серебряные пули
		“Серебряной пули не существует.
		Всегда ищите лучшие варианты, но не бегите за трендами.
		Не останавливайтесь на одном решении, старайтесь сделать лучше.”
	Код ради кода
		“Разработчики любят код и новизну.
		Не играйте с кодом на работе.
		Разделяйте личный интерес и требования проекта.”
	Ошибки
		“Не бывает кода без ошибок.
		Используйте системы контроля ошибок с умом.
		Относитесь к ошибкам прагматично, некоторые из них вам нужны.
		Спрашивайте себя: как эта ошибка может случиться? Какой вред она причинит продукту и пользователю?”
	Паттерны проектирования
		“Паттерны проектирования — благо и проклятие.
		Не используйте паттерны проектирования для решения всех на свете проблем.
		Подходите к выбору решения прагматично, хладнокровно и осознанно.”
	Переабстракции
		“Разные языки программирования предоставляют различный уровень абстракций.
		Используйте ровно тот уровень абстракций, который работает для вашей задачи.
		Пишите просто — этот код придется поддерживать вам и вашим коллегам (а они могут знать, где вы живете).”
	Оптимизация
		“Не надо оптимизировать весь код.
		«Преждевременная оптимизация — корень всех зол».
		Выделяйте приоритеты оптимизации.
		Изучайте и используйте технические способы оптимизации.
		За оптимизацию всегда надо платить (логичностью кода, удобством, потерей функций).”
	ЛЮДИ
			“Этот раздел — об общении с людьми, о том, как выстраивать деловые отношения, как приспособиться к работе в коллективе. Я затрону социальные вопросы, проблемы баланса между работой и общением.
			Разработчики постоянно общаются с разными людьми: с коллегами, начальством, а также с теми, кто максимально далек от разработки программного обеспечения и с трудом отличает браузер от операционной системы. Вы должны уметь найти верный способ объяснить им, чем вы занимаетесь. Навык общения крайне важен для профессионального (а еще в “большей степени карьерного) роста.
			Как разработчик вы в первую очередь должны уметь писать код. Но этого мало. Умение вести диалог, объяснять свои мысли, предлагать собственные решения и высказывать несогласие — все это даст вам огромные возможности профессионального роста.”
		Контекст и коммуникация
			“Оберегайте свое спокойствие и “рабочий контекст.
			Проанализируйте, нравится вам общение с коллегами или оно в основном лишь отвлекает от работы.”
		“Десять раз спроси, один — напиши”
			“Спрашивайте.
			Спрашивайте.
			Спрашивайте.
			ОБЯЗАТЕЛЬНО спрашивайте.”
		Критика и критиканство
			“Слушайте и воспринимайте только конструктивную критику, а не критиканство.
			Меняйте работу, если понимаете, что из вас делают козла отпущения.
			Никакой «жесткой любви», вы достойны большего. Или поступите как «настоящий спартанец»: сбросьте вашего менеджера со скалы.”
		Пользователь всегда прав
			“Пользователь всегда прав. ВСЕГДА.
			Внимательно относитесь к каждому сообщению об ошибке от пользователей, прислушивайтесь к их комментариям.
			Доверяйте пользователям в вопросах удобства работы с вашим продуктом.”
		Это МОЙ код
			“Отстаивайте свой код.
			Будьте гибкими, но не предавайте свой труд.
			Выбирайте лучшее решение, даже если оно не ваше.”
		Это МОИ деньги
			“В начале карьеры придется набраться терпения: вам нужен опыт.
			Ваша «стоимость» на рынке будет”
			“определяться навыками и опытом; как только вы поймете свою истинную цену, ни за что не соглашайтесь на меньшее.
			Ведите учет своих профессиональных достижений.”
		“Сильные и слабые стороны”
			“Для определения своих сильных и слабых сторон нужно время.
			Постарайтесь оценивать себя как бы со стороны.
			Будьте максимально честны по отношению к себе.
			Соблюдайте баланс: подтягивайте слабые стороны, не запускайте сильные.
			Используйте свои сильные и слабые стороны в собственных интересах.”
		Интервью
			“Ваш внешний вид на собеседовании должен соответствовать должности, на которую вы претендуете, и дресс-коду компании.
			Если вас оценивают только по внешнему виду — бегите.
			Изучите требования к кандидатам и не приукрашивайте свои знания.
			Не пожалейте времени на подготовку к интервью.
			Будьте уверены в себе, вы просто пришли устраиваться на работу.”
			“История из жизни
			Я никогда не любил интервью и собеседования. Мне не нравились вопросы, задания, я никогда не мог вспомнить нужную сортировку и особенности ее реализации в нужный момент. Я не любил конкретные вопросы о том, что я «должен» помнить наизусть, это напоминало мне скучное заучивание, без вариативности и возможности придумать что-то на ходу. Стоит ли говорить, что с таким подходом я редко оказывался желанным кандидатом для самых разных компаний. Но был и плюс: благодаря такому отношению я попадал в другие компании, которые так же не принимали формализма в найме разработчиков, отдавая предпочтение их практическим навыкам. Моя нелюбовь к формальным собеседованиям привела меня к тому, что уже находясь по другую сторону стола я с куда большим пониманием и симпатией отношусь к разработчику, который хочет получить работу, и не пытаюсь выдавить из него реализацию алгоритма, которую он должен написать ПРЯМО СЕЙЧАС на бумажке (да, увы, я побывал и на таком собеседовании).”
		Если начальник — идиот
			“Если вы поняли, что ваш начальник — идиот, уходите.
			Абсолютно серьезно — уходите.”
		Поиск виноватых
			“Итак, этот день настал. Ваше приложение упало, и упало сильно. Тысячи расстроенных пользователей, потеря данных, денег, громкий плач, доносящийся из отдела по работе с клиентами. Да, такое случается и однажды обязательно случится с вашим продуктом. То, что произойдет после, определит уровень вашей компании и людей, которые в ней работают.
			Начнем с правила, которое вы просто должны запомнить. Поиск виноватых и охота на ведьм — дерьмо, которое никогда и никому не помогало.”
			“Поиск виноватых — пустое и глупое занятие.
			Если ошибка уже случилась, займитесь ее исправлением.
			Не упрекайте себя за ошибки, набирайтесь опыта, делайте выводы.
			Чем крупнее ошибка, тем ценнее вынесенный урок.
			“История из жизни
			Одна история оказалась настолько неприятной и неожиданной, что особенно остро врезалась мне в память. Я был в составе команды, которая занималась очень большим и амбициозным продуктом для российского медиарынка. В конце обычной рабочей недели выяснилось, что небольшая часть данных клиентов (история просмотров) была утеряна при переносе с одного сервера на другой. Ситуация неприятная, но в меру обыденная. Однако один из представителей клиента, человек, и ранее проявлявший себя довольно гадким образом, созвал общее совещание с привлечением всех руководителей, требуя провести внутреннее расследование и предоставить ему имена разработчиков, допустивших ошибку, после чего предложил пересмотреть договор сотрудничества и ввести штрафы за допускаемые в коде ошибки. Сказать, что мы были шокированы таким отношением и подходом, значит не сказать ничего.”
		Холивары
			“Я не буду ходить вокруг да около и скажу сразу: холивары — для людей, у которых слишком много свободного времени. Либо для тех, кто выбрал себе не ту профессию. Возможно, этим людям стоило бы попробовать себя в политике или телемаркетинге, кто знает. Я искренне советую вам не начинать холиваров и не участвовать в них.”
			“Холивары — для людей, которым нечем заняться.”
			“Все технологии нужны.
			Придерживайтесь своего мнения, но не пытайтесь никого переубедить.
			Собирайте знания, не воюйте с технологиями, абсорбируйте их.”
		Оценка задач
			“Перед оценкой выясните все требования к задаче.
			Дробите большие задачи на более мелкие.
			Учитывайте потенциальные риски; запоминайте, когда вы ошибались в оценке.
			Добавляйте время на тестирование.
			ОБЯЗАТЕЛЬНО добавляйте время на тестирование!
			Учитывайте время на «потрындеть», оно такое же реальное.
			Добавляйте коэффициенты оценки, не пренебрегайте своей безопасностью.
			Низкие оценки никого не впечатлят, а вам придется ночевать на работе.”
		Общий код
			“Код проекта — это совместный труд его разработчиков.
			Вам не обязан нравиться чужой код, равно как и ваш код не обязан нравиться вашим коллегам.
			Умейте читать и воспринимать любой код.”
			“Договаривайтесь с коллегами, как должен выглядеть и работать код вашего проекта.”
		“Одно кольцо, чтоб править всеми”
			“ность больших и маленьких решений.
				Человек, не обладающий достаточным опытом принятия решений, так же плох для проекта, как и отсутствие человека, принимающего решения.
				Если решения принимаете вы, будьте готовы столкнуться с сопротивлением.”
		Обсуждения
			“Мало обсуждений — плохо.
			Много обсуждений — тоже плохо”
		Бюрократия
			“Бюрократия — неотъемлемая часть больших компаний и продуктов.
			Редкие плюсы бюрократии теряются среди ее многочисленных минусов.
			Не позволяйте сухим бюрократическим формальностям расстраивать вас.”
			“Если вы работаете в компании, известной своими бюрократическими проволочками, и вас это БЕСИТ, начните тренироваться. Воспринимайте каждое вовлечение в череду ненужных (на ваш взгляд) обсуждений как прогон тестов. Да, это медленно, да, вы в это время не можете толком заняться ничем другим, но, возможно, именно на этом прогоне вы заметите какую-нибудь очень неприятную, очень опасную ошибку. Используйте время, которое теряете в бюрократической бездне, с пользой для себя: подтяните свои знания по языкам программирования, займитесь рефакторингом вашего приложения (да-да, если вам одобрили эту задачу, подписав 12 бумажек на 6 разных этажах и прислав почтового голубя с письмом-подтверждением).”
		Идеальный продукт
			“Мир программного обеспечения — хаос.
			Старайтесь выполнять свою работу качественно, но не кладите ее на алтарь перфекционизма.
			Идеальных решений, как и идеального кода, не существует.”
			“Когда мы начинаем новый проект или новую работу, мы горим (мама, неси огнетушитель!). Мы мотивированны, возбуждены, ушки у нас на макушке. Мы хотим сделать все правильно. Мы хотим сделать все качественно.
			Извините, но сейчас я спущу вас обратно на землю. Мир — это хаос. Мир программного обеспечения, при всей кажущейся структурированности и логичности, — еще больший хаос. И мы становимся заложниками желания привнести в этот “хаос смысл и логику. Мы пытаемся написать идеальный код. Дизайнеры пытаются создать идеальный, понятный и практичный интерфейс. Тестировщики пытаются написать идеальные системы проверки продукта.
			И все это разбивается о пользователя, который решил отправить форму, оставив вместо имени цифру 0. Да, я утрирую, но лишь слегка.”
		Код-ревью
			“В ходе код-ревью не обороняйтесь и не нападайте, это не битва.
			Уделите время код-ревью.
			Абстрагируйтесь от кода и стиля, сосредоточившись на логике написанного.
			Воспринимайте рекомендации как добрый совет, не ищите в них упрека.”
			“Это может быть свой метод именования переменных, своя логика при работе с массивами, свой способ контролировать ошибки и исключения — все что угодно.
			А теперь сосредоточьтесь. Не позволяйте своим привычкам проникать в код-ревью. Вы НЕ делаете код лучше, когда просите другого разработчика переименовать переменную. Вы НЕ делаете код лучше, когда просите заменить for на while просто потому, что привыкли обходить циклы так. Более того, даже если ваш подход обеспечивает мизерную оптимизацию на конкретной версии вашего компилятора, придержите эту ценную информацию при себе.”
		Методологии разработки
			“Методология разработки — попытка структурировать и повысить производительность разработки программного обеспечения.
			Чаще всего методологии создавались для конкретных компаний и с определенными целями.
			Верная методология в любой компании определяется методом проб и ошибок.
			Извлекайте из методологии разработки плюсы, даже если ее минусы мешают вам работать.”
			“Из всех моих пересечений с методологиями разработки я вынес для себя только одну, самую полезную и нужную технику. Вопреки тому, что я могу воспользоваться мириадами программ для трекинга задач, событий и важных уведомлений, я все еще предпочитаю клеить САМЫЕ ВАЖНЫЕ напоминания на монитор стикерами с написанным от руки текстом. Обычно мой монитор похож на рождественскую елку, разве что не зеленый и не мигает огнями гирлянды. А еще я веду письменные заметки во время технических обсуждений, чем вызываю немало шуток про бересту и глиняные таблички.”
	Я
		Забота о себе
			“Ваше внутреннее состояние — залог качественной работы.
			Вы должны заботиться о себе.
			Ваши ментальное и физическое состояния тесно связаны, не надейтесь удерживать на плаву что-то одно.
			Находите и создавайте поводы для радости.”
		Усталость и выгорание
			“Выгорание однажды случится и с вами.
			Остановитесь.
			Не смейте себя упрекать и дайте себе столько времени, сколько нужно.
			Помните, что вы не тождественны своей работе: вы значительно важнее, чем она.
			Выгорание и депрессия — частые спутники; если перестаете справляться сами, обязательно обратитесь за помощью.”
		Винтик в механизме
			



