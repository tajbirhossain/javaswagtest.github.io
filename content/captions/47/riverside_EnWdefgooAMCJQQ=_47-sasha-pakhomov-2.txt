:
Здорова, меня зовут Саша Пахомов и я инженер, который любит свое дело. Это подкаст Java Swag. Сегодня мы поговорим про все, что я рассказывал в своем подкасте 1000 фичей, а именно слепая печать, вим, клавиатуры, наследование, Java, Kotlin, очень много интересных тем, поэтому не переключайтесь и слушайте до конца, в конце очень интересное непопулярное мнение. Поехали. Омонлайн тулы на джай писать не нужно. Котлин он компилируется в сто раз дольше, к нему идея начинает тупить. Ну пиши ты на джаве как бы и не парься. Я не девелпер-адвокат и поэтому все что я говорю это то что происходит в реальной жизни. Всем привет, в гериподкаст Java Swag, с вами я и ведущий Дима Волыхин. Сегодня у нас в гостях Саша Пакомов, разработчик из компании Unison, контрибьютор в проект Apache Ignite 3 и еще подкастер из отличного подкаста 1000 фичей, всем советую. Вот прям сразу рекламу ставлю, всем советую посмотреть Сашем подкаст. Саша, привет. Привет, Дима, спасибо большое, что позвал. Огромное спасибо за такое интро. Теплое, мне очень приятно. Но есть небольшая оговорочка. Я всё-таки не контрибьютор, а уже комитер. Это значит, что я могу мержить и ревьюить реквесты. Но это так. Да, ну может быть, немного давай о себе, поподробнее. Вообще, я Саша, да, я из Воронежа. Учился в Воронежском государственном университете. Закончил его не так давно. После этого я работал во всяких маленьких локальных стартапах, там консалтинговых компаниях. Долго там не задерживался, просто потому что не было интересно, скажем честно. Вот потом я какое-то время работал в компании, возможно знакомая всем T-Systems, занимался разработкой прикольных сервисов, мне все нравилось. Но потом случился ковид, и как-то я решил куда-то переехать. посмотреть, переехал в Питер и там нашел уже вот компанию Unison, в которой сейчас работаю, очень сильно я люблю и вот сейчас живу в Ереване, занимаюсь разработкой, как ты сказал уже Apache Ignite 3 базы данных, она еще как бы в Альфе, вот я очень многое уделяю времени, внимание всяким UX штукам, там command line, rest API, все с чем разработчики взаимодействуют, я так или иначе разрабатываю, мне это очень интересно и говорить. Ну а на этом, наверное, короткое интро или не очень. Всё. Отличная интро, и я хотел бы продолжить разговор, хотел бы нажать с неожиданной темой. То есть ты сказал, что ты из Воронежа. То есть такие слова, как «машмет», «левый берег», «тебе знакомы». Ну, справедливости ради жил и рос я в Липецке, это рядом город, а уже учился в Воронежском государственном инститете и какое-то время там жил, да. А какой факультет, если не секрет? отделение МУАИС, математическое обеспечение и администрирование информационных систем. Отлично, отлично. А ты что, откуда? Мне тоже знаком, знаком университет ВГУ, факультет ПММ, и ты, наверное, третий человек, которого я встретил в таких публичных кругах, кто из ВГУ. Очень здорово, что я не набрел на это в линкодине, потому что я, там на инсайты что-нибудь интересного спросить но вот до вгу не заскролил очень очень здорово ну что же воронеж центр центра центр конечно центр россии но мы пойдем команлайна команлайн тул тулам и всяким таким на всяким штучкам, которые делают программиста лучше, но не напрямую. Вот, например, у нас же Java-подкаст, и прежде чем добраться до Java, вот как мое мнение, что в Java вот Java-разработчики мало уделяют времени таким вот практикам, как слепая печать, вот разработчики редко пользуются пользуются типа Java-разработчики, Vim'ом, то есть мы все такие фанаты IntelliJ IDEA, просто до мозга и У тебя был очень прикольный выпуск про слепую печать, и после этого я даже пошел и сам потренивал некоторые упражнения подделал, решил, что да, вот я именно сейчас начну заниматься вот этой слепой печати. Можешь рассказать предысторию, как ты дошел до этой, вообще, как это появилось в твоей жизни, почему ты решил, что это вообще важно разработчику? как к чему я пришел. В общем, да, интересно, что вот, например, в школе слепая печать входит в обязательную программу по информатике. Я думаю, не многие помнят, но все-таки у нас были такие уроки, когда нам показывали расположение рук на клавиатуре, например, и нас учили как бы, и были, может быть, какие-то даже небольшие там экзамены или, как эту школу называется, уже забыл, когда нужно было что-то напечатать, не глядя. Вот у меня такое было, по крайней мере, но что удивительно, преподавательница или учительница, которая в школе показывала, она естественно делала это двумя указательными пальцами, глядя на клавиатуру, вот так вот еще высоко подымала, очки так еще задирала. В общем, такой небольшой диссонанс, он происходил, как бы человек вроде бы этим не владеет, а рассказывает, и вроде как будто бы какая-то одна из очередных... заморочек школьной программы, мы ее, конечно, пролистывали, но дальше потом в универе тоже как бы вот эти преподаватели, которые нам рассказывали всякие алгоритмы и структуры данных, они их очень хорошо знали, но когда мы там начинали, дело доходило до программирования, это тоже выглядело довольно странно, когда вот женщины они просто вот двумя пальцами по клавиатуре били, и как будто бы это норма, да? Я думаю, что для многих это и сейчас норма, и ничего в этом нет такого, но потом какое-то время у нас опять к государственному университете, у нас были молодые преподаватели, то есть они приходили, они не... я сам был таким, я тоже преподавал ВГУ, мне это дико доставило. И вот парочку таких молодых преподавателей, которые вот реально из индустрии, которые вот open source, там один из нас, у нас был чувак, который вообще свой 2D движок написал для iOS, а какого-то, не какого-то 2D, а файберы какое-то называется. В общем, и ты видишь, что люди профессионалы, и они тебя начинают зажигать своей энергией. И одно из тех вот этих ключевых качеств этих людей, которые меня зажгли, это то, что они не смотрели на клавиатуру и печатали с дикой высокой скоростью для меня тогда. То есть я, они что-то печатали, и они печатали быстрее, чем они говорят. голову взорвало, потому что вживую я это увидел вот первый раз. И подумал, что, наверное, это что-то прикольное, я тоже так хочу. И потом, когда уже чуть-чуть с универом стало попроще, потому что тоже такие вещи изучать, когда ты учишься и работаешь, да, справедливо сказать, что со второго курса начал full-time работать, и совмещать там было сложно. Когда стало попроще, я открыл для себя ресурс typing.com. Это такой в игровой форме достаточно легкий тренажер, который тебя плавно вводит во всю эту тему. И просто перед митингами, во время митингов иногда, перед созвонами какими-то, когда уже программировать глубоко погружаться. Я садился и 5-10-15-20 минут сессий проходил эти курсы, проходил эти классы, писал про них у себя в Telegram-канале, делился с друзьями программистами. Тоже все, кто пробовал, достаточно довольны остались, и они сейчас тоже занимаются, ну точнее печатают уже несмотря на клавиатуру. Ну это как бы, если говорить про то, как я к этому пришел и почему я решил так делать. Круто. Ну, это реально прикольно выглядит со стороны, но как это ощущается изнутри? То есть ты перестаёшь, у тебя перестаёт быть вот эта вот задержка между мыслью и тем, как эта мысль появилась на экране. Ты перестаёшь, взгляд у тебя перестаёт бегать, ты начинаешь вот реально какой-то, как вот в «Аватаре», когда они соединялись друг с другом через этот проводочек, так и ты, может, тоже соединяешься как бы через свои руки с компьютером и реально начинаешь мыслить уже непосредственно текстом и пропускаешь этот ненужный этап поиска каких-то там взглядов по клавиатуре. Помимо всего прочего, помимо вот этих вот ощущений, коннект и так далее, ты открываешь для себя всякие такие прикольные штуки. Сейчас покажу, наверное, подкасте не будет видно, я показываю NewFi клавиатуру, которую я себе недавно купил, у меня есть еще Keychron клавиатура. В общем, ты открываешь для себя мир вот этих вот прикольных заморочек программистских, которые справедливости ради без десяти пальцев печати удовольствие не доставят. Вот, поэтому это такой целый мир, целый хобби, который мне очень нравится, и я иногда прокачиваю именно скорость, потому что скорость, чем выше, тем она прикольнее, но мне кажется, что у меня сейчас уже скорость на приемлемом уровне, то есть я вот с той скоростью, в которую думаю, с той скоростью я воспроизвожу код, текст, и в целом достаточно, дальше упарываться я смысла не вижу. Но это, кстати, тоже интересно, когда я изучал, я изучал, естественно, английском языке, чтобы программировать, это английская раскладка, а вот русскую раскладку долго времени не мог, и это, мне кажется, у многих такая проблема, кто там тренировался, начнет сложно этот вот тумблер на то, что у тебя теперь другая раскладка, постоянно начинаешь печатать какие-то английские символы. И то, что мне помогло, это то, что вот я себе купил вот такую клавиатуру, в которой, естественно, нет русской раскладки, и пару месяцев, наверное, были какие-то проблемы. Ну даже, наверное, так, первые две недели это вообще было невозможно. Я смотрел, у меня был мак, у меня перед ним была русская клавиатура и раскладка. Я смотрел, то есть, на нее и как бы пытался повторить. Но потом в какой-то момент по щелчку просто реально просыпаюсь и я уже вообще не смотрю ни на русскую, ни на английскую, то есть оно как-то само вошло в жизнь. Тоже такой момент, который как бы происходит сам, если достаточно долго практиковаться. Ну, по мне так месяц-два это не так уж и много, наверное. От себя хочу сказать, что у меня такой переход был, я не пишу слепым набором, я смотрю на клавиатуру, то есть, но переход был для меня знаковый, когда И тогда я понял, что прикольно, а мне-то вот, чтобы, например, я работаю, работаю, а потом мне нужно что-то написать там типа в телеграмчике, кому-то сообщение ответить. И я, вот когда смотрю на клавиатуру, я не помню, где находятся какие буквы, я не могу вспомнить. Но как только я кладу туда руки, это происходит какая-то магия. Конечно, магия не такая эффектная, когда ты напечатаешь каждую букву, там не знаю, с первой попытки. Моя магия, она такая, иногда там видно, как фокусник вынул. вынул там карту из кармана то есть я все еще стираю там буквы иногда печатаю не в неверном порядке вот эти вот слова буквы те же но просто порядок не тот же но все равно эффект эффект удивительный всем и всем кому то есть кто хотел бы печатать вот как бы ускорить ускорить свое убыстрить скорость набора текста, для начала, возможно, даже до тренажёров можно попробовать просто печатать, попечатать и попытаться не смотреть на клавиатуру. То есть это очень важно, важно, важно понять вот это вот именно, как бы разделить ваше заметить, как часто вы смотрите вниз и как часто вы смотрите на экран. Это очень много времени. То есть вы очень много времени тратите вот на вот этот фокус, который, который опускается глаза вниз и подымаются глаза контексты, и контекст меняется. То есть в этом, наверное, маленькие микросвичи контекста, они, они, конечно, очень, очень сильно отвлекают. Говоря про слепую еще, говоря еще про слепую печатку, хотел, хотел узнать, как быстро ты пишешь паблик статик void main string квадратные скобочки. Ну, то есть это же очень эффектно выглядит, когда тебе просят что-нибудь там, ну давай что-нибудь попечатаем тут на, значит, на, соблайн текст, давай напиши программу. И ты такой, не глядя, просто там написал там какой-то цикл, написал какой-то там, не знаю, парсинг, не знаю, разбор простейший текста на строчки, и потом его копернул там в идее или в какой-то онлайн редакторе, и он действительно компилируется. То есть, ваша точность набора текста улучшается, вы делаете меньше ошибок и меньше как бы, я бы даже сказал, может быть, даже багов, ваши переменные перестают путать, название переменной путаться буков, название переменных перестают путать места и вы просто становитесь лучше, лучше, как программист. Ну вот конкретно для Java разработки, есть ли у тебя какие-то не знаю, может быть идеи о том, нужно ли это слепая печать, потому что ну вот Java разработчик, тебе скажешь, ну у меня есть идея, ну у меня там Control, Control пробел, это моя слепая печать мне вот эти два пальца достаточно для набора базового сервиса, зачем мне все эти 10 а к тому же идея. Ну идея, ты видел, она же тоже на джайве написана. И если я быстро начну печатать, там курсор будет не успевать. То есть надо тоже как-то наоборот сильно не торопиться, чтобы печатать много кода. Вот расскажи про свой опыт с идеей и конкретно с набором джава кода. Есть какие-то интересные истории? Давай так, вот начиная про паблик статик void mains, с какой скоростью быстро ли я набираю. Вообще, постоянно я в голове быстрее всего набираю по svm и enter. Вот это шорткат, который я изучил. Но если нет идеи, то вообще на тренажерах типа у меня скорость там 50 слов в минуту, что на самом деле вообще не быстро. Это как бы базовый, это наверное вот начиная там с 40-45 уже начинает доставлять удовольствие этот процесс. То есть ты понимаешь, что ты меньше тупишь и реально начинаешь продуктивно что-то делать. А дальше там это уже я считаю, ну отточка такая. То есть ты потратил 20% усилия, получил 80% результатов, 45. Дальше уже ты просто можешь остальные 80% усилий тратить, но результат уже будет не такой. Ну если так представить, то типа 50 слов в минуту, это примерно слова в секунду, чуть медленнее. Типа public, static, void, main, string. Вот с такой скоростью это появится. Типа, ну достаточно нормально. Но вот печатать всякие там, знаешь, эти кривые скобочки и так далее, к ним надо тоже отдельно готовиться, потому что это специальные символы, есть специальные ресурсы, которые помогают отработать именно эту штуку. Вот, давай дальше теперь про для Java разработчиков, ведь есть идея. Да, Take хороший, я с ним согласен, я с ним жил, я вижу, как с ним живут куча людей, но это не про меня просто. То есть, если кому-то комфортно и удобно использовать shortcut и идеи автокомплита, они действительно неплохие. Там Copilot сейчас уже появился, вообще, там тебе целое полотно напишет, зачем вообще тратить свои усилия. контра аргумента придумать, потому что когда такой аргумент передо мной встает, то я понимаю, что разные мои цеты у меня и у того, кто делает этот аргумент, и мне в целом нет желания доказывать ему и объяснять, что вот оно того стоит, да и в целом, ну зачем. Как я уже сказал, в первую очередь это про удовольствие, получение от работы и про ощущения, а не про какие-то метрики. Вот, но если какие-то аргументы все-таки попытаться придумать, то можно сказать, что вот, например, когда ты пишешь тесты вперед кода, и у тебя нет классов с компли... например, то ты, если ты хочешь упороться, ты можешь написать некомпилируемый код достаточно быстро, не теряя в продуктивность, а потом там нажатие option или control-enter в идее, когда она так подсвечивает красненький класс и предлагает тебе, например, сделать имплементацию этого класса, и ты уже имплементацию генерируешь, а не пишешь сначала имплементацию, а потом ее используешь, то есть такой паттерн использования в целом может быть, и действительно, когда ты на клауне себя выдавить какой-то не скомпилированный красный текст в идее, у тебя все внутри сжимается, ты такой «да как же это невозможно?» А тут ты просто взял и написал, не думаешь даже об этом. В целом, да, идея нас, конечно, разбаловала, но иногда все-таки идеи нет под руками, не хочется быть адептом и заложником одного инструмента, поэтому нужно диверсифицировать свои риски, диверсифицировать портфель. В какой-то момент, возможно, вы будете не Java разработчиком, и не разработчиком на Go, например, у которого тоже есть идея, а придется там EML файлы писать где-нибудь на серверах какое-то время. Ну, просто бывает так. Уже нет идеи, поэтому все-таки скилл он достаточно важный. и везде применим. Да, я полностью с тобой согласен. На самом деле, я большой фанат идеи, но к сожалению, нам вот, даже с другой стороны зайду, нам вот Java-разработчикам очень повезло, что у нас есть такой крутой редактор кода. То есть мы изначально с разбалованной идеей очень привыкли, что слепая печать даже не нужна, и тебе идея подумать, если подумать они просто безумные, они очень много знают о коде, они подсказывают очень много всего очень много всего интересного Java разработчиков, то есть Java разработчику нужно просто как бы наслаждаться, очень много туллинга, который подсказывает ему как нужно писать код в других языках, к сожалению к сожалению не так, слава богу появился там VSCode, который более или менее как бы подтягивает все эти языки до уровня они не такие, конечно, развёрнуты по сравнению с идеей, но всё равно хотя бы что-то такое есть. Я ещё хотел поговорить про... про набор текста вообще в командной строке, то есть вот ты научился слепой печате, как долго тебе осталось, не знаю, сколько лет до того, как ты перейдешь в ВИМ, знаешь, вот есть такая дорожка, что научился печатать, скоро ты пойдешь, значит ВИМ, скоро тебе IntelliJ IDEA просто начнет потихоньку немножко бесить своей вот этой вот огромностью, своей вот этой вот просто несоразмерностью с проектами, которые ты пишешь, хочешь написать маленький 2 Гиговую, 2 Гиговую, иди. Да, я понял. Ну смотри, если говорить о пути, то вот второй шаг в виде механической клавиатуры, даже не одной, я уже тоже купил, поэтому уверенно двигаюсь в этом направлении. Но если шутки в сторону, то я думаю, что мне она не надоест и бесить не начнет по ряду причин. Во-первых, у каждого инструмента или у каждой направления есть свой инструмент. инструмент intel и gidea поэтому я не вижу смысла писать на java используя какой-нибудь vim или emacs даже если ты его очень хорошо знаешь потому что ну это немного уже мне кажется перегиб, то есть смысла нет. В сторону того, что бесить, ну например, можно поставить вим байдинги у себя в идее и в целом у тебя вообще ворфлоу меняться не будет, только там отрисовка и отображение. По поводу тормознутости, ну тут вопрос такой, конечно, потому что что значит тормознутость? Меня не сильно бесит, время открыто, что идея там открывается, сейчас не знаю сколько, секунд пять, наверное, на маке там. В целом это приемлемо по сравнению это было, когда я начинал карьеру, вот на моем там каком-то Asus, она открывалась на секунд 30-45, вот прям реально, это была уже проблема, а 5 секунд мне кажется нет. К тому же... если мы говорим про джау, да, а если мы говорим про какие-то другие вещи, про какие-то другие файлы, то да, тут я уже наверное и сейчас в целом уже не использую почти идею и какие-то емел файлы, джейсон файлы, там зайти на сервис, вот когда ты на сервис заходишь, ну у тебя уже нет выбора использовать идею в любом случае тебе нужно использовать командную строку, и тут уже как ни крути, хотя можно конечно там портфорвадинг сделать, там что-то удаленную идею поднять но это уже вот тоже как будто бы инструмент не для этого создавался а для того чтобы изменять конфигурации на сервере был создан vim и ему уже много лет и почему бы его там не использовать в одно время я кстати когда ну не очень любил vim да и сейчас я его не сильно люблю просто его использую как утилитарную штуку то есть я могу там по словам попрыгать удалить добавить то есть чистой редактурой но не какой-то глубокое знание я использовал так называем называется микро по моему и там можно почти как в идее в терминале бегать и использовать его. То есть что можно, например, себе на сервер поставить какой-нибудь такой редактор, если очень сложно. Кстати, хотел вот ты сказать, что про идею и Vim байнинги. Вот очень похожая ведь идея между услепой печатью и Vim байнингами. Сначала ты замечаешь, что тратишь время на то, чтобы посмотреть на клавиатуру и на экраны. Вот так вот всё время у тебя микросвитчи вот этого контекста. Потом ты начинаешь замечать, что чтобы бегать по коду, тебе тоже нужно убирать руку с твоей любимой вот руку тянуть до стрелочек это тоже на клавиатуре это тоже такой микросвич микросвич какой-то происходит ты начинаешь пользоваться уже этими винбайдингами потом ты начинаешь понимать что ага для редактирования кода джао кода любого кода и построение проекта мне нужна как бы консоль почему я каждый раз переключаюсь в редактор и из консоли вы редактор ведь я могу в принципе делать все вот это вот типа открывать в консоли какой-то редактор их ты начинаешь замечать все больше и постепенно как бы двигаешься вообще в сторону того, что у тебя есть только есть только консоль и это такой как бы пути пути разработчика от какого-то не знаю от станка громадного для разработки кода каким-то базовым базовым навыкам таким там не знаю я чтобы поискать код я мне надо выучить один раз греб чтобы не знаю посмотреть структуру еще очень там кого-нибудь авакатом сет выучить я не знаю не в конец я грепу и там двумя двумя командами которые я за каждый раз каждый раз гуглю но все равно есть вот такие базовые инструменты которые получается что должен знать каждый каждый разработчик а если он еще не знает то скорее всего он к ним рано или поздно как бы придет и доберется это такие базовые тулы которые кстати очень редко которым очень редко обучает в университете но по в ЭГУ точно не было курса по всяким КомАнлайн тулам. Я слышал у тебя один из выпусков, подкаста, в котором ты вот говорил про такие прагматичные тулы. Не мог бы ты рассказать вообще, как ты к ним относишься, нужно ли их вообще знать, учить, пригождаются они тебе в работе, либо ты все еще сделаешь в идее. Ну, в общем, расскажи свое отношение к ним. Давай так, по частям. Во-первых, про вот этот вот путь, который ты сказал, который мы как-то уходим от, как ты сказал, такого большого станка, очень мощного фичастого, и переходим каким-то примитивным небольшим штукам, овладеваем ими в совершенстве и начинаем использовать уже их большую часть времени. В целом, я тоже замечаю такое движение за собой. Я по меркам индустрии, программист молодой, у меня 6-7 лет опыта работы промышленной, и я замечаю, как я начинаю двигаться от вот этой вот изучения идеи и понимания, что IDE — это то, что нужно знать вообще, все эти шорткаты, все эти настройки в идее, какие-то там фичи, они же еще эти фичи выпускают просто тоннами, и мы про них особо не знаем. Мне кажется, это такая довольно большая проблема. ночами не спал, потому что, ну как людям объяснить, что мы сделали, они же не пользуют это. И все эти бедные developer-адвокаты на конференциях постоянно рассказывают. Я их, этих смотрел видео, просто не знаю, сколько вы на заре карьеры, и я ничего не запомнил. Вот реально, я помню буквально базовые штуки, это shift-shift, чтобы найти все что угодно. Action, команду, файл, все. Там найти класс, найти метод, там command-o, command-n и command-f. Это всё, что в поиске, ну и прыгать там по тексту туда-сюда, выделять, то есть какие-то базовые штуки, их там с десяток, там, 15, и всё. А дальше там оказывается, что сейчас у них есть всякие команды, ты можешь shift-shift-slash сделать, и там какую-то команду найти. Я вот об этом узнал только когда-то, что-то там гуглил, случайно нарвался. И таких штук вот этот комбайн в себе содержит очень и очень много. И я не уверен, что это то, что мне большинству людей нужно. Там независимо от того, джава ли ты разработчик, котлин или пишешь на оси. Мне кажется, что нам, как разработчикам, нужно уметь решать свои задачи и транслировать свои идеи из головы в текст. чтобы минимально была задержка между этим. И мне кажется, что да, когда ты овладеваешь там шорткатами Vima и в нем начинаешь прыгать по словам туда-сюда, у тебя пальцы даже не двигаются, то есть ты вот этим вот этим J-K-L-H и другой комбинацией просто можешь делать чудеса. И в целом, как будто бы это тоже сложно выучить, но это достаточно выучить один раз и навсегда, ты себе зашьешь это под корку и будешь использовать. Это как вот станком или как стамеской овладеть, и ты ей будешь всегда работать, она такая какая она есть. А в идее, во-первых, настройки, например, они постоянно куда-то прыгают, уходят. Вот ты один раз там себе environment новый поставил и вспоминаешь эту настройку и она иногда даже не гуглится, потому что уже два раза там поменялась, где эта настройка находится. Какой-нибудь annotation processing, хорошо, по сельям времени я нахожу по словам annotation processing, но что-то такое другое, чтобы включить. Что-то другое иногда действительно может оно как бы реально такая сложность тебе не нужна поэтому да, я с тобой полностью согласен по поводу этого вот пути но справедливости ради я где-то там посередине сейчас нахожусь я не овладел ни Emax, ни VIV совершенствии и код я там не пишу, и не уверен что буду писать но иметь в виду и базовые какие-то знания мне кажется это очень полезно тот же самый греб но вот AVK справедливости ради я всегда гуглю вот AVK скрипт, чтобы я написал, это какая-то боль тот же самый сет Я не понимаю, что люди, что у них было в головах, чтобы сделать этот синтакс из седа через вот эти вот слыши. Ну, это реально вот такие олдскулы, которые про UX ничего не знали, очевидно. Но греб плюс-минус, как бы там, можно его овладеть. И как бы я еще очень... вот моя любимая вообще, это Reverse Find, как это называется в терминале. Я вот использую 50 на 50 фиш и Omized SSH. Прыгаю между ними, смотрю, что мне больше нравится. на маке Command R и начинаешь по памяти там что-то было гре, и он тебе сразу находит все, что ты писал гре, и ты можешь выбрать там стрелочками. И вот это я использую 24 на 7. То есть я один раз команду загуглил, а потом ее просто вот таким образом нахожу, ну и тоже как бы паттерн такой удобный, быстрый, даже быстрее, чем всю команду печатать. Вот. Какие-то такие, знаешь, атомарные... Ну, это вообще философия Unix'а про то, что вот каждая маленькая задача должна решаться своей маленькой утилитой. А ты их между собой потом можешь пайпами соединять и как бы сделать такой пайплайн обработки символов, как бы файлов. Так или иначе, это всё. Мы с этим работаем. И решить свою любую задачу набором этих маленьких инструментов. но я бы сказал, что я использую максимум там pipe2.3, если мне нужно, опять же это какой-нибудь less, elay, cat, grep, vc cat, то есть вот такие базовые примитивные штуки, которые там когда ты начинаешь просто это от чего идет, вот ты сидишь в командной строке, тебе нужно найти файл, в котором там конфигурационный ключ, не знаю там, ssh-ключ какой-то прописывается тебе нужно взять команду find, чтобы найти файлы там по имени уметь их открыть кетом или лессом, и так далее. Тебе нужно уметь оттуда вычленить что-то по паттернам, греб или авк. То есть это решение твоих задач. Это не сами по себе тулы, которые нужно знать, это они тебе помогают что-то делать, решать свои задачи, когда ты населишь терминали. И пару раз тройку, конечно, погуглив, и если плотно с этим работать, оно потом как-то в пальцы въедается и уже не гуглишь. Но, как я сказал, что большинство команд я гуглю, но потом делаю контр-лэр и нахожу. С другой стороны, можно немного с другой стороны зайти на работу вообще с command-linem. Я как сейчас человек, который пишет command-line утилиту, я думаю, а что, как люди будут с ней взаимодействовать? Какой у них будет первый опыт? И как они вообще будут изучать этот C-Line? И мне кажется, что он должен быть максимально предсказуемым, логичным и никаких не вызывать вопросов в голове. То есть берешь ты там гид-команду, попробуй не гугля, а что-то сделать. гуглить типа там git force push не знаю что-нибудь в какой-нибудь upstream там другой ну не чем-то такое а ты такой возьми такой так вот у меня есть git у меня всегда help у меня всегда есть ман мануал у меня всегда есть какая-то структура в голове команд сап команд у гита есть гит команды потом есть сап команды например push или там commit или там add submodule то есть все эти штуки они как бы такие как сап команды выстраиваются потом у каждой сап команды тоже есть хэлп ты по каждой вот этого вот, то есть ты как на сайт заходишь, ты же не гуглишь как на сайте купить товар. Ты зашел на сайт и ты понимаешь как его купить и точно так же с командлайном ты заходишь в командлайн, ты что-то пишешь просто от балды там cat и он тебе объясняет, смотри, тебе что бы cat тебе нужно файл передать, ты такой а ну да cat и файл передал. То есть как бы вот такое изучение тулы, работы с ней, это тоже прикольный опыт и я как разработчик я всегда вот пытаюсь облегчить этот опыт И в целом, в будущем, мне кажется, мы перестанем гуглить подобные команды. Они будут либо логичными, понятными, потому что больше разработчиков будут думать о UX, о developer experience работы с этой штукой, либо она будет просто Co-pilot подсказывать, и нам вообще ничего не надо будет делать. Спасибо, очень много мыслей, мне сейчас просто тоже хочется много у тебя по всем направлениям тоже спросить, но надо выбрать что-то одно. Первое, что хотел сказать, во-первых, слушатели, вот у нас тут было два тейка про скорость печати, напишите в комментариях, какая у вас скорость печати. Ну, чтобы как-то, не знаю, вот Саша сказал, что не 50 слов в минуту, ну, напишите нам, много это или мало, какая у вас скорость печати. тулы вы пользуетесь в том плане что вот какие камонлайн тулы которые может быть мы не назвали в этом подкасте вот должен знать каждый и то что вот что у вас должно быть на какие слова должны быть на на концах пальчиков вот когда вы находитесь в терминале я добавлю то есть я добавлю камонлайн тулы которыми я пользуюсь ну даже может быть не пользуюсь на вот одна из моих любимых это не знаю какие у нее есть супер команды, я пользуюсь лишь одной GQ, там кавычки, точки, он мне показывает Gson, либо ищу там какой-то property, его тоже в формате Gson достаточно просто искать, еще пользуюсь Head, Tail, ну и собственно не знаю, даже PS, наверное, у PS я там всегда тоже гуглю, ну не гуглю, а смотрю каждый раз какие там рандомно там что-то было е там а и просто так дык дык дык дык дык на канатуре побольше побольше букв чтобы он мне просто выдал побольше информации об этих об этих всех процессах но тоже каждый раз гуглю вот напишите слушатель в как каким вы пользуетесь пользуетесь улайм может быть может быть мы так вместе найдем еще какие-то новые новые новые тулы Вот, ты начал говорить про командную строку, а вот при дизайне команлайных утилит, вообще, что важно? Ну, то есть ты начал говорить, что она вот так вот бы разворачивалась, а разворачивалась, и ты как бы как дерево ее раскрывал, то есть ты как бы ходил по ней, как по веб-сайту, по какой-то иерархической структуре. Вот... Комодлайн утилита еще иногда так бывает, что ты ее дизайнишь-дизайнишь, а потом пользователь просто заходит через какой-то там терминал, который ничего этого не поддерживает. И из-за того, что ты пользуешься своим терминалом там, не знаю, в ZSH, в FISH, по-моему, в этих терминалах, чтобы добавить тебя auto-completion, тебе все равно нужно как-то положить какие-то, что-то сделать дополнительные действия. положить какие-то скрипты в какое-то место. И получается так, что разработчик сам, у разработчика, который разрабатывает Command Line утилиты, он такой тоже зашел в эту утилиту, там тап-тап, пробел-пробел, у него все подсвечивается, у него все везде моргает, он быстро, он так же, как вот developer, адвокат идеи, такой пау-пау-пау-пау, летает просто по Command Line вот этой утилите. А... а потом смотреть как пользуются другие разработчики тузуя они там двумя пальцами просто страдают и набирают одну одну команду за другой вот есть какие-то может быть даже не user experience штуки, а вот какие-то must-have, что должно быть у командной утилиты, что у нее важно, время старта, короткие параметры, нужно ли ставить дэш либо два дэша, вообще что должно быть прям вот такого must-have у командной утилиты, чтобы это считалось как бы, не знаю, хорошо, чтобы ей просто пользовались люди, расскажи пожалуйста. Да, давай, ну справедливости ради, пока все, что я разрабатываю пользует потому что как я сказал что все это в альфе но надеюсь что будет и вот короче по поводу того есть ли какие-то маст хэв гайдлайны Смотри, насколько я знаю, есть 12-факторный что-то там application, guideline такой, вот эти 12 факторов, которые должны там в твоем сервисе приложений присутствовать обязательно. Вот есть прям такая же штука только для command-line аппликейшнов. И называется этот сайт CLIG.DEV, типа CLIG.DEV, и там прям первая страница, это command-line interface guidelines. Офигенный сайт. как командная строка такая все черно-белая, структурированный, достаточно понятный. И вот по нему можно пройтись, там прям гайдлайны по каждому, по каждому. Но если что-то прям выделять для себя, то естественно, ну, наличие хелпа — это база. То есть причем он должен быть как в виде флажка типа "-h", как в виде "--help", так и в виде хелп и имя команды. Потому что пользователь может знаешь, как он наберет, и поэтому нужно поддерживать все вариации хелпа, ну а в нем уже писать все что угодно, то есть описание команд, описание ключей, вот это как бы база, без которой никуда. Дальше это сокращение, например, флажков, то есть у тебя вот, например, есть dash dash help и dash dash h, то есть короткая и длинная версия. Тоже плюс и минус у самых распространенных флагов должны быть и те, и другие, и естественно в хелпе тоже другие, просто чтобы было понятно. Так, из того, что ещё из интересного, это, например, то, куда мы пишем output. Если кто-то не знает, то у терминала есть два output'a. Это stdout и stdyear, то есть то, куда мы пишем ошибки, то, куда мы пишем обычный текст. Так вот, не надо их путать, потому что по этим stdout'ам некоторые другие программы, например, pipe'ы, могут что-то брать, что-то нет. Если тебе в pipe'е, например, он читает, например, stdout, и он там пойдет в программе на вход какая-то, ну, например, сплит тейп-тап-сепараитет файла по линиям и туда его отправляем дальше. Туда придут действительно линии, которые мы засепаратили. А если была ошибка, то она туда уже не придет. А если мы ошибку будем писать в общей стедау, то нам на следующей программе придет ошибка, и мы ее начнем там парсить. И вообще непонятно, какой результат получится. Поэтому разделение вот этих вот аутпутов — это важно, но это в целом во всех окружениях поддерживается. ошибок, то есть Exit 0, Exit 1 и так далее. В целом большинство не сильно разделяет эти кода, вот реально, вот если в REST хоть кто-то как-то мы что-то разделяем, то в command-line application если все хорошо, то это 0, если плохо, то это 1 и в целом все. Но я тоже так, например, делаю, потому что если большинство людей не разделяет какая там ошибка, то может оно и не это все уже какие-то вот здравый смысл. Вот действительно очень важно поставить себя на место того человека, кто будет использовать вот твою программу твой command-line application и понять, что бы он хотел как бы он изучал твою программу, какие команды он изучает. Ну например, если у тебя есть структура там git add, git push, git там что-то еще, git commit, у тебя вот четко ты можешь увидеть, что второе слово после гита это глаголов. То есть и после глагола дальше идет уже его... Собственно, это значит, что команда закончилась. Все, дальше уже идут параметры, флажки. А вот, например, Git-сабмодуль. Сабмодуль — это не глагол. Но после сабмодуля пойдет глагол. И вот когда он пошел, после него ты уже начинаешь тоже делать. То есть выстраивается такая четкая структура и паттерн того, что ты в целом, когда ты пользуешь это, ты можешь даже не заметить, но в этом есть какая-то логика, структура, которую нужно придерживаться, нельзя менять. всегда, когда делаю такие сапкоманды, сапсапкоманды, я всегда эту структуру выдерживаю, потому что, мне кажется, это просто логично и понятно. Имена там флагов, например, тоже. Если где-то ты, допустим, есть ряд команд, которые делают что-то для всех, вот условно там. покажи мне все конфиги, покажи мне все таблицы, покажи мне там все. И у тебя этот флаг, он передается типа dash dash all. Ты передаешь его туда, в одной команде, и он работает. Если в другой команде у тебя по дефолту будет показывать всех, а чтобы отфильтровать нужно передавать dash dash filter, то это ломает как бы подход. То есть в одной команде так, в другой так уже людям сложно держать в голове, поэтому если ты dash dash all везде выводишь, пожалуйста, уводи так. Если у тебя all это какая-то сапкоманда, пускай она будет везде такая. предсказуемость и понятность, мне кажется, это самое важное в Common Line Application, в целом во всем, что мы пользуем, независимо от того, что это веб-сайт, программа, идеи и так далее, то есть оно должно быть понятно, если оно не понятно, пользоваться, наверное, этим не будут. Вот такие мысли. Я сейчас вот слушал и думал, как бы это могло относиться к Java разработчику. Какие command-line тулзы пользуются именно каждый день Java разработчику? Хороший ли у нас command-line тулзы? Ну вот Java это же тоже command-line tool. Там Java C command-line tool. Там JAR это тоже же command-line tool. И вот я думал, хороший ли у них интерфейс? Ну, так. Ну давай так. Знаешь, он, наверное... Да-да. Я тебе так скажу. C, Java и Jar были бы хорошими Common Land Tula, не было бы Мевина, Градла и Анта. Потому что, знаешь, я иногда так думаю, эти штуки, они реально просто делают просто удобнее, и пользование Java C, и вот этими всеми, чтобы все собрать вместе, и оно, блин, начало работать. То есть, мы просто хотим, чтобы классы, они скомпилировались, положились в одно место и запустились, и ради этого нам нужен Gradle. Ну, это я так, конечно, утрирую и шучу, но в целом, да, то есть, то, что ты сказал, что это... Ну, это сделано просто не то, что... неудобные, непредсказуемые. То есть каждый раз любой ключ в GVM я всегда гуглю, и они то через D, то через какие-то другие. Ну как можно было вообще придумать такую систему подачи аргументов в command-line application? Я даже не знаю, это какое-то, видимо, затмение было или что, потому что есть же примеры нормальных command-line application, независимые, это компилятор или что-то, можно просто с ней коммуницировать, более понятно, и это конечно да, это жестко. что возможно, не уверен что это прям жестко, но в том плане что возможно, джава же она достаточно старенькая, возможно в 91 году были, знаешь типа, программисты настолько страдали, что для них вот эти вот тулы джавы казались каким-то, знаешь, типа вау, просто каким-то невероятным, невероятным, во-первых, то что они есть, то есть возможно просто в то время оказалось, что это, блин, это, это, видим какие-то, не знаю, вот я с завистью смотрю на ГО, где там, ну, ты запускаешь бинарник, там делаешь билд, делаешь раны, все как бы, и все работает, и смотришь на другие языки, там, например, в Rust есть там package manager, он есть стандартный, он есть из коробки, там есть Rust App, который сам тебе тоже стандартный, он помогает тебе обновлять это все. У нас в Java есть там всякие, есть дикомены, там какие-то еще тузы, которые у менеджера, вот эти gdk и причем ты менеджить этими gdk может только у себя на лэптопе потому что девопс конечно же он не будет этой пользу с вашим издики издики мэном че это за хрень для хипстеров программа которую через sh устанавливается я думаю не один д вопсе или там инженер какой-то не поставит на сервер там же скрипт на да ну то есть я к тому что как будто ну как будто есть сейчас более удобные примеры поэтому жалована на фоне этих пример смотрится так так вот как-то не очень не очень выгодно именно с этой стороны все еще на классе красиво смотрится с точки зрения языка это элегантный и красивый язык и на нем правда удобно удобно писать но вот вот та часть которая command line tools это прям какой-то какое-то ну прям страдание вторая вторая мысль которая хотелось сейчас еще задать вопрос вот мы говорим про использование command line tools но вот Что про написание command line tools именно на джаве? Я к тому, что command line tool на джаве это java jar и jarnic, то есть вот так вот в нашем джаве в мире выглядит command line tools. Стоит ли вообще писать command line tool на джаве, либо можно написать его на питоне, который там питон есть почти что на всех серверах, на многих машинах он предустановлен. Может быть стоит эту command line tool написать на каком-то там не знаю. Ну, я знаю, это плохо. наверное, но говорить джава подкасте, но даже на гоносе плюс-плюс ты написал, неважно, неважно как, она как бы будет работать и будет быстро стартовать, будет как бы что-ли предсказуемым, тебе не нужна в конце концов виртуальная машина для того чтобы она там была на этом серии, какая версия у этой там виртуальной машины, потому что питон у все просто, есть второй питон, есть третий, нету 18 питонов, у нас же у нас же этих просто невероятное количество. Многие скажут, что конечно она там backward compatible, но все равно их просто много. Просто если ты знаешь об этом, когда ты уже много знаешь о Java, когда ты не знаешь ничего о Java, тебе кажется, что это просто какое-то невероятно сложно. Вот ты когда пишешь VTOL именно на Java, я так понимаю, не с точки зрения user experience, а с точки зрения старта и того, что должна быть используется GVM и все. такое. Вообще, правильный ли это выбор? Может быть, нужно было взять что-то другое? Командлайн тулы на джаве писать не нужно. Это можно вначале вставить нарезку. Ну, как бы всегда есть обстоятельства, которые влияют не только на наши прагматичные какие-то представления о том, на чем бы хорошо было писать, ну и, например, основной язык продукта, для которого ты пишешь этот командлайн аппликейшн, хорошо было бы, если бы он был написан на том же, если есть такая возможность проблем. Поэтому вот я, например, сейчас full-time пишу на джаве, но я бы сказал, что для себя я могу написать что-то на питоне, потому что супер просто удобно, быстро, домашнее что-то, вообще кому-то не нужно что-то шипить, какой-то продукт, много тестов писать, вот просто для себя. Ну а если брать какое-то действительно такое решение в вакууме, когда у меня все множество языков, инструментов есть, на чем бы я писал ком онлайн, это было бы однозначно год, для меня лично сейчас, потому что, во-первых, я этим языком интересуюсь, смотрю, изучаю, и мне он нравится в целом, как язык мне очень сильно импонирует Go, поэтому я бы выбрал его. Если по каким-то причинам не нравится, то можно посмотреть в сторону действительно Python или даже там... Очень много, кстати, command-line-applications написано на JavaScript. Я когда изучал эту тему, просто куча, они еще любят эмоджи. Это просто любой JavaScript какой-то command-line, там будут галочки, вопросики, не сильный фанат этого, но в целом тоже можно, если вы JavaScript знаете. Почему, например, Java плоха для этого? Естественно, очевидно, это время старта первое, потому что Java стартует долго. И когда время старта является частью experience, я все-таки так и хотел сказать, вот без user experience, я вот не могу, я вот на этом помешан. Если эта часть, он ожидает результата, Это звучит как дикость, во-первых, в мире нашем, когда есть куча других способов запустить программу. Но вот время ожидания. Если приложение более-менее сложное, более-менее такое... там внутри есть dependency injection, не дай бог вы spring туда затянули, зачем-то в CLI и так далее, то он будет стартовать 3-4 секунды. Вот представляешь, тебе health нужно прочитать, ты ждешь 3 секунды. Ну о чем мы говорим? Поэтому, естественно, это огромный минус. Но если, например, не тащить какой-то DI, все там писать самому, библиотеки только легкие, то можно там добиться типа в секунду, ну миллисекунд 800 там, и ты будешь получать что-то типа уже приемлемо, большую часть инфраструктуры и фишек Java, за которые мы ее любим. Вот, но есть, естественно, Grail VM, которая нам может помочь Head of Time Compilation. Мы можем скомпилировать нашу программу с помощью Grail VM компилятора, собрать его Native Image и получить такую же скорость, как угол программы. Она незаметна для человеческого глаза, это выглядит моментально. Но это тоже какие-то свои ограничения, свои приколы с Grail'ем. Я думаю, что, наверное, в какой-нибудь, может быть, другой раз можно про это поговорить, но не все там так гладко, просто и хорошо, не все так круто, как рассказывают девелопер-адвокат из всех углов. Крутая штука, но еще сыроватая. Вот поэтому, да, короткий ответ, я бы выбрал Go и не парился. Вот такая вот реклама Go Leng'a у нас в подкасте. В предыдущем подкасте мы рекламировали Kotlin, в этом подкасте мы рекламируем Go Leng'. Чему я, собственно, и рад. Языков должно быть много, и потому что, иначе бы, если бы не было вокруг столько языков, наша Java бы вообще бы не развивалась, осталась бы на том же месте. Мне кажется, что именно соседние языки играют большую роль, тащат Java наверх. Саша хотел перейти ко второму блоку, этот блок про прагматичные практики. Ты вот в своем подкасте, когда читаешь книгу и рассуждаешь о некоторых практиках, вспоминаешь про стандарты OpenAPI. И это такая интересная штука конкретно для Java-разработчиков, потому что каждый, наверное, Java-разработчик в какой-то момент жизни, когда хочет написать клиента для своего какого-то любимого Java-сервиса, сталкивается с тем, а как пишут другие. И тут оказывается, что есть несколько стандартов, вот один из них Open API И тогда Java разработчик говорит, ну конечно же, мы любим стандарты Мы со времен... У нас вообще в Java все там стандартно и по стандарту Мы фанаты стандартов, отлично, есть стандарт, как это дальше сделать? И там дальше открывается целый дивный номер в мире, что ты можешь делать стандартно, но будет очень неудобно Либо можешь делать, отходить немного от стандарта и генерировать какие-то более легковесные, не знаю, клиенты но уже не по стандартам, но другим разработчикам опять же придется разбираться с твоим вот каким-то самописным клиентом, как им пользоваться и все такое. Можешь рассказать, какую ты задачу решал в своем проекте и как ты дошел до написания API клиента и чем все в итоге закончилось, потому что, честно говоря, я не помню, чем закончилось в подкасте. Да, там в общем подкасте это был такой чекпоинт текущего состояния, как бы, то чем я занимался. Но задача была простая. Нау SQL база данных, на то и нау SQL, что они not only SQL, и у них есть, например, REST API у современных и хороших. И хотелось бы, чтобы они были достаточно предсказуемыми, шли в ногу со временем и не вызывали вопросов у людей, и были удобными в том числе. Поэтому, да, я разрабатывал REST API и выбрал как декларацию интерфейса спецификацию и фиксирование этого API и документирование этого API. Я выбрал оба API спецификации, но в целом выбор-то достаточно очевидный, простой и лежит на поверхности. Другое дело, что и многие не пренебрегают очень часто. Это уже другой вопрос почему. Мне кажется, один из ответов на этот вопрос это то, что вокруг самой хорошей спецификации написано очень много плохих туллов, которые очень сильно портят experience работы с этой спецификацией. лишний раз разработчик, который разрабатывает уже 150 первый раз сервис, он подумает, возможно, если не нужно, нет необходимости декларации этой спеки, он может быть ее не будет декларировать, потому что я бы сейчас для внутренних сервисов подумал, не то чтобы я 100% брал бы, я бы еще посмотрел, потому что всякие генераторы клиентов, те же самые генераторы самой спецификации или генераторы бэкэндов из спецификации, они такие богованные. в том, что не так, это невозможно. И ты так много времени проводишь, страдая с этими тулами, что все желание отбивается следовать этой спецификации, и лучше там думаешь самому написать два раза, блин, руками навоять спецификацию и бэкэнд под нее написать, и проверифицировать как-нибудь, и нормально. Но да, мы сейчас используем генерацию самой спеки из бэкэнда, то есть у нас декларация интерфейсов, контроллеров, дтошек, всего-всего, оно в перемешку с микронавтом анатациями от Open API спеки, после этого на этапе компиляции из этих анатаций делаются всякие процессинги, в итоге результатом артефактом сборки Rest модуля является Open API спецификация сгенерированная, которая лежит там же в коде, в гите, по которой, например, очень удобно смотреть на полреквести я вижу изменения в этом файле. И я вижу, что вот прям декларация нового endpoint появилась. Это очень удобно. То есть ты сразу видишь, как изменился интерфейс, поломалась ли обратная совместимость API, потому что это очень важно не ломать ее в таких продуктах. То есть такая вот документация в коде, которая идет с тобой, и всегда up to date с кодом, потому что генератор говорит, что 100% оно будет up to date. Это очень удобно. Ну и с другой стороны, для консьюмеров этого API это тоже очень удобно. Помимо того, что ты можешь, во-первых, документацию открыть, которая всегда с кодом соответствует на сайте, который генерируется из Open API Spaki, ты можешь изгенерировать клиентов из этого Open API Spaki. Да, не всегда получается. Если бэкэнд достаточно сложный, там есть работа с файлами, и какие-нибудь там стриминги, сложные какие-то штуки, связи между сущностями там, то... чтобы сгенерировать из этого какого-то адекватного клиента, тоже придется, наверное, поприседать. Но если что-то простое, то делается одной кнопкой, я и в своих проектах тоже генерирую клиента спокойно, и это очень удобно. То есть мне не нужно постоянно писать код под... подновляющиеся API, под изменяющиеся какие-то штуки, я просто добавляю нового клиента, и он у меня работает из коробки. Так, например, у нас CILA использует сгенерированный клиент из REST. Мы сами dogfood'ем то, что производим. Поэтому, наверное, вот как-то так. Это очень удобно, одним словом, но есть нюансы, есть кривой туллинг, про который можно разговаривать вечно, я бы не стал тратить времени, потому что это очень больно, неприятно и непонятно, как от этого уйти. Непонятно, что с этим делать, это вот блеск и не счета open source я сталкнулся с абсолютно теми же проблемами то есть в какой-то момент ты встречаешь OpenEPI такой счастлив как не знаю кто ведь идея очень классная но вот когда начинаешь это реализовывать в конце вот особенно с аннотациями вот у тебя метод там называется там не знаю create что-то и на нем просто настолько не знаю 16 этажей этих аннотаций что ты в какой-то момент такой думаешь блин ну и ради этого я не боялся его одной аннотации, да тут мне это там какой-то свагер с OpenAPI, просто невозможно смотреть на этот метод, это превращается в какой-то такой annotation hell, что просто ну прям больно смотреть. В итоге, конечно, получается красивый вот этот файлик, но столько всего в коде приходится как-то хранить вот этих вот потом тоже какой генерируется клиент да он генерируется тоже хорошие но опять же проблемы с производительством плане что чтобы там подменить подменить его какие-то вещи внутри это достаточно тяжело сделать и не может заменить просто там эти типи клиента вот так вот прям вот легко чтобы что-то там тоже подебажить и всегда приходится тоже лазить поэтому по этому коду и очень это как-то неприятно в том плане что возможно возможно ты прав и стоит стоит, если у вас действительно какой-то клиент и вы хотите контролировать вообще все это, у вас имеет место производительность, вы сами хотите следить за тем, что и куда возможно, просто стоит написать с нуля аккуратненько, и когда вы добавляете метод на сервер, вы идете добавляете метод в клиент, пишете тест, что он работает, проверяете, что он там... правильно вызывается и это вами написанный вручную ваш любимый код за который вы несете ответственность как разработчик и если будут баги вы в нем аккуратненько все это пофиксите отрифакторите а не будьте говорить что вы знаете это OPNPi кривой мы тут разработчики как бы хорошие это просто вот там вот какие-то там вот какую-то фигню написали и как будто происходит такая на клиента к вашему серверу. Но спецификация действительно, это как сама идея, это очень хорошо, и описывает свои сервисы понятным языком, это обязательно обязательно к своим, к серверам пишите документацию и генерируйте как можно больше документации, потому что у некоторых сервисов вот разбираться, разбираться с тем, как работает каждый какой-то API-клиент, если вам это просто такой ад и каждый раз просто много бесполезного времени тратишь на это, которое уходит просто в никуда. С каждой новой версии тебе приходится заново разбираться, как это все работает. В общем, спецификации хорошо, но вот так что-то как-то и недостигли мы вот с ZEN с этими спецификациями. И я не знаю, как выглядело бы идеальное что-то. То есть, как бы выглядела идеальная вот это вот как это workflow когда ты что-то добавляешь фичу там на сервере она сразу появляется в клиенте может быть есть какие-то какие-то идеи либо примеры удачных тузов где таку ау как у вас круто все это вместе генерируется и взаимодействует Да, я вот не раз на самом деле пытался представить себе какой-то такой тул, возможно даже с позиции человека, который мог бы в целом такой тул написать, там вот, куда бы упороться. И пока на самом деле я не сильно много каких-то открытий для себя сделал, размышляя над всем этим, потому что, ну, попытка уже не первая на самом деле сделать какую-то вот такую универсальную штуку, и она постоянно вот о грабле реальности разбивается, потому что слишком много всего хочется потом неконтролируемо. Поэтому мне кажется, что возможно подход шипинга конкретных... Что-то универсальное сделать я пока не готов задизайнить, что-то универсальное. Но что-то конкретное, например, вот у тебя есть клиент, сервер, ты хочешь обеспечить между ними взаимодействие какое-то, вот какое ты описал, что на сервере появилось, что-то на клиенте, там оно как-то само потом пошло. Ну вот, я бы сейчас, если я хочу прям делать какой-то продуктный уровень там базы данных, я бы писал своих клиентов и поставлял бы их отдельными библиотеками. где-то работает, я могу обеспечить обратную совместимость, как я хочу, все там реализовать, и для пользователей это будет наилучший, для пользователей, я имею ввиду для консюмера твоего клиента, тот, кто его у себя в коде использует, это будет лучший опыт, потому что ты там все, у тебя есть контроль там внутри. Так что это вот первая такая мысль, что если есть какая-то узкая задача, я бы ее решал тоже узкой, я бы не делал какой-то широкий, какую-то вундерваффлю, которая во всех случаях, для всех возможных языков будет работать, потому что передо мной такой задач не стоит. А какой-то стандарт, я думаю, в целом, Open API спецификация, как сама спецификация, она достаточно хорошая. Ее реально можно написать руками самому, ее можно прочитать, по ней можно генерировать что-то. Вопрос просто в поддержке и в качестве туллов, и тех, кто их пишет, и сколько на них времени тратится, и ресурсов. Это же просто open source, который никто особо не из например, хсвагер-генератор, который генерирует документацию, и сервер тебя поднимает, ты можешь документацию. Он в целом OK. И с ним проблем редко бывает, когда вот с вот этой частью. Проблема возникает с тем, что пишут обычные люди, которые приходят и хотят сделать там, об, генерацию клиента для микронавта, генерацию клиента для спринга, для какого-нибудь еще, для нативной Java. Вот в этих штуках проблемы, мне кажется, просто контроль, может быть, собственных генераторов. Если есть такие ресурсы, если вы какая-нибудь там большая компания, которая много занимается open-source, можно вот этому просто внимание уделить и сделать просто этот продукт более контролируемым и качество проверять там. А что-то такое, я, знаешь, пока даже не уверен, в каком направлении мы двинемся, потому что с генеративными моделями вся эта генерация и вся эта штука, она может кардинально поменяться. И я бы даже сейчас, будучи каким-нибудь большим инвестором или большой компанией, я бы не занимался инвестицией вот в тулы, какие мы сейчас обсуждаем. Я бы подумал, подождал бы немножко, посмотрел, как себя поведут генеративные модели. И в целом, генерация документации идеально те модельные генерируют. Вот уже сейчас может это делать. Ну, под вопросом, но возможно тоже сможет сделать. Проверять, что клиент соответствует серверу, почему нет? То есть, вот эти все проблемы, которые мы обсуждаем, они в целом могут быть решены теми моделями, которые сейчас очень сильно развиваются. Поэтому вот есть такие две ветки, либо контроль качества и написание, просто вливание ресурсов условно вот в эту штуку в Open Source, который этим занимается, либо вообще это будет генеративная модель. Посмотрим, в интересное время живем. Очень интересно, что ты напомнил про вот эти вот про генеративные модели, потому что тоже сейчас много, ну то есть весь твиттер завален хайпом про них, что когда они там заменят разработчиков, когда они заменят тестировщиков, когда они заменят, ну всех просто заменят, ходят и заменяют всех всех подряд вот и с этой мысль хотел спросить тебя про тестировщиков в том плане, что ты в начале подкастка сказал, что ты привержен TDD и тесты во первых Во-первых, мне очень понравилась эта фраза, вот мне кажется, что это достаточно хороший ручифицированный перевод фразы типа тест тест фест тесты во-первых он достаточно достаточно приятно звучит вот расскажи как ты пишешь тесты тесты во-первых потому что я не пишу тесты во-первых я их пишу уже потом когда когда у меня все все все все сломалось вот расскажи пожалуйста как ты вот если тебе нужно писать допустим да какой конкретный пример вот ты пишешь ком онлайн тулзу давай это будет ком онлайн тулза для генерации выпусков выпусков подкастов, какие, как бы ты писал вот ее с помощью TDD. Так, ну у нашей Тулзы что на вход идет? Выпуск МП3, а из нее что-то выходит? Давай любые, вот все, что ты сейчас придумаешь для тузы, для генерации подкастов, вот то мы и разберем. Ну давай придумаем, потому что я на самом деле вот сейчас нахожусь в процессе небольшом придумывания чего-то такого, потому что я хочу сделать, чтобы мой подкаст сопровождался постами на моем сайте, и там была расшифровка и транскрипция всего подкаста. И давай вот какой вход для нашей коробочки есть, и какой будет выход. Вот вход — это mp3-файл, очевидно. И какая-то мета-информация, которая, например, ну, например, все ссылки на, ну, корневые ссылки на Apple Podcasts, на Яндекс.Музыку, то есть ссылка на подкаст, не на сам выпуск, а вот типа корневая, а потом ID-шник, потом после выкладывания. То есть RSS-фит какой-то, то есть все вот эти артефакты, они туда идут на вход. И на выходе я хочу получить, например, статический, ну, с сайтом, конечно, проблема тестировать HTML, это фигня какая-то. Ну, давай будет на выходе какой-нибудь файл, пускай и в нем будет несколько полей, будут там 5 ссылок на все соцсети с выпуском и собственно таймкоды в Gson, ключ значения таймкод и текст. Вот, есть импут и есть вход. Это очень важно. Вот я так мыслю всегда обо всем. То есть, common line application легко мыслит импут, что-то вошло, что-то вышло, black box такой. Но и про классы, про методы, про все, с чем я работаю, я всегда мыслю, как black box штуки, потому что потом, когда я или мои коллеги будут с ней работать, она для них и будет black box. Они такие, вот у меня есть метод, что ему надо дать и что я получу. Вот реально все, что их интересует. Редко когда тебя действительно интересует внутренняя реализация, хэшмапы используются или там concurrent хэшмапы, да всем все равно. Ну ты можешь определить контракт, что он thread-safe или не thread-safe, да это важно. Но какие-то внутренние вещи, они не интересные. И мне, когда я пишу, тоже они в начале не интересные, потому что мне нужно в начале вот этот вот интерфейс сделать. Если мы говорим про command-line application и про тесты вперед, на самом деле тема такая, достаточно щепетильная, потому что нормально протестировать command-line application, вот с точки или даже вот такого высокого уровня функционального, типа я на вход подал три файла, запустил там через командную строку команду и получил какой-то результат. Эта задача вообще нетривиальная. Я вот в свое время на это потратил недели две фуллтайма, я ресерчил, как можно такие тесты в целом написать, чтобы их без боли писать. И в итоге я написал свой микрофреймворк такой, но он пока что движение, чтобы допилить до какого-то состояния, чтобы можно было показать публичности, он еще не дошел. Но в целом он условно выглядит так. Я пишу вот эту команду, там, mike-cli--input-file-tara-la-la-ta-pala. Вот просто такую строку написал. Типа вот, я запускаю вот это типа given, потом я жду пока она отработает. Вот тоже. execution и у тебя есть exit code, то ты можешь в коде понять, что exit code прошел и ты получил результат. А если у тебя интерактивная штука, то она постоянно output производит, и ты не знаешь, когда она закончит этот output производить. Там тоже плясок много. Ладно, это тоже такое отступление. Условно говоря, я пишу верхний уровень тест, пускай вот реально я бы с чего начал бы, сейчас я бы написал бы, допустим мы не говорим про сяний, про что у себя локально, я бы написал типа создал бы и через Java run, через runtime сделал бы run command и прямо бы сделал бы вот моя команда, как я ее себе вижу и прямо строку бы передал какая есть строка и потом, дальше бы сказал, что вот output там output будет редиректиться в output stream я бы этот stream скомвертнул в строку и посмотрел, что эта строка в себе содержит JSON и в нем есть поля какие-то просто в начале, типа очевидные после этого я Запускаю тест и очевидно он у меня падает, я вижу что он не работает. я иду, всё, начинаю реализовывать, типа всё, я себе как бы вот на этом этапе я поставил себе задачу, какую мне сейчас надо решить. Мне нужно, чтобы тест прошёл. Это вот первая такая итерация. Я написал падающий тест. Я никак, то есть это ничего, у никого упорства нет, я просто написал тест, и он потом будет работать. Я пошёл уже в Main, создал класс там, сделал его максимально кривым, максимально тупым, потому что я сейчас о реализации тоже особо не думаю. каких других больше, без налчеков, без всего. Предположил, что Happy Pass, написал под это код, запустил тест, он прошел. Замечательно. Это первый круг итерации тест-дривер-девеллотн на пройден. точнее не круг, а мы его завершаем в конце нужно сделать рефакторинг того кода, который ты написал то есть у тебя был красный тест, ты сделал тест зеленым теперь делаешь код нормальным я пошел, естественно теперь как-то его порефачил ну кстати на первой итерации я бы его вообще не трогал и написал бы второй тест в втором тесте я например передаю mp3 файл, которого нет не существующий файл запускаю, он у меня падает, потому что у меня там файл found или какой-нибудь npe вообще выскочит потому что я же код писал, не думая про это я пошел, эту багу пофиксил код заработал на этом этапе уже можно подумать о каком-то рефакторинге, но вроде бы еще ничего рефачить такого не надо потом я там начинаю понимать, что мне нужен какой-то ключик новый, который будет отвечать за то, что у меня формат json не будет содержать тайм-кодов, а будет только блок-пост генерировать то есть вот такая штука и я иду, пишу на этот тест, что если вот такой флаг, то у меня там нет тайм-кодов, никаких цифров в этих полях ну просто json-pass-ом каким-то делаю, regexp и говорю, что вот есть такое поле, и в нем какие-то слова. Вот делаю assert, получаю тоже красный, иду обрабатываю этот флаг, пишу новый if, уже вижу, что ага, у меня if, и у меня есть два процессора файлов, я уже такой, ага, я могу вынести вот эти два процессора в какой-то интерфейс, в какой-то другой класс конфигурируемый, и чтобы он работал. Вот в этом моменте я делаю refactoring, привожу код в порядок, тесты работают. И вот так вот постепенно на каждом шаге задача максимально тривиальная и понятная, мозги на самом деле реально ты начинаешься представить все решение сразу, все что тебе нужно это выдать из себя первый вот этот вот тест, потом уже реализацию легко идет и дальше оно как бы накатано и ты просто в процессе вот в этом вот потоке фигач-фигач-фигач и выходишь потом у тебя дофигище тестов и нормальная переиспользуемая, конфигурируемая реализация выходит и как будто бы оно того стоит в конкретном этом примере. Вот они мне дают как раз уверенность в том, что я написал то, что я хочу, а не просто написал класс, который что-то выдает, а потом в command-line у меня не распарчивались реальные аргументы и у меня упало там с NPE. Ну и что мне этот тест как бы дает? Поэтому я сюда сразу пишу максимально верхнеуровневые тесты, которые возможны. Вот, наверное, какой-то такой пример, который ты дал, я бы так его разрабатывал. Да, спасибо большое, мне кажется это очень хороший пример мыслительного процесса и действительно прикольно, что можно кодить не используя клавиатуры, это очень здорово, разобрал все кейсы, то есть ты объясняешь, я понимаю, ага, вот тут добавляем ИВчик, вот тут прям вот у нас тут какой-то еще процессор интересно, как передаются, передаются даже голосом понятные программистам концепции вот команда онлайн утилитов конечно круто вы протестировали такие тут молодцы и сидите такие умные вы моем приложении на работе видели да там задница там он стартует три минуты и что и если это ладно интеграционность не могу написать g unit тест так я чтобы создать один бин мне надо туда засетить 16 бинов и чтобы из каждой из этих 16 бинов создать надо либо написать там 16 16 Вот такое полотнище кода на верифаях, на каунтах, на моках, которые просто невозможно поддерживать. Как мне писать через TDD, если у меня уже такой беспорядок в коде? И большинство разработчиков, неправда, приходят на проект, а там уже кем-то написано без TDD, там уже все плохо. только повосхищаться тому, как там все прекрасно работает. У каждого есть такой, как бы, чулан, чулан, либо что балкон со старыми вещами, который не разобран. Вот что делать с ТДД и таким вот старым чуланом, в котором даже не понятно. Ты там одну достаешь оттуда из этого чулана, не знаю, велосипед, а там сверху на нем, оказывается, какие-то коробки стояли, они тебе раз по башке, то есть ты просто в какой-то безвыходной ситуации. И конечно здорово ходить, вот они смотрят на конференциях, на TDD, на разные G-Unit фреймворки такие, вау-вау, потом приходят к себе на работу такие, ну, здорово послушали, как бы у меня очень было приятно, ну а теперь за реальную работу. Это все конечно очень интересно, но теперь надо заниматься делом. сможет ли ТДД как-то помочь в этой ситуации? Да, мысль... Я примерно... Вот так же я мыслил все время, то есть вот все, что ты сейчас рассказал, я уже через это прошел, когда прям знакомился почти, начиная от тех замечательных спикеров на конференциях, которые с нуля начинают чистый проект писать, и у них все настолько красиво, круто, и все работает, и реально ты такой ну, круто, ребят, конечно, но у меня реальные проекты, у меня есть работа, в вас и я ее делаю и поэтому вот с нуля пожалуйста демки свои там лайф кодинги пишите тд д круто супер реально вся developer advocate они вот так пишут код и меня это честно говоря очень сильно раздражало я думаю что многих людей тоже потому что вот ты не чувствуешь за этим правды когда тебе говорят я сейчас spring boot 3 все подниму здесь мне сервис мы здесь будем сейчас магазин делать поднял, ты понимаешь, что это просто эмуляция реальной разработки. В жизни так не бывает. В начале я думал, что у меня что-то с жизнью не так, потому что это у меня что-то не то. То есть я вот они показывают, а я, ну у меня вообще по-другому. Но потом, когда уже достаточно много кода пишет, ты понимаешь, что нет, у тебя все в порядке, это все, наверное, по-другому к этому стоит относиться. И поэтому я всегда, когда начинаю разговаривать про тдд или про какие-то такие вот developer я максимально начинаю сразу понять аудиторию, с кем я говорю, что я с вами, я вместе с вами пишу код, я каждый день пишу код, я не девелпер-адвокат, и я им никогда не буду, я чувак, который просто любит программировать и делиться об этом с людьми, и поэтому все, что я говорю, это то, что происходит в реальной жизни, то есть я так код пишу реально, вот, поэтому если говорить про например, сразу теста на самого высокоуровневого, то есть когда ты на input даешь команду и на output'е проявляешь там файл, например, существования, он тоже как бы... И идея написания этого теста, она пришла ко мне с опытом, потому что я понимаю, что если сейчас... в начале я писал unit-теста, то есть я создавал класс, и бы там, импатри-файл-процессор, на него бы создал тест, и ему бы подавал уже на вход джавовский файл. На выходе я бы ожидал, что у меня тоже будет джавовский файл, и я бы эти два файла ассертами там сравнивал. Но я не начал так код писать, потому что так можно, но это не прагматично, потому что ты начинаешь завязываться на конкретную реализацию, вот как ты сказал в этом чулане, это равносильно тому, что ты в чулан руку засовываешь и пытаешься там что-то этой рукой достать, но ты не достанешь, потому что все рассыпется. Но когда ты ставишь задачу, вот у меня есть этот чулан, но мне нужно в этом чулане найти какой-то предмет. И я задачу ставлю не к тому, что я вот руку засуну и буду его доставать, я говорю, что вот у меня есть предмет, не было предмета, потому что я что-то сделал, у меня предмет есть. Я на таком уровне начинаю писать тесты, то есть я поднимаюсь максимально, высоко, чтобы не говорить про реализацию. А реализация может быть любой. Я могу сунуть руку в чулан, действительно. А я могу заказать какого-то монтажника, который по веревке сверху достанет с другой стороны на балконе. Я это в тесте не указываю, я на это не завязываюсь. Я говорю, что мне нужен результат. И когда на таком уровне мы пишем тесты, вот это вот наследие, этот легосетер, она уже начинает играть меньшую роль. Действительно, бывают ситуации, я не раз в них попадал, когда я Таких тестов просто невозможно написать. Есть какая-то интеграция с какой-нибудь древней очередью, чтобы её поднять, там нужно этот класс. Бывает. В таких случаях я либо-а просто не пишу тесты вперёд, ну потому что бывает. И себе дороже реально сидеть и упарываться. Это уже какой-то оккультизм, когда ты уже без этого не можешь код писать. Нет, пожалуйста, неудобно, я не пишу. Я сильно себя не утруждаю вот этими стараниями и выглядеть вот этим вот адептом, который постоянно это пишет, это вообще нет. Когда есть возможность, когда это в кайф, когда это прикольно, я это делаю, когда нет, я смотрю на возможности, а как можно было бы так сделать, если я помню, что здесь нужно все переписать, перефигачить, я такой, ну и ладно, напишу я просто код, вставлю я этот if, этот флажок и напишу максимально верхнеуровневый тест в той тестовой системе, в той тестовой парадемии, в которой живет проект и не буду ничего с этим предпринимать, в свое время оно тоже имеет ценности, не всегда идеи стоят того, чтобы им всегда следовать. Поэтому вот так вот... А, ну можно еще, например, у меня даже доклад-то был самый мой первый в жизни доклад на работе, я как раз про ТДД рассказывал, и он назывался типа ТДД в реальной жизни, что-то типа того, я прям сразу позиционировал это как вот не какой-то бул-чета, а реальный мы сейчас будем. И чтобы быть прям трушным-трушным, я в лайф-кодинге брал свою заданную, ну это был внутри, в компании, я брал тикет из бэклога своего в джире, двигал его in progress, создавал ветку, реализовывал это все в TDD, коммитил и типа вот мой рабочий реально в нашей джире процесс, я в TDD показывал это как keynotes. Ну естественно я подготовился, я не брал те тикеты, которые будут очень сложные, я брал обычные какие-то там вот бэкфиксы вообще идеально просто, только так проскакивает в TDD. и life coding я естественно подготовил, в плане не предзаписал, но у меня были какие-то в голове код, который я буду писать, потому что life coding не подготовлен, это что-то невозможное, поэтому я готовился. И поэтому, реально, в этом докладе, в котором я тогда делал, там как раз был пример баги. То есть был какой-то сервис, который реально интегрировался с каким-то древним сервисом, который сложно было поднять. Но была бага, которая была сконцентрирована в каком-то одном объекте, в каком-то одном классе. И я увидел, что этот класс можно в целом вынести из… Даже не класс, а метод. Этот метод можно вынести в класс. в класс, ты можешь этот метод тестировать в отрыве от того объекта здорового, частью которого этот метод является. Поэтому вот такой первый рецепт, если можем вынести код, который мы фичу добавляем или багфиксим в отдельную какую-то сущность, и она не выглядит искусственной, а какой-нибудь там, ну, парсер, например. То есть, у тебя большой статический класс, который внутри себя есть метод, он парсит, но вынесет это в отдельный класс парсер, создает, чтобы он настраивался какими-то настройками парсинга, строку или что тебе нужно. Выносим функциональность в отдельную сущность в класс. пишем на него тесты как угодно, потому что мы уже вытащили это из чулана и можем с этой коробочкой отдельно играться и ее тестировать. Да, это не такие большие верхнеуровневые тесты, но это тоже тесты, они тоже полезные. То есть вынесение в отдельную сущность — это рецепт, который я всегда использую, если есть возможность. Вот такие, наверное, мысли. Про вынесение в отдельную сущность я подумал, какая может быть аналогия с чуланом. велосипед падает, подергался за велосипед, так, велосипед дергаешь, коробка сверху валится. Но ты как бы долго смотришь на этот чулан и в конце концов находишь те вещи, которые можно оттуда вынести, которые не связаны, у которых loose coupling, так называемый, и ты потихоньку их выносишь, и когда ты уже вынес две коробки там, не знаю, стояли на полу с книгами, ты уже можешь зайти в этот чулан и посмотреть с другой стороны, а за что там цепляются как бы те самые, те самые лыжи. можешь тестировать вот так вот потихонечку, вынося компоненты по DDD, как бы смотря, рассматривая и рисуя диаграмму, что от чего зависит, склеивая какие-то компоненты вместе. Вот, это про аналогии. А про сам DDD, слушай, очень здорово, мне очень понравилось, что ты сделал именно такой доклад на работе, который типа, смотрите, мы тут все коллеги, давайте вместе, давайте вместе просто... попытаемся разобраться с этим тикетом потому что это полезно и для тех кто создает этот тикет они вид как разработчик читает этот тикет просто любой и что как он понимает что что нужно сделать куда нужно пойти потому что само описание тикета это тоже часть, часть проблемы иногда в тикете просто, ну, если он хорошо написан, так он и занимает полчаса, а если он плохо написан, он занимает три часа и очень хорошо даже вместе устраивает такие какие-то воркшопы, чтобы люди видели, как разработчик садится, там отодвигается, включает компьютер, ставит кофе, сколько времени занимает вот понять, что, что вообще происходит в такой системе. То есть, конечно, вот если вы слушатели, если кто-то из слушателей хочет провести какой-то доклад, вот хорошая собрать в одну комнату людей, которые заинтересованы в этом, показать, как вы действительно работаете, потому что вы увидите столько проблем, вы увидите и люди увидят, как насколько вам что легко делать, а что тяжело делать. Это очень хороший пример. Спасибо тебе за него. Еще, Саша, хотел тебя спросить про билдеры. Ты же изначально, когда пришел вот в подкаст или в личку начал писать, ты писал в комментариях к выпуску про DSL. Вот мы в прошлом выпуске обсуждали DSL, Kotlin и всякие там объекты, и ты говорил, что у тебя есть мнение про билдеры. Это еще не популярное мнение, не популярное мнение, еще прибереги. Но вообще, вот как ты относишься к билдерам, и то есть надо ли геерить, тоже как по спецификации, надо ли там аннотации, аннотации ставить, либо в этом плане, что ты как Java разработчик должен как бы сесть спокойно, у меня есть Person и сейчас моя обязанность как разработчика аккуратненько написать Person Builder, потому что за это мне и платят деньги, чтобы Person Builder был аккуратный написанный, написанный человеком, чтобы там не знаю, Name, чтобы не генерировать тебе там не знаю там, протестировано объект протестирован как ты подходишь к разработке своих персональных проектах вот интересно используешь ли ты генерилки любил дыры и на работе как ты вот пишешь билда расскажи пожалуйста про это Да, вопрос хороший. Билдеры мне нравятся. Я как только познакомился с этой концепцией, сразу начал над ней размышлять. То есть это, наверное, один из таких паттернов, которые на слуху, которые реально полезны и очень часто могут пригодиться. Потому что их неумелое использование, скажем так, или оно максимум что может навредить, так это на какие-то ненужные сущности напишут разработчики зеленые билдеров и будут радоваться. не такая проблема, как если всегда будут использовать фабрики, абстрактные фабрики, всякие там бриджи, вот это вот все, не понимая вообще, оно здесь нужно или нет. Вот это вот паттерн один из таких, которые я бы всем советовал junior разработчикам овладеть им и там, где нужно использовать. Дальше про то, использую ли я где-то их у себя в проекте или на работе. Ответ короткий, да, всегда использую, но стоит отметить, что на работе, например, я вот пишу такой код, который... Ну вот у меня нет такой задачи много писать кода. Вот это такая специфика у меня работы. У меня есть задача много дизайнить коды и думать о том, как он будет работать, потому что одна такая ошибка, И в этом плане для меня ценность написания кода, значимость boilerplate, кто-то может сказать, что это boilerplate, она очень мала, потому что вот я дизайню 95% времени код, опять я его реализовываю. И вот эти 5% будет ли там пол-пол-пол процента билдеров, что я потрачу времени, или не будет, или я там ламбок использую, он мне там оптимизирует 0,01 среди этих 5% и вообще все равно. Главное, как я задизанил код и как он работает. Вот, поэтому да, я пишу на работе билдеры для сущности, которые гоняются между сервисами, объектами, которые мы в тестах создаем, на которые мы в тестах пишем ассерты, то есть наши вот эти вот штучки, которые как раз бегают между сервисами. Обязательно я на них пишу, потому что когда вот эти маленькие, вроде бы незначительные вещи продуманы и сделаны с душой, с любовью, то можно, ты их используешь, у тебя вот в кайф, например, тест даже написать и создать какого-то персона с какими-то такими интересными полями там, что у него адрес с несуществующим пост-кодом, и в это время у него еще отрицательный дом, там, то есть какой-то такой кейс, и те, кто его создать, вот я три аспекта в адресе указал, я три строчки напишу, и больше ничего не будут писать, потому что сам код задизайнен так, что не нужно создавать вот этот вот адрес и вызывать у него конструкторы с 15 параметров, первые три будут налы, потом пустые строки нули, потом та самая наша вот адрес строка, типа, ну то есть это невозможно, на это не хочется с этим работать, естественно, путается и читать это сложно. Поэтому вот это такое внимание к мелочам, я бы сказал, которые я в целом люблю. Я люблю внимание к мелочам, и в коде оно тоже проявляется. В домашних проектах все зависит от. Вот в последнем, который я реализовал, я использовал билдеры на ключевых объектах, которые очень часто я использую, в том числе это были юзеры и их какие-то данные, которые были прям частью бизнес-логики. какие-то инфраструктурные вещи, то, что я много в тестах не использую, вот так сформулирую. Я этот ламбок использовал, генерировал билдеры из ламбок или линей, потому что в целом тоже можно использовать. А вот то, что мне важно, я прям такой ламбок в сторону и руками кропотливо, тщательно, с любовью пишу и в целом вот так я к этому отношусь и везде использую. Такой короткий ответ. Или нет? Не, достаточно короткий ответ. Я... Ну, мне опять же нравится этот подход, билдеры. И даже не знаю, меня вот единственное может быть в нем смущает то, что на ревью вот такой подход, когда вот ты уже считаешь, что тут, наверное, не нужен билдер, а потом на ревью тебе говорят, может быть, билдер добавим. И ты такой, а может добавим. А может и получается что как-то непонятно, когда нету четкого определения Вот здесь мы делаем так, а вот здесь мы не делаем не так Это остается на отку программисту и у всех разное понятие того, что считается безопасным кодингом на джайве То есть получается что как будто для этой структуры данных нету какого-то точного стайл гайда вот так вот плохо, а вот так вот хорошо, и мы теперь делаем хорошо. Поэтому каждый раз получается такой вопрос, что а вот как вы относитесь к этой к билдерам? А вот мы пользуемся, а вот мы не пользуемся. А вот мы пользуемся тогда, а он пользуется никогда. И получается очень много такого какого-то шума вокруг такой полезной полезной концепции и такого перекладывания друг друга тикеток надо ли это писать, не надо ли это писать. Хотя, и линтерами как это отловить. То есть нету какого-то общего решения, чтобы встал Марк Рейнхольд и сказал, что да, билдеры нужны, все теперь пишем так, и все послушались. То есть такая концепция, которая... Давай я тебе поделюсь, как я эту проблему решаю. Да, давай. Проблему ты подсветил реально важную. Как я ее последнее время решаю? Во-первых, я немножко философски отношусь к коду, к работе, к своимодействию. как не написал билдер, я не буду ему никогда в ревью писать, а напиши, пожалуйста. Даже если это мой код изначально был, и там все билдеры написаны, я не буду ему говорить, напиши билдер, потому что я считаю, что главное, чтобы код был работал, и на него было достаточно количество тестов написано. Потом у меня будет настроение, при наличии этих тестов я этот билдер допишу сам. Мне вот оно ничего не стоит. Вот по кайфу просто написал, 10 пальцев печать, 50 слов в минуту, у меня эти билдеры. Я никогда не скажу. Но хочется же, чтобы люди писали. Реально. Какое решение? Например, можно жесткий гайдлайн вести, стайл-гайд, написать в конфлюенсе, жирным. Мы пишем билдер. И потом на каждом ревью, как дурачок, ссылку на этот конфлюенс отправлять и делать еще один круг, еще один прогон ся, еще усложнять и без того сложную работу. Без на то необходимых причин, как мне кажется. Я этот... Это не про меня. Я так... На своем проекте я бы никогда так не делал. Росткие стайл-гайды. Это... Вот я как сказал, философски отношусь к коду. Главное, чтобы он работал и был протестирован. А как человек пишет, это его подчерк. Не нужно брать руку человека и за него вводить ручкой. Ну, ты возьми, тогда сам лучше напиши. Главное, чтобы, ну, адекватно все было. И вообще, когда есть такое большое количество стайл-гайдов, мое личное мнение, начинается смещаться фокус от деталей, таких как билдер, там, налобл, нотнал, аннотация, вот это вот вся мишура, и мы начинаем не замечать, а вообще код, он как бы следует каким-то open-closed принципам, он компонуемым, выражена ли в нем логика, легко ли его понять, то есть вот эти вещи, они куда-то начинают уходить, и мы все, что мы делаем, это вот эти style guide начинаем соблюдать. Поэтому я больше вот смотрю на то, что понятно ли выражена мысль, то есть вот человек написал поэму своим почергам, я ее могу прочитать, могу, мне нравится что-то содержание, нравится, все, принимаем. Вот, но как, опять же, возвращаясь, хочется же, да, мы же пишем билдер, хочется, чтобы остальные писали. Я вот придерживаюсь такой идеи, как софт пауэр, что ли, или как она, когда ты на примере показываешь, что это прикольно, это удобно, и люди начинают следовать этому просто сами, по своей воле. Ты засылаешь на ревью какой-то класс, который аккуратненько написан, и тесты на нем, и ты видишь использование этого билдера, ты видишь, как это удобно, и так или какие-то упоротые там, ну, начинают замечать такие вещи, они начинают их сами писать. Просто сами. И если это действительно полезная, хорошая, удобная практика, то большинство людей начнет так или иначе эти штуки писать, и у нас команда их пишет, я ни одному ни разу в жизни не сказал на ревью «напиши builder», они их пишут сами, потому что видят, что это удобно просто. Вот и всё. Точно так же про какие-то другие там нормальные комментарии коду. Я, например, вот странности пишу в тестах, я пишу slash Потом даю какой-то сетап, типа подхадавливаю входные данные, environment, после этого пишу slash-slash-pen, делаю action, типа вызываю там endpoint у сервиса, и потом zen, slash-slash-3 блок, и в нем уже делаю ассерты. То есть у меня все тесты, вот все буквально, они разделены на такие вот три блока. И в целом, никого, естественно, на ревью я не буду просить так писать, но это дебилизм, если я так попрошу. Но люди потом, когда пишут, дополняют тесты, они тоже так пишут, потому что просто это логично, удобно, это воспринимать тест легче. Вот как-то так. да, отличная идея и мне тоже кажется что не стоит все-таки программирование не стоит нагружать линтерами ну иначе вы не дождетесь плуреквеста, ваш код просто в следующий раз не отправят вам не поправят ни одну, не попробуют улучшить код если в какой-то момент вы будете добавлять код на стонет слишком, слишком сложно я хотел переходить к третьему блоку, третий блок у нас про софт-скилы как к этому подвести, спрашивать вопрос у человека, который если подкаст нужны ли, софт-скилы программисту как-то неловко, потому что подкаст, мне кажется, это и есть ответ на этот вопрос. Но может быть у тебя есть какие-то истории, какая-то история, которая показывает, когда ты вообще в первый раз, ну не то что в первый раз понял, а когда ты увидел, насколько софт-скилы важны, или насколько они тебя, поразили как кто-то решает софт скиллами проблему, которую ты не можешь решить там, не знаю, программированием. Вот есть у тебя какой-то яркий момент в жизни, когда тебя поразили софт скиллы кого-то, либо ты увидел, что да, вот это вот конечно нужно развивать. Давай для начала уточним, а что такое софт скиллы, вот что ты под ними понимаешь. я под софтский хороший вопрос я под софтский лайм понимаю все что не хард скиллы то есть все что все что все что программисты делает вне написания кода софт скиллы это написание текста софт скиллы это все что мы говорим голосом это митинги переговоры выступление софт скиллы это то даже как-то не знаю там зовешь кулеру попить попить чай все что не работа это софт скиллы все что все относятся к hard-skill, то есть у нас есть hardware, у нас есть software, то есть я про это как-то делаю вот такое разделение в том плане, что то, что человек может решить не кодом, а проблема, которую он может порешать голосом, тикетами, текстом выступлениями, не знаю, еще чем, какими-то дополнительными дополнительными штуками, не своим конкретно Hardware-скелами, вот, такими программистскими. Вот, у тебя какое представление о соц. скиллах? Что ты понимаешь про соц. скиллах? Да, до сегодняшнего, ну, до вчерашнего дня, пока я не прочитал пост Вастрика про соц. скиллы, последний, по-моему, заметка, я мыслил вот один-в-один, как ты говоришь. Все, что не hard, это софт. Но он там делает такое небольшое уточнение, что что, во-первых, формулировка звучит так. Софт-скилы — это те скилы, которые не являются хард-скилами — программированием, знанием библиотек и так далее, всё, что вы понимаете под хард. Всё, что ими не является, но в то же время двигает вашу работу вперёд, помогает вам достичь результата в работе. И в этом плане, почему я так и делаю акцент, например, то, как вкусно я готовлю кофе, оно не является софт-скилом. И то, как я часто его предлагаю своим коллегам, оно в какой-то мере... Я налаживаю отношения, но если мы это отпустим, то качество кофе, оно не софт-скил, хотя тоже скил. Это такое вот уточнение просто. Но в целом, твое определение мне подходит, откликается, я с ним согласен. Так вот, давай, наверное, уже к вопросу, к самому, к твоему. Ты спросил, что были ли такие моменты, когда меня какое-то озарение, когда-то я понял, что вот это оно нужно было. Прям есть конкретная хорошая история, но я немного хотел бы к ней подвести. откуда у этого озарения как бы почва пошла возможно это какая-то история тоже возникновения подкаста будет я вообще был лютым адептом подкастов они я считаю что они сделали из меня инженера и вообще того кто я сейчас есть потому что как-то я случайно на них набрел вот реально где-то статью на хабре там еще тогда хабр читал на первом курсе универа вот и какие-то подкасты что-то я начал и понял да ну естественно там все эти классики радио ти да в зен достаточно быстро нашел кучу-кучу-кучу всего штук. 15-20 в пике у меня было подкастов, которые я на еженедельной основе все слушал. Ты понимаешь, сколько времени я на это тратил, но, во-первых, я их слушал на x2, я вот обрел скилл, и сейчас я до сих пор на x2, и мне иногда медленно, чтобы ты понимал. То есть, я, потому что если я слушаю не на x2, то я начинаю в свои мысли уходить, и все, пока я уже не слушатель подкаста, я уже делаю свои дела, думаю о своем. А вот на x2 оно как-то в голову мне врезается лучше. Опыт, можно сказать. Затем сами вот эти вот разговоры, рефлексии и обсуждения каких-то штук, они меня дико вдохновляли, потому что, во-первых, ты начинаешь больше думать о том, что ты делаешь, ты начинаешь с людьми больше разговаривать, знакомиться, вот, например. И в целом разговоры об вот этих профессиональных штуках, которые, как бы, вроде бы ты должен знать. Ты в университете выучили, ты книжек Талмутов начитался, всё, ты профессионал. Какой подказ? Зачем об этом разговаривать? с детства с ними рос, и меня они очень сильно вдохновляли, и я думал, что вот одна из моих таких первых мечт в самореализации — это сделать свой подкаст. Ну, естественно, я думал, что это, во-первых, сложно, во-вторых, я кто я такой вообще, чтобы что-то говорить в подкасте, вообще я же не Бобук, блин, я просто Саша Пахомов, кто меня будет слушать вообще. Ну и так далее, куча вот этих штук, и они во мне долгое время сидели. Это вот такая предыстория к озарению. Дальше теперь переходим к самому озарению. Писала как-то свою любимую command line to loo, писала-писала, много ей уделял внимания и была такая штука как Ignite Summit, которая проводится раз в полгода. Не там ребята зовут разработчиков, просто рассказать про то, что они делают в базе данных пользователям этой базы данных. Ну и меня как автора собственно позвали, сказали Саше сделай пожалуйста нам Keynote, сделай нам презентацию, в общем расскажи. И тут я столкнулся с тем, что надо сделать, как бы видосики монтировать тоже не сильно умел и микрофона у меня не был я такой так давно хотел микрофон мечтал о подкасте возьму нормальный микрофон пускай будет потом как-нибудь подкаст запишу купил себе вот этот Road Podcaster и принялся там к составлению каких-то сценариев, лайв-кодингов. В общем, это был самый большой мой трудовой рабочий день за всю мою историю. До этого у меня был трудовой день в 17 часов, когда я работал на автомойке в Липецке. Вот. А этот был рекорд 24 часа, я присидел перед компьютером, не отходя. потому что я старался сделать видос. И после того, как я его сделал, как я посмотрел, как я в нём выгляжу, как я его веду, как я себя чувствую, вообще весь этот процесс, пережив, я понял, что мне очень многого не хватает в как раз тех самых софт-скилах. Мне не хватает умения говорить, просто банально. Вот говорить, чтобы меня можно было слушать. Я себя слушал на видосе, я такой, да и господи, ну что это вообще такое? То есть, мне дико, кринж просто максимально испытывал, но это как бы нужно было сделать. было выбора откосить. Поэтому все-таки этот кринж пришлось произвести. Дальше, например, там то, как я, в принципе, доношу мысль, то есть да, говорить это одном языком как бы, молодь, но вот структуризация мысли, вообще способность из своей головы вот эту картинку перенести в голову другим людям, это тоже софт-скил, который я тоже понял, что им нужно овладеть, потому что доходчиво объяснить то, что ты хочешь объяснить, это вообще-то сложно. И вот после этого саммита, после этого выступления, я посмотрел на видос, я понял, что мне нужно многому учиться, и я начал расписывать план как проактивный человек, рефлексирующий, я подумал, что я могу сейчас сделать, чтобы исправить вот эти 24 часа кринжа, которые со мной случились, чтобы в следующий раз мне доставило удовольствие, а не боль. И я вспомнил, да, вот эти вот внутренние желания сделать подкаст, они как-то, знаешь, вот этот, я вот этот кринж испытал, и он меня больше не сдерживал. Я такой, ну всё, теперь я буду подкаст сделать, как бы, чё, чё бояться-то? И погнал, то есть я прочитал книжку, что-то из взрывной подкасты, я сделал себе идеи, я нашёл дизайнера, вступил в сообщество, мне нарисовали обложку, я нашёл звукомонтажёра, я всё подготовился, записал там пару-тройку выпусков, мне в целом понравилось, я даже думал, что будет сильно хуже. Но когда ты добавляешь какие-то… Вот когда не один это делаешь, а когда люди тебе помогают, кто умеет, сильно лучше выходит. Вот. И после этого я начал с той мотивацией, что я просто хочу научиться доносить мысли и хочу научиться говорить. Я начал делать подкаст. Теперь, какие изменения я заметил, вот, реально ли это работает условно. Ну, в целом, это можно оценить, но ты, например, со мной не разговаривал до подкаста, когда у меня не было подкаста, то есть сейчас бы эта беседа, она выглядела немножко бы напряженней и немножко бы сложнее, если бы у меня не было подкаста. Сейчас намного проще говорить. Это первый такой очевидный, яркий плюс. И как он в работе мне помогает? Это просто, то есть пока ты не поймешь и не сможешь видеть результаты вот этого, над собой, ты не сможешь представить и оценить ту пользу, которая тебе приносит вот эта активность. Когда я сейчас на митингах, на стендапах, на обычных вот, начинаю объяснять, что я делал. Самое банальное, вот каждый день, ну ладно, кто-то там, не каждый день, но вот у меня были мы время, когда я каждый день с утра мы вставали и у нас был стенд-ап, и мы просто обсуждали стандартные митинги, короче. И вот когда я начинал просто так, у меня была вот то, такая-то проблема, я ее описываю, то есть я понимаю, что человеку нужно понять, что я делал. Мне не нужно отчитаться и произнести какие-то тикеты, жиры и номера и статусы, а мне нужно людям дать представление о том, что я делал. сразу же storytelling какой-то начинает сетку. Ну вот у меня там была такая проблема, я с ней столкнулся, когда решал вот это. Исходя из этого, я погуглил вот это, посмотрел там и, в общем, обнаружил, что вот эта часть функциональности, она работает не так, как мы себе представляли. Ну и, в общем, начинаю просто говорить, и люди понимают, и намного меньше возникает вопросов, о чем там Саша целыми днями занимается, вообще он там код пишет или нет. И людям лучше, комфортнее воспринимать меня, и мне спокойнее, я понимаю, что я могу донести свою мысль, в том числе на плюс преимущества, это естественно какие-то выступления. В последнее время у меня есть достаточно большое количество внутренних выступлений, то есть когда мы подготавливаем какой-то дизайн, какого-то решения, нужно его расписать, нужно его представить, обосновать, что у этого решения есть вот такие-такие-такие pros and cons, то есть плюсы, минусы и так далее. Ты это все расписываешь, во-первых, в тексте, но про текст пока мы не говорим, ты просто делаешь какой-то Документы, возможно это будет презентация, возможно нет, и потом на созвоне, который вот может длиться час, например, ты весь этот час рассказываешь, объясняешь доходчивы людям. И после этого, вот реально я начал получать, мне в личку люди пишут, приходят, говорят, просто офигеть, как бы, настолько бодро, живо, и мне понравилось вообще, что ты рассказывал, что просто респект тебе. решения технические, которые как бы ну чё, мы ж код пишем, ну зачем это всё. Но вот затем, что до кода есть много работы, которую тоже надо производить, в том числе обсуждать документацию, решение и так далее. Это вот про голос, про подкаст. Есть ли у тебя что-то ещё спросить, а то я хотел немного к тексту перейти, но боюсь, я уже и так слишком много говорю. не отлично, мы же подкасты, в котором если в подкасте мы говорим про подкасты, значит, значит все хорошо, мне кажется, что должно быть правило, что в подкастах о подкасте должно быть безлимитное количество времени. Ну, у меня, наверное, вот... Ну, то есть для меня тоже как-то это было таким откровением, насколько можно... То есть когда ты стараешься и читаешь, и прокачиваешь, вот говорят вот там во всяких интернетах, не читаете интернетах, потом говорят, вот когда ты качаешь вот эти hard-скилы, насколько твои прокачанные hard-скилы дают тебе на самом деле не так много... Ну, то есть ты их очень тяжело прокачиваешь, очень тяжело изучаешь новую какую-то технологию, как бы ты очень тяжело заметить свой рост, насколько ты вырос, потратив столько много сил, потратив много сил, гораздо меньше сил на софт-скелы, ты получаешь просто такой дивный новый мир, ты начинаешь писать лучше текст, твои заголовки в тикетах начинают быть интересными, либо блокбастер, твои видосы и твои как бы как ты выглядишь перед камерой тебе приятнее находиться, то есть прокачав немножко софт-скилов я бы так сказал ты получаешь очень большое гораздо больше выгоды, то есть на 20 процентов увеличивая софт-скилы ты получаешь 80 процентов выгоды как бы не знаю просто в общении на работе написание текста окачая хард-скилы на 80 процентов больше стараясь стать программистом сильный, сильный, сильный программист, который решает сложные проблемы, ты получаешь удовлетворение где-то гораздо меньше, чем сколько ты... как бы тратишь усилий. Наверное, такая формула, она будет работать не всегда, зависит от того, насколько у тебя низкие были hard-скилы или soft-скилы в начале. Возможно, у других людей, конечно, все по-разному, но вот лично мой опыт конкретно такой, и я вообще в восторге от того, что как много проблем в мире решается со soft-скилами, и когда ты видишь людей, которые владеют словом, владеют языком, владеют письмом, насколько они не владеют hard-скилами, решается просто вот хорошими софт скиллами таким вот софт софт веер не нам не нужно не решать проблемы в железе решите проблемы в софт софт скиллах протекст начал уже говорить расскажи пожалуйста то есть я так понимаю идея такая чтобы чтобы начать презентовать чтобы начать говорить тебе нужно сначала придумать что говорить чтобы придумать что говорить нужно набросать какой-то конспект сценарий с те же самые слайды как ты пришел вообще к тексту и начал ли ты кстати вести свой блог я вот не видел либо как-то как ты ведешь заметки расскажи пожалуйста вот про про софт-килы в плане в плане текста в плане текста слушай ну по поводу блога вообще я когда пытался наладить свою публичную деятельность мой первая попытка это как раз был блог я типа сделал статический на хьюго сгенерил сайт и такой, ну вот будут там блоги писать. Написал первый блог как раз про билдеры, понял, что это слишком долго времени занимает, это слишком отдача какая-то слабая, и я решил, что вот классический блог — это не про меня. Но после этого я решил стартануть, начать делать телеграм-канал, и это вот как раз то, что мне дает какую-то еженедельную подпитку каких-то обсуждать можно, но тоже это специальный выпуск надо делать, а тут что-то посетила какая-то мысль, и ты ее взял и записал. Причем это же обладает, даже не при чем, а в первую очередь это обладает терапевтическим эффектом. Когда ты свои мысли выражаешь в бумагу, ты как будто бы начинаешь с собой как с психологом разговаривать. То есть у тебя какая-то болит вот техническая тема, вот ну часто на работе какая-то вот на ревью что-то тебе сказали, такое едкое, ты такой вот сидишь и думаешь, ну вот ты же не скажешь, пойдешь человек, а потом, пришл, напишешь вот это техническое решение, я считаю, что оно не такое, потому что... И начинаешь как бы сам с собой это дискутировать. Написал, тебя отпустило, ты запостил, еще там тебе поставили лайков, кто-то в комментах пришел, ну как бы отпустил ситуацию. Это такой вот эффект телеграм-канала, который я веду уже, наверное, года три. Он достаточно маленький, но он и не рассчитан на то, чтобы в нем было много людей. Он больше вот такая психотерапевтическая штука для меня личная, и она мне доставляет огромное количество удовольствия. И идет, возможно, какое-то структурирование, написание адекватных текстов в тех же самых тикетоджирах, как ты упомянул, или в Google Docs, которые мы тоже пишем на работе, чтобы как-то все описать. потому что это просто абсолютно такая же мышца, как и любая другая. Мозг и рукавы. В целом, если тренировать долго руку, то она начнет поднимать тяжелые тяжести. Если мозг долго будет писать тексты, и ты их пишешь, анализируешь и пытаешься это улучшить, то они станут лучшие, и они по-любому начнешь лучше писать. И это умение лучше писать, оно отразится везде. В том числе в джеретики, прикольно, что ты, кстати, отметил, описанный, описанный Джиро тикет, вот когда на refinement ты, например, сидишь, оцениваешь тикеты, и вот представляешь, для человека, который ничего не понимает, тут он видит большой такой тикет, там, мотивейшн, там, что-то, description, там, как это должно закончиться, как результат он выглядит, какое-то, может быть, решение предложил, ты думаешь, ну, все, это 100 500 story points и работа на полгода. Ну, таки, один story point, пошли дальше. Тут такой тикет коротенький, там бага, короче, тест флакает, и все-таки, ууу, ну, это story points 13, не меньше. И человек с наручной в смысле, там одна строчка, там двести одна строчка, как вы так оцениваете? Так вот так и оцениваем, потому что когда тебе на вход понятная структурированная информация приходит и все ее понимают, не нужно больше тратить то время, которое мы закладываем в тикет, вот на этот investigation условно, чтобы понять, что не так и решить. Когда тикет описывает, что не так, ты уже понял, и ты такой, а, да я знаю, даже знаю, что нужно написать. Поэтому это очень важно, и вот написание нам конечно на английском не native speaker тяжело, но вот как я уже отмечал в этом помогает как раз chat gpt вот это как раз та его сильная сторона которая может помочь действительно то есть на вход я даю свой кривой не нативный английский а на выходе получаю просто супер вообще native и причем он читается легче то есть это не просто я такой ой как я круто написал вот буду там такие обороты нет я вот вижу два текста я уже такой более менее начитанный я вот свой читаю постоянно запинается глаз, то есть я спотыкаюсь, я такой «ммм, мысль не льется вот по строкам», а чат-гпт мне сгенерил, я просто вот так вот читаю сверху вниз и всё, я как бы понимаю, то есть в этом плане он сильно помогает и я его использую, честно признаюсь, в тикетах, которые я на паблик пишу, я прям засылаю их в чат-гпт, почти что 100% копирую, убрав какой-то bollerplate, который он там пишет, let's prioritize this ticket, то есть я ему даю как бы промд, говорю «ты короче технический писатель, тебе нужно тикеты в джире писать для технического продукта, вот пожалуйста». Он всякий бред нам в начале в конце пишет, я это отрезаю и вот суть оставляю. Ну и без него там на русском, когда я писал тикеты, тоже скилл написания помогает. А что касается документов Google Docs, т.е. тикеты это все-таки более такая короткая выжимка, она там плюс-минус можно ей задать структуру. А вот когда ты пишешь какую-то research, например, вот я недавно делал research про role-based access control вообще, механизмы в базах данных. И мне самому это, во-первых, огромное количество информации, там от Ниста. Это существующие модели, все это нужно проанализировать, сложить, понять, и как это делать. В голову это не умещается. Естественно, я все пишу вниз, в текст, и как бы весь мой мыслительный процесс, он выстраивается в Google Doc. После этого вот тоже было прикольно, что я от этой задачи оторвался, от такой достаточно сложной ресерческой, я бы даже ее по сложности сравнился с дипломом написания в магистрской. Вот ты как бы, я его как бы написал на 80 процентов, потом оторвался, на работе и потом вернулся и такой блин а чё я там вообще ресёрчил и у меня есть текст у меня есть дамп моих мозгов на бумаге я беру этот дэмп дамп просто подымаю и дальше с полпинка начинаю дальше продолжать как будто я не останавливался то есть это огромный помощник в таких долгих мыслительных штуках ресёрческих и дальше этот материал служит основой для какого-то дизайн документа я могу ссылки на него положить какие-то отрывки вставить то есть это помогает структурировать непосредственно вот в ресерче и в дизайне это артефакт. Это не код, это не комит, это не пуш, это именно гугл док. И вот чтобы этот артефакт был крутым, понятным и... он доносил ту мысль, какую ты хочешь, чтобы он доносил, естественно, писательский скилл здесь играет ключевую роль. Тут как бы синергия, понимаешь? И технически должны быть сильно развитые скилы, и писательские сильно развитые. Вот когда они вместе, получается просто бомба. А когда один из них хромает, все равно какой? Получается какая-то либо маркетинговый буллщит, вот ты, например, загугли софт-скиллсы в интернете, что там про них пишут? Да какую-то фигню, потому что люди пишут про софт-скиллсы, не обладая нормальными софт-скиллами, их тоже вкладываю, например, больше даже вкладываю, чем умение говорить и представлять, а именно умение доносить информацию. Ну и также, если ты технически не шаришь, что ты делаешь, то как бы ты красиво это не описывал, никто тебе не поверит. Вот такие мысли. Хотел еще поговорить про... У тебя есть паблик, у тебя есть аудио-подкаст, дальше что? Есть текст, есть аудио, но не хватает одного же компонента видео. Есть ли у тебя планы как-то развиваться в видео и если есть тебе сейчас что-то сказать, может быть, если нет своих каких-то проектов, если можешь порекламировать, чтобы посмотреть такого, что тебе нравится, даже из подкастов, из видео-контента, то тоже было бы интересно, если нет, то ничего страшного, что-то мы не советовали какого-то какого-то современного видео видео аудио контента вот что ты слушаешь и чем ты чем ты вдохновляешься какие твои любимые подкасты проекты и не знаю авторы расскажи пожалуйста да да без проблем я вот сейчас пытаюсь вспомнить автора канала, в общем как-то он называется, о, нашел, называется он NetworkChunk на английском, это ютубер англоговорящий, у него 3 миллиона подписчиков, у него видосы набирают огромное количество просмотров и видосы на тематику, например как сделать фишинговую ссылку, например, которую ты отправишь своей жене, она перейдет, а ты в браузере у себя будешь видеть все логи, все куки, вообще все что у нее есть на компе, и он видосы рассказывает то есть это такой популизация понимание того как работают вещи и среди обычной аудитории чтобы она понимала что и такое есть и вот это вот реально и для нас как для технических людей ну посмотрите как он там на линут поднял но до как он там установил себе эту штуку как он ну то есть тоже какие возможности технической точке за ним тоже интересно ну и сами видосы сделаны круто это как раз тот пример который меня возможно даже вдохновляет на то что чтобы двигаться в В остальном тоже есть прикольные всякие ютубы, но мне в русскоязычном IT-сегменте ютуб какой-то максимально унылый. Я вот не знаю, может быть я не видел каких-то нормальных видосов, но вот условно, где там топлес из мира IT, вот у нас есть такой. нет, потому что, ну, чтобы было и интересно, и не скучно, и не скатывалось в обсуждение джун-не-джун, zp, 100k, 300k, как бы, встанутся, ну, то есть, ну, просто, ну, сколько можно уже об этом говорить, и как бы, какая практическая эта ценность от этого, ну, непонятно. Ну, это ладно, я уже какие-то кислоты начинаю обрежать, и в целом хочется, знаешь, сделать вот реально хороший продукт, хороший, интересный канал, интересный видос, чтобы людям было интересно смотреть, и они не тратили время своё зря. Я считаю, что большинство ютуберов тратит время людей зря. Это, вообще говоря, очень смелое заявление, как бы, сделать часовой видос, чтобы люди его посмотрели, как бы, и ничего из этого не получили. Ты представляешь, у скольких людей ты по часу жизни отнял. Ну, такое прям надо иметь какой-то наглостью, чтобы такие вещи делать. Так что да, в ютуб хочется двигаться, хочется что-то сделать, вот как я уже упомянул, типа топлеса или там утопия шоу, вот эти такие популярные, около научпоп. какие-то ютубы, очень качественно сделанные, с достаточно глубокой проработкой темы, но из мира IT. То есть вот условно там берешь, например, Docker и давай про него рассказывать. Не просто это command line, вот мы можем установить, registry какой-то глупый очередной туториал, а рассказать про нее с другой стороны. Зачем эта технология появилась, а какие у нее альтернативы, а вообще как бы можно ли без нее, на чем она написана, какие там есть приколюшки. То есть сделать какой-то попсу из технологии, но с с нормальной проработкой этого всего. Но я понимаю, что это очень тяжело делать. Как бы подкаст вообще это полная чушь по сравнению с видосами. Просто ты записался, как бы смонтировал, и оно есть. А вот чтобы видос, ну это нужно очень сильно запариться. Но я двигаюсь в этом направлении, я уже изучил нормально монтажные программы, я нормально понял, как работает свет, я купил себе камеру, я заказал себе свет, сегодня пойду забирать. И в целом уже есть понимание, как это может быть выглядеть. И да, в будущем, наверное, кому интересно, я в подкасте расскажу про свои ютуберские приколюхи и обязательно поделюсь ссылкой на канал. Супер, супер, отлично. Интересный вот лично мне вопрос, недослушатели, чего тебе не хватает в мире Java подкастов и технологических подкастов? Во-первых, мы сейчас в Java Swag, в подкасте Out Java. Вот что тебе не хватает, давай вот прям конкретно, конкретно в подкасте Java Swag, чего бы ты хотел бы еще послушать и что бы тебя могло заинтересовать? В том плане, что мы, ну, я приближаюсь к 55, 55, 55, выпуском вот и интересно насколько это может дальше дальше продолжаться насколько насколько еще мы можем собрать гостей насколько можем еще затронуть интересных те тем вот чего бы тебе интересно было бы послушать ну вот конкретно в нашем подкасте либо какого контента амиры в мире java тебе не хватает а может быть наоборот какой-то тебя уже как бы задолбал может поделиться своими не ну конкретно про java свэк Наверное, это одно из немногих, может быть даже единственный подкаст интервью, который я слушаю. И слушаю с самого начала, наверное, с первого выпуска, я думаю. Ну, как я говорил, я с первого курса университета все подкасты пособирал, по всем хаббарам и гитхаббам все себе в плеер засунул и все это слушал. И в целом тот факт, что я его слушаю, это уже огромный респект и как бы значит, что в нем можно ничего не менять, он нормальный. формат интервью в целом штука наверное достаточно опасная как мне кажется потому что все очень сильно упирается в гости и я честно говоря иногда даже не представляю как сложно вывозить ситуации когда гость ну вот прям дубовый вот он ничего особо как-то отвечает я не знаю были у тебя кстати такие случаи нет я повезло что таких не было вот так вот так я отвечу как ведущий того подкаста Значит, джав разработчики молодцы, они не дубовые. Или по крайней мере те, которые к тебе приходят, чтобы эта выборка все-таки не совсем репрезентативная. Но иногда, знаешь, смотришь какие-то интервью, штуки, и прям видишь, ну прям уныло. У тебя интервью вроде бы получается хорошо, поэтому я бы от этого формата не уходил. Единственное, что я бы поменял, это конечно джингл. Вот. Ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха И, наверное, да, вот качество гостей сильно решает, потому что я вот, знаешь, некоторым я прям верю и очень рад, вот там, например, Ване Углянской у тебя, по-моему, был как-то. Я прям вообще, мне очень нравится, то есть человек открытый, искренний, и его приятно просто слушать, приятно разговаривать, и подкаст получается супер. Ване привет. Ване, если ты нас слышишь, привет, ставь лайки, если ты нас слышал. Вот. Ну, в целом, да, мне кажется, вот, знаешь, вот что поменять Дудю? пока что еще вроде бы смотрят и интересно, все зависит от гостей, а в целом, ты такой Джава Дудь, оставайся таким наверное, но это лично мое мнение, не претендую ни на что. Хорошо, спасибо за комплимент, конечно, до дюдя очень-очень далеко. Так, но у нас есть рубрика, и она не было, не было 30 выпусков или 40 выпусков, но она появилась, и вот эта рубрика честно, честно... позаимствованная из другого моего любимого подкаста на английском языке, она называется «Непопулярное мнение». Но прежде чем я спрошу у тебя твое непопулярное мнение, давайте зачитаю непопулярное мнение предыдущего Гости. И вот мне опять же, каждый раз, когда я читаю непопулярное мнение Гости, оно вырвано из контекста, я его перефразирую, и, наверное, Гость может сказать «Да не это я имел в виду», но цель этого, цель этой рубрики как раз в том, чтобы… Именно такая. Да, именно такая. То есть мнение было такое, то есть такие JVM языки как Kotlin в дальнейшем вытеснят оригинальную джаву. Вот. К тебе вопрос. Не популярное ли это мнение, либо это мнение популярное? Я бы, наверное, сказал, что это мнение популярное как раз. Потому что... Сложно мне говорить на такие темы, потому что я боюсь кого-то обидеть, вот реально, но я думаю, что это мнение популярное, но я его не считаю правильным, потому что как бы вот и ты прямо замечаешь, как я пытаюсь подбирать слова. Но, грубо говоря, я не считаю, что Котлин вообще кого-то победит, и все, что он победил, это Android, и за это ему большой респект, и ребят из IntelliJ огромные молодцы, из JetBrains в частности. Но Java он не победит, а если бы мог ее победить, то бы давно это уже сделал. Это если коротко, а если немножко подраскрыть, то я вообще не понимаю, откуда идея синтоксического сахара языков программирования. С какой, кстати, синтактический сахар вообще является преимуществом? Я вот искренне не понимаю, вот искренне. Я начинал свою карьеру скалы-разработчиком. Я писал на скале много и читал много скалы-кода. Там сахара очень много, там очень много элегантных вещей, там замечательные коллекции, там все очень хорошо, там типы намного сильнее, чем в Java. Но как-то вот не получилось. Ну, за скалой, конечно, не стояла такая, с таким хорошим брендом-разработчиком компании, как стоит за Котленом. Но мне все-таки кажется, что потихоньку Kotlin останется на своем месте, но естественно никакую Java он никуда не вытеснет, потому что скорее всего Java вытеснять может какой-нибудь Go, потому что это реально что-то... Зачем нам еще один GWM-язык? Вот я не сильно понимаю, когда выбираю языки, вот мне... Kotlin он компилируется в сто раз дольше, от него идеи начинают тупить, напиши-то на Java как бы и не парься. А если хочешь что-то действительно другое, вот тебе Go, вот тебе R. вот тебе Python. То есть инструментарий он сильно больше, чем Kotlin или Java, поэтому это, мне кажется, популярное мнение такое попсовое, но я с ним не согласен. Отлично. Мне очень интересно еще наблюдать за своим, со своими как бы сдвигами. Каждый раз, когда я слушаю гостю, его мнение по какому-то по какому-то топу я такой согласен. Конечно, конечно это так. Слушаю следующего гостя, который говорит, нет, я с этим не стал, конечно, конечно предыдущий гость не прав. То есть очень легко, очень легко убежит. когда говорю о всем. Да, вот идея про Гоми тоже понравится, то есть наверное если знать Джао и Котлин, зачем? Ну ладно, мы оставим это слушателям, мы оставим слушателям отвечать на эти вопросы, но А теперь твоя очередь. Какое непопулярное мнение есть у тебя, которое ты считаешь, что оно непопулярное? Да, я бы сказал, что у меня непопулярное мнение такое. Наследование в Java вообще не нужно использовать, и без наследования Java была бы намного лучше, и элегантней, и красивей. Я и говорю про наследование классов. Если раскрывать, да? Что? Почему? Давай раскроем. Ну, да, я еще раз подчеркну, что я говорю про наследование классов, то есть интерфейсы – это отлично. Дефолтные методы в интерфейсах – это уже непонятно, можно и без них, но вот как декларация какого-то внешнего поведения, интерфейса, контракта – это идеальный инструмент, и его использовать я бы стал и использую. А вот что касается наследования классов, каждый раз, когда я вижу в коде наследование классов, такого legacy кода, скажем так, почти всегда это является проблемой, нежели чем преимуществом этого кода. Заметь, как сложно вносить изменения в структуру наследования классов, если ты хочешь где-то что-то поменять, то всё, тебе нужно всё это дерево в голове представить. То есть идея понятная, этого ОУП, понятно, почему она возникла, как её использовали, но сейчас, в современном мире, когда ОУП уже немного такой вот классической отходит в сторону, первое, что из ОУП нужно выкинуть, это наследование классов, потому что оно делает... вот это вот сильное связывание, если перевести. То есть это самая максимальная, самая жесткая привязка друг друга объектов в программировании. которые существуют, это наследование классов. Вот если ты наследовался, ты внёс кучу ограничений в наследника и в родителя. Ты не можешь ещё одного, например, класса наследовать, мы можем только одного наследовать, всё, приехали. Если тебе нужно какое-то поведение подмешать, ты начинаешь вмешать это в родителя, в общего. А другим наследником это поведение не нужно, оно там появляется, и вот эта вот сильная связь, она как клубок, который ты уже не распутать его, если там есть наследование. все используют просто в конструктор себе inject какую-то часть поведения, которая конкретно им нужна и декларируют свое поведение через интерфейсы, то это вот намного проще и мне кажется, что безнаследование в jai было бы только лучше сейчас. Мощно! Мощно мы въехали в одну из... как бы не просто даже в Жаву, а как бы... все ООП! С ноги! Влетели, что не надо! Ведь наследование, это же правильно про ООП? Там три вот этих... Да, наследование, полиморфизм... Вот и все! Инкапсуляция! Ну что же, отлично, Саш, спасибо что пришел, спасибо что... Мне очень понравился наш разговор. Мы даже не затронули твою работу. А я знаю, что ты работаешь над Apache Ignite. Мы там, наверное, про Apache Ignite можно только разговаривать. Ну, целый выпуск про то, чего там, чего там и как. Потому что это инструмент с большой историей. Но так вот у нас получилось поговорить о практиках и таких о толзах. Немножко задеть все темы твоего подкаста. очень приятно, когда можно послушать сначала подкаст, а потом поговорить с человеком и задать все вопросы, которые накопились. Спасибо тебе, что пришел. Дима, спасибо тебе, что позвал. Мне было очень приятно, особенно учитывая тот факт, что я твой подкаст давно слушаю. Это просто очень приятно быть здесь. Спасибо. Ну что же, спасибо. С вами был подкаст Java Swag. Всем пока.