:
какие фичи языка можно использовать, какие фичи, например, перегрузку операторов мы сразу сказали нет. ДСЛ или нет. Это дорого, у этого очень высокий риск того, что мы можем навредить. Всем привет! В биреподкаст Java Swag. С вами я, ведущий Дима Волыхин. Сегодня у нас в гостях Андрей Корниенков, бэкенд-разработчик. Андрей, привет. Привет, Дима. Андрей работает над платформой кинопоиска и пишет на Kotlin и пишет на Kotlin бэкенды, насколько я знаю. Поэтому, надеюсь, что сегодня мы как раз поговорим про Kotlin и как писать на нем красиво и правильно, эффективно разные бэкенды. Конечно же, повезло очень с Андреем, потому что у о Kotlin, и вот в этом выпуске мы пытаемся как бы покрыть что-то из Kotlin, но с практической точки зрения. То есть, как бы сегодня интересует нас такой опыт, как именно используется Kotlin в обычной такой рутине. Вот, когда ты открываешь идею, и что ты пишешь, какие твои рутинные задачи, когда ты пишешь на Kotlin, и чем они отличаются на Java. Вот, ну и поговорим о всяких около программических штучках, процессах. процессах продуктовой разработки. Кстати, вот еще я хотел усно сказать, что у нас у подкаста скоро будет обновиться сайт, но пока он не обновился, подписывайтесь на Apple подкасты, Google подкасты, на Spotify и в общем да и ставьте там лайки, пишите свои комментарии, либо пишите комментарии просто в чат в чате или крае. Так, Андрей, до того как мы начали восхищаться либо ругать о Котлин, рассказать тебе очень интересно твоё прошлое, как ты пришёл к Котлину? Да, это довольно такая интересная история. Ну, как и многие, я с детства вовлекался программированием, ближе к студенчеству начал пробовать разные языки, разные направления в разработке. Начинал с фронт-энда, потом немного мобильной разработки, iOS, затем... Решил попробовать Android разработку, и в моей жизни случилась Java. Это была любовь, как мне казалось, на всю жизнь, но не совсем. Из Java Android разработки я как-то так постепенно, аккуратно перетек в Backend. Просто оказалось, что это ближе ко мне. И в Backend очень долго существовал в мире Java, и ничего не хотелось не видеть, не слышать. И когда я впервые столкнулся с Котлином, он вызвал у меня, как у некоторых разработчиков такое, максимальное отторжение, типа, зачем это нужно? что это такое и вот как раз на своей предыдущей работе столкнулся с кучей разработчиков, которые типа «ааа, Котлин, это так потрясающе!» и у меня все было такое, о чем вы говорите. И затем так вышло, что мне все-таки пришлось попробовать и мой мир начал постепенно меняться, параллельно с этим я попал в кинопоиск. Это тоже довольно интересная история, небольшое лирическое отступление. Я с детства очень люблю кино, пользовался кинопоиском еще с момента основания сайта, ну как энциклопедии, и у меня действительно лет в 14 была мечта в него попасть, и вот так вот сложились обстоятельства. Я прошел собеседование в Яндекс, удачно попал, и теперь... моя любовь к кино и разработка, и сверх этого наложилось желание продвигать Котлин, потому что я проникся этим языком в определенный момент. У меня два вопроса сразу возник. Во-первых, ты сказал, что ты очень любишь кино, можно ли узнать топ-3 твоих любимых фильма? А второй вопрос, это откуда в компании появляются вот эти вот тусовки разработчиков, которые такие «А, Котлин, Котлин!» То есть как ты говоришь, кластеран то есть сначала же сначала же в компании есть какой-то один первого проходит потом появляется его тут напарник а потом формируется такое целая целая масса людей кластер кластер разработчиков от которого потом просто ну никак не не замени не не избежать не избавиться ты заходишь там на кухне у них там прокотли ну то есть как как как вообще не начать не начать смотреть на котлин вот это второе Давай, да, закончим с лирическим отступлением про кино. Вот ты меня спросил, первое, что пришло в голову, с детства обожаю «Титаник». 6 лет его посмотрел, всё, и этот фильм навсегда запал мне в душу. Теперь менее популярный вариант «Трасса 60». И давай что-нибудь свежего за последние полтора-два года, всё везде и сразу. очень зацепил фильм классный. Да, если говорить про вот эти вот тусовки разработчиков, ну, я думаю, сложным будет поспорить, что мы разработчики люди, увлекающиеся. Нам на... решать задачи, нам нравится вот что-то вот погружаться, ковыряться и одновременно с этим, ну как, для многих людей важна новизна. И немалая часть... популярности той или иной технологии, того или иного языка, она базируется на том, что «о, что-то новенькое, и что-то решающее твои какие-то текущие проблемы, что-то, что вот, типа, о, а вот оказывается, можно было так». И это на самом деле, ну, можем это тебе чуть дальше сказать, то, как ты… это очень сильно влияет на то, как ты еще решаешь задачи. с разными технологиями, с разными языками, ну естественно ты решаешь по-разному и это увлекательно. Вот. я просто делал делал делал по метке вот про это высказание меняет то как ты решаешь задачи я думал что ты скажешь меня это как ты мыслишь в том плане что как ты как ты пишешь код как ты решаешь как ты решаешь задачу как ты какими структурами ты пользуешься как ты вообще подходишь подходишь к разработке это кажется что может быть да просто сменил язык ну какая разница на чем я буду писать типа на го там на на джави там на на росте ну как я программист как раз там везде есть функции там какие-то объекты разные разные реализации, но везде как бы код. Мне в конце концов надо написать код, в который, если мы будем говорить о платформе «Кинопоиск», он там на какой-то REST API, графку LLPI, он вернет список JSON, типа какой-то JSON. Ну, то есть примерно на всех языках код будет выглядеть по-разному. Какая вообще разница, каких... То есть как это будет реализовывать разработчик. Кажется, что ведь можно вообще даже нанять любых каких-то разработчиков на нескольких языках. Но ведь... Но это не так. то, как ты пишешь код, влияет сильно на то, как ты мыслишь, как ты что-то делаешь первым. То есть даже самая вот эти вот веб-флаксы и вот это все параллельная потоковая работка ведь это тоже позволяет думать о коде о каком-то конвейере. То есть это все реализация каких-то таких достаточно сложных концепций. И с этой точки зрения у Котлина гораздо красивее концепции. Ну то есть ты, если знаешь, как бы знаешь, как писать код на джаве, ты смотришь на код на Котлин, и он выглядит интересней, он выглядит любопытней. В него хочется сразу, не знаю, как-то хочется самому, ну то есть эти концепции достаточно красивые. Видно, что писал, разрабатывал язык какой-то опытный программист, который знает твою боль. И у меня вот такой вопрос, что Котлин может считаешь ли это правильно начинать например сразу с котлена в том плане что ну ты начинаешь писать не языке и тогда ну то есть и к тому что ты может быть ты сразу и не оценишь всех тех преимуществ которые который он дает может быть план вхождения в котлент через джаву это и есть правильный план сначала ты должен немножко пострадать как там ну я плохо пишу плохо знаю котлена как писать там сингл тон пострадать то есть ошибиться и потом уже увидеть что а в котленте пример это проблема просто решена на уровне языка не знаю по-моему решено, но это не точно. Да, насчет синглтонов ты прав, да, она решена. Ну давай немножко разделим. Про то как обучаться, как там входить, например, если ты планируешь стать бэкэнд разработчиком, Kotlin так или иначе привязан к GVM. И тут мне кажется, ну, может быть, альтернативное мнение, но мне кажется, что в любом случае, если ты разрабатываешь под GVM, пожалуйста, выучи хотя бы базовую джаву, познакомься с ней. Как минимум, все это так или иначе компилируется в единый байт-код. В идеале есть еще классно, если... разработчик потратит некоторое время и посмотрит, например, на декомпилированный ну, на байт-код на байт-код, допустим, Джавового и Котленовского класса в таких кишочках поковыряться это бывает на самом деле очень интересно. Но мне кажется, да, очень важно пройти некоторый путь, потому что когда ты придешь сразу, начнешь писать на Kotlin, вещи которые, типа, работают из коробки и работают, какие-то концепции, ты можешь не оценить всей прелести языка, но с другой стороны, когда ты пописал на Java, это оставляет некоторые след приведу другой пример на котлени это не так явно хотя тоже очень сильно проявляется но например получается пару дней назад да проходил хайлоут Я сейчас нахожусь в Белграде, у нас здесь проходил хайлоуд, и я общался с ГОР-разработчиком, и он рассказывал о том, как многие джависты, переходя на ГОР, продолжают писать гетеросетеры. Ну да. Соответственно, ты так или иначе многие парадигмы переносишь из одного языка в другой. Kotlin всё-таки в каких-то аспектах достаточно сильно отличается. И язык, который разрабатывался с учётом уже накопленного опыта годами по... Ну, накопленного опыта в объектно-ориентированном программировании, в паттернах, в каких-то вещах, которые... используется повсеместно и придуман таким образом чтобы упростить жизнь разработчика опять же вот как ты привел пример singleton прям супер ярный делайте обжиг и будет вам singleton все вот и Java разработчики когда начинает писать на Kotlin все абсолютно проходят вот этот вот этап в две в три недели в месяц у разных людей по-разному когда они пишут Kotlin код по Java Проходит какое-то время, концепции укладываются, начинаешь ощущать прелесть от каких-то отдельных конструкций, от инструментов языка, и жизнь начинает играть новыми красками. В каком-то смысле, мне кажется... прожить новыми красками что котлин спас как бы кризисно но джава уже старый достаточно язык сколько там 30 лет и он как бы в таком в кризисе среднего среднего возраста и котлин это какой-то новый новый виток придал придал развитию развитию джавы что мне кажется что даже джава задышала как-то более более более легче более лучший глядик на то как хорошо получается решать эти проблемы у котлина Это очень напоминает, знаешь, такого уже матерого спортсмена. излете карьеры, который... Вдруг приходит молодой конкурент, и он такой понимает, а я должен показать ему, что мой опыт никуда не делся, что мастерство не пропьешь, и я могу перенять у этого молодого спортсмена какие-то фишки и привнести его в себя. И на самом деле, Java очень сильно изменилась, начиная 17 тоже движение в project loom я думаю его бы разрабатывали сильно дольше если бы не существовала коротин потому что вот у такого костика джава сообщество наверняка была просто двойная мотивация раз ребят в джет брейн смогли мы тоже должны сможем классно а что что если что которые ты нам включаешь, выключаешь через dash-dash. И прикольно, что ты... Ну, как будто ты можешь посмотреть, что хорошо работает в Kotlin, и тебе сразу это делать. И ты сразу знаешь, что это будет использоваться, что это точно нужно. Нет такого, что мы сделаем фичу, а она там, не знаю, никто ее не заметит. Ты точно уже знаешь, что будет использоваться, как и что это возможно сделать, что в bytecode ты можешь просто скомпинировать и посмотреть. как там сделали ребята из Котлина? А, определенно так. Собственно, мне кажется, что по большей части, большая часть джепов, которые там выпускалось, так или иначе ориентировалась, типа, о, сиолет класса. Ну, понятно, это не только фишка Котлина, это, ну, Котлин тоже явно напитывался идеями из других современных языков. Но... есть с другой стороны какие-то концептуальные вещи, которые заложены в языке, и Java является заложником подхода поддержки обратной совместимости, и в итоге мы получаем какие-то вещи, как null-safety ты не сделаешь в Java сейчас, никак. К сожалению, это просто данность. Либо мы ломаем обратную совместимость, делаем Java версию 2.0, в которой появляется null safety, может быть, еще какие-то конструкции, языка которых нет, но ты в любом случае строишь язык на базе того, что было задумано в каком-то 94-ом. Я сам не знаю, мне хочется сказать, что 90-91-ые, но кто его знает? В 90-х, скажем так. Да, да, да. То есть на базе языка, придуманного 30 лет назад. И если мы посмотрим там, альтернативно, C-sharp ломал обратную совместимость, по-моему, несколько раз. Swift... Apple просто... Это вообще компания, которой я восхищаюсь в плане того, как она насильно пересаживает весь мир с устаревших технологий на что-то новое. Мне кажется, что если бы... Ну, Apple могла рулить всем интернетом, мы бы уже все давно перешли на IPv6, на HTTP версии 2.0.3.0, недавно вышедшей. То есть компания умеет, как никто, фортить отказ от всего старого и рудиментарного. В Java в этом есть определенно свои плюсы, и это одна из фичей, которая позволяла Java и позволяет, наверное, до сих пор продавать как классный язык, но... Мне кажется, что это очень сильно ограничивает. Хотя многие джависты говорят, null-safety, да ладно, мы там аннотациями кода разметим. Я, когда исследовал разницу между Java и Kotlin, наткнулся на то, что есть отдельный целый фреймворк, который занимается примерно тем же самым, чем занимается Kotlin-компилятор. подсвечивает на этапе компиляции варнингами все места, где у тебя потенциально может вылететь на alt. Мне кажется, что если что-то подобное существует, это не просто... Ну, это огромный фреймворк, я смотрел там документации просто, какое-то бесчётное количество. Если люди запарились написать документацию там на 50-100 страниц, у них болит. И это боль не одного разработчика, и... Ты не можешь ее решить в Java иначе. Кроме как, давайте сломаем обратную совместимость. Перепишем язык, сделаем какие-то новые фичи, неллбл-типы и так далее. Вот. Но зачем это делать, если существует Kotlin? Большой вопрос. Да, я просто... Ты сказал про null-safety, про эти подсветки идеи, я просто слышал шутку какую-то, что Kotlin вообще появился как плагин, как плагинк идеи, потому что подсвечивать все эти ворнинги, тебе нужно написать достаточно много кода. Конечно, Kotlin не плагинк идеи, но все равно достаточно зававно. Хотя, вот сейчас в данный Котлин, как бы, можешь писать в других редакторах, и наверное на джайве тоже можешь писать в других редакторах, но мне кажется, Котлин вот как никто привязан к своему… К идее. К идее, да. То есть в каком-то, в некотором роде это, ну то есть это не плагинг идеи, но без идеи тебе будет очень тяжело, почти, почти невозможно выписать, даже, не знаю, на какой-то быть настолько же продуктивным, как бы, как в идее, даже на 20%, на 20%. вот это это вот первый первый такой как бы штучка которую хотелось сказать про кодлин а вторая про на л на л сейфити нет я просто не писал на ку не писал на кодлине и у меня как у джава разработчика сразу возникают там такие вопросы ну типа ну как и никак нет налов ну типа да ладно ну как нет нал ну наверное ну что это значит нет налов наверное парочку есть просто просто их меньше но в том плане что наверняка возникают налы когда-то там npe имеют ну exception, когда ты там интегрируешь другие библиотеки, ты же все равно работаешь из Kotlin с какими-то другими библиотеками, он может же возникнуть в другой библиотеке, он может там, если проверяешь какие-то другие параметры, ну там, на выходе, то они там где-то внутри может произойти, то есть ты как бы избавился на этом, на уровне того, что ты себя чувствуешь немножко безопаснее, ну типа чувствуешь себя увереннее, можешь быстрее менять, редактировать все равно инфраструктура такая, что там он может быть, где-то тебе все равно с проинтеграцией с другой библиотекой тебе надо будет там какой-нибудь сделать кетч, не знаю, как котланд, типа кетч с роублой поймать, какое-то там ужасное исключение, просто потому что библиотека другая, так вот плохо написано, вот, поэтому ты же полностью его не избавишься, то есть этот рудимент вот этого вот NPE, оно как бы даже в новый язык, оно все равно так как бы может и напомнить и напомнить о себе то есть вроде бы как написали язык полностью с нуля а вроде бы все равно мы как разработчики тебе должны помнить что да да мы им пишем пишем на котлин на библиотеке у нас наджаи значит они могут выбрасывать всякие нпшки к тому что ты все равно должен быть каким-то вечным вечным сеньором то есть или ты пишет на котлин тут должен быть сеньор разработчиком каким-то уже с десятилетним опытом с уставшими грустными глазами и как будто нету нету входа в котлин вот момента пока ты как бы пока ты не на ну как бы не узнал про все эти ошибки которые тянет за собой джава как бы на бумаге у нас не должно быть этих ошибок но как бы они там вроде бы и есть потому что мы все равно помним что это как бы наследник наследник жала вот и этого два пункта которые хотел поговорить это то что без как бы жесткая привязанность к де и все равно Давай начнем с жесткой привязанности к IDE. До недавнего времени это не казалось какой-то большой проблемой, потому что, ну, сугубо личное мнение, продукты от JetBrains потрясающие. Идея лучшая IDE для Java, которой я пользовался, я думаю, что многие Javist с этим согласятся тут тоже. Достаточно популярное мнение. Но, ввиду недавних событий, принятых компанией JetBrains решений не лицензировать свои продукты для компании из России, у backend-котленистов остается единственная альтернатива, это community-версия идеи. вызывает опасение, что вдруг JetBrains скажет, что все, вот комьюнити версию идеи нельзя использовать в коммерческой разработке. Мы не можем этого гарантировать, компания вольна делать со своим продуктом всё что угодно, хотя по моим сугубо личным ощущениям мне кажется, что этого не должно произойти, но всё может быть, и это определённый риск. Я, если честно, даже не пробовал в каком-нибудь Visual Studio Code, но вроде как для неё существует... Котлиновский плагин, но, естественно, разница в удобстве и в уровне поддержки будет существенной. И, возможно, если такой плагин есть и им кто-то занимается, сейчас российские разработчики могут очень неплохо в него законтребьютить, чтобы иметь возможность использовать удобные IDE, Год разрабатывать на старой версии идеи может не очень удобно, но в какой-то момент станет неудобно, а какие-то фишки ultimate версии все равно нужны. Хотя тоже такое спорное мнение, потому что я знаю многих коллег, которые пишут в community версии идеи, им абсолютно всего хватает. Это был первый вопрос, можешь, пожалуйста, напомнить второй? Да, мне надо перестать задавать по три вопроса одновременно. Второй вопрос был про... Все-таки мы начали язык с нуля, написали его полностью с нуля, у нас новый красивый язык, но мы все равно должны быть в первую очередь, когда-то давно Java-разработчиками, мы все равно должны помнить о каких-то ошибках, которые происходят в Java-экосистеме, все равно мы все время идем и смотрим, что там в Java, что там в джаве то есть ты все время ты как бы модный котлин котлин разработчик но отбросить вот это вот все старое как бы ты и отбросил у тебя там нал сейф эти много других плюшек но ты все равно все равно следишь за джавой смотришь что там за байт коды появляются смотришь какие-то новые ошибки ведь если изменяется что-то там не знаю я на котлени не пишу но я предполагаю что если у тебя изменяется какое-то нам поведение там мета новый мета добавляется новый эффективный все смотреть за за джавы то есть все равно должен быть все как бы в курсе того а что там что там джави ты все-таки если поскрести котлин разработчика там будет внутри хороший разработчик и от этого никак никак не избавиться не бывает так не бывает котлин разработчика который не ха ну как бы так себе как сказать хороший котлин разработчик он хороший джави разработчик не бывает такого чтобы хороший котлин разработчик не знал ничего от жави не получается полностью вот прошлое. На самом деле даже с последним вот хороший Kotlin разработчик, обязательно хороший Java разработчик, зависит от многих факторов и в частности Kotlin хорош, когда он изобилирован. Понятно, если у тебя есть большое количество общих границ с Java, если у вас переплетается Java Kotlin код, это в частности в отношении поддержки null-safety как ее решаем мы у себя к сожалению единственный выход разметка кода аннотациями везде на входах, на границах надо постараться это сделать и на null-null было аннотациями вот Извините, я немного подвис. аспект, ты не можешь защититься от внешнего влияния никак. Уберем джаву, у тебя будет внешнее влияние в виде смежного микросервиса, который точно также может выбрасывать какие-то ошибки. То есть в любом случае надо знать, с чем ты взаимодействуешь и быть к этому готовым. И да, я согласен, опять же это... те места, где Kotlin граничит с Java. возникают иногда проблемы, их можно можно минимизировать их влияние, это не нулевая по стоимости активность, но на мой взгляд это субъективно, к сожалению, это такие уже тонкие вещи, которые очень сложно измерить очень сложно вообще придумать какую-то метрику, как понять, например сильно ты выиграл от null safety, то есть или нет, потому что когда я смотрю какой-нибудь pull request и я там вижу, что бывают довольно простые pull request, где какой-то новый параметр нужно протащить через 10 сервисов с одного объекта перекинуть в другой и ты в этот момент смотришь и такой а будет там нал или нет залазишь и начинаешь по стеку спускаться вниз по всей логике и такой ааа тут не будет нала все хорошо И вместо того, чтобы посмотреть полреквест в Kotlin, типа, а, мы здесь поле прокинули, ага-ага, все понятно, это занимает там условно 3-5 минут. В Java у меня были случаи, когда я заморачивался, когда у тебя не просто классы, например, какой-то интерфейс, у него несколько реализаций, каждый еще в какой-то сервис ходит, и понять, что у тебя там вернется, если это все заранее не было размечено. На этом приходится тратить очень много времени. Если Pull Request параллельно смотрит два разработчика, ты тратишь их с два времени. Если они в одинаковой степени скрупулезности. Вот это была, кстати, одна из самых больших болей, которая... Когда я почувствовал, что Kotlin ее решает, жизнь, как я говорил, заиграла новыми красками. При этом, да, окей, надо потратить какое-то время, разметить весь смежный код. Но в целом, тоже, лично наш опыт заключается в том, что ты разрабатываешь какой-то микросервис, большая часть логики взаимодействует, ну, один сервис внутри этого микросервиса взаимодействует с другим. код взаимодействует с Kotlin кодом и когда ты доходишь до состояния что у тебя там 99 процентов кода либо на Kotlin либо размечено, эта проблема исчезает практически как класс, потому что ну окей, да ты знаешь что если ты используешь какую-то библиотечную функцию, то там бы проверить вернется тебе Null или нет, но это не супер, вот, субъективно не супер часто кейс и при этом его можно следить. Плюс к этому добавляем, то что многие инструменты, такие как Spring, размечаются аннотациями. Затем ты можешь начать использовать котлинобертки над какими-то известными библиотеками, котлиновские библиотеки, которые тоже очень круто облегчают жизнь. И когда ты начинаешь жить вот в этом в целом... И почему я сказал изначально не факт, что хороший Kotlin разработчик будет хорошим Java разработчиком, если ты, например, занимаешься какой-то продуктовой разработкой, у тебя не очень много задач, где тебе нужно что-то сложное, инфраструктурное. Опять же, в bytecode не каждый разработчик лезет. И если твои задачи лежат в этой области, возникает вопрос, зачем тебе вообще... практически не можешь не контактировать с java. Пишешь хороший продуктовый код, примерно понимаешь в каких кодлингах может просесть, и глубоко в детали java тебе уходить не надо. И на фоне этого ты можешь быть отличным кодлинг-разработчиком. который пишет отличный продуктовый код, но при этом очень далеким от деталей GVM, оптимизации и всего вот этого. Ну, примерно так. Ну, мне очень понравилось, как ты сказал, про типы в том плане, что это... Ну это правда очень удобно, когда ты просто компилируешь код, и он скомпилировался, и значит работает. Значит, все хорошо, тебе просто какой-то простой pull request дополнительным параметром нужно проверить, что просто он как бы скомпилировался, что там нет никаких ошибок, что программа работает за тебя, тебе не нужно. В джаве такой же pull request действительно пришлось бы проходить. Ну, как очень хороший пример про кучу вот этих вызовов, когда у тебя один параметр, вот он там в контроллер в сервисы сервисов контроллеры с контроллеров сервисов том другой микросервис у тебя такой pull request на несколько несколько сервисов эти везде тебе надо пойти подумать так а вот он участвует из джессона вот он сейчас во что серилизуется так там если там мы передадим на л то там будет на либо 0 а тут может быть на то есть это достаточно много много работы и много работы и много работы достаточно опытных инженеров которые сидят смотрят на такие казалось бы пул реквеста уровня добавь добавь одно поле и вот эти вот шутки про то что почему у нас две недели требует добавить одно поле в какой-нибудь микро микросерверс да ну потому что ты сначала добавят но появились ошибки ты начинаешь откатывать и в общем и это тяжело. Корлин, конечно, с своими типами убирает эту проблему. Это определенный плюс. Приятней становится писать на языке, меньше чувствуешь себя каким-то... Ну то есть программа работает, человек отдыхает. Это классно. Позволь перебью тебя. Есть важный момент. Котлин, вот ты когда задавал вопрос, на который я сейчас отвечал... Котлин не убирает, он значительно снижает издержки по тому, чтобы найти и предотвратить эту проблему, а также значительно снижает риски того, что она возникнет, она не исчезает полностью. потому что она иногда даже может в неявном виде возникнуть в код-линг-коде у меня такое тоже было но знаешь это как если ты не можешь победить болезнь, да, но как минимум можешь ее окупировать и снизить шанс того, что у тебя вот хроническая болезнь будет там проявляться раз в месяц или раз в год стоит ли эти усилия того? как правило стоит, поэтому я смотрю всегда на это так, что да, он не решит эту проблему целиком но жизнь становится значительно проще. А давай может быть тогда немножко платформе которую вот и разрабатываешь и не могут рассказать про то то есть сразу ли она была написана котлени либо вы писали на котлени какие-то несколько несколько микросервисов и то есть что изначально послужило... ну я понимаю, что любопытство и свободное время разработчика, скорее всего ну то есть какие вы основные плюсы извлекли из этого? ведь в это надо все вложиться то есть в том плане, что одно дело свое, как какой-то микросереж на рабочем ноутбуке что-то там напилить, а другое дело то, что чтобы в прод его выкатить, тебе там надо поменять полностью pipeline, ну не полностью, но заметно, короче, это работа не сложной, но все же еще работа и объяснить почему мы должны попробовать вот этот вот микросервис на котлени, либо почему у нас вот тут должен добавиться еще котлин как еще одна зависимость. Можешь про это рассказать, про именно практически стороны того, как вы внедряли, как вы обосновывали себя, для чего вы вообще это делаете? Начнем с того, что, да, ты прав, как всегда подобные истории, они начинаются с некоторого энтузиазма. Я только пришел в Яндекс, начал работать, осваиваться, повыкся, и в какой-то момент захотелось взять тот опыт, который у меня был до Яндекса, в частности опыт. работы с Котлином и каким-то образом улучшить жизнь разработчиков внутри БКНД «Кинопоиска». Началось это все с того, что я абсолютно вероломно... увидев что ага вот у нас есть такая возможность использовать kotlin сделал pull request с тестами написанными на kotlin и сказал типа ребята смотрите классная штука можно хотя бы там начать сейчас писать тесты все попробуют, потому что тесты писать безопаснее на Kotlin это проще и поддерживает проще как бы вы хотя бы немножко поймете чем предлестен язык, а потом поймете как он раскрывается уже когда ты пишешь продовый код все проникнутся вот этим моим энтузиазмом. Чудо не произошло, к сожалению, ну, точнее, нет, не к сожалению, это на самом деле к счастью, потому что на предыдущей моей работе было немножко больше свободы в плане а давайте попробуем что-то еще. Но когда ты разрабатываешь сервис с... огромной аудитории с очень высокими требованиями к его технической составляющей, с высокими требованиями к качеству этого сервиса, ты не можешь позволить себе делать зоопарк с технологией. Если в каждом микросервисе тут у нас будет одна база данных, там другая, здесь Kotlin, там Java, тут пришел разработчик с опытом на Go, это все абсолютно невозможно будет поддерживать. Стоимость такой поддержки кратно возрастает. Соответственно, мне сразу сказали, что мы поддерживаем твой энтузиазм, это классно, какую-то технологию вводим, что она нам даст. Мы зашли на второй круг. Я собрал небольшую презентацию, на которую пригласил всех разработчиков нашего бэкэнда и показал, посмотрите, есть Котлин, какой он классный и какие боли он решает. НПЕ, вербозность Джавы, ну и так далее, так далее. Почему это нужно было? Как минимум не все разработчики, во-первых, задумываются о том, а с какими проблемами ты сталкиваешься. Ну, потому что ты живешь в мире Джавы, здесь есть НПЕ. И иногда, знаешь, как это, наступил на кнопку, уходишь и болит, и болит, ну... А потом оказывается, а можно достать? и будет хорошо. И иногда стоит на это обратить внимание. Я рассказал своим коллегам, смотрите, у кого-то был опыт, у кого-то не было совсем, кто-то заинтересовался, у кого-то возник всё ещё тот же вопрос, а зачем нам это нужно, что мы выиграем, потому что так или иначе будут не нулевые расходы, должен сохраняться один язык. Это легче, это объективно легче и, соответственно, в существующих микросервисах непонятно писать на Kotlin или писать на Jail. сервисы, ну не прям чтобы супер часто появляются, ну появляются естественно, но возникло море вопросов относительно того, зачем это нужно, как внедряться и так далее. И мы решили пойти следующим этапом, выстроить процесс следующим образом. Значит, я думаю ты знаком с тем, что такое ADR? Лучше расскажи, Соответственно, это некоторый документ, у которого есть о техническом решении Архитектурном, но на самом деле его можно применять в целом к любому решению В чем суть? Ты описываешь какую-то глобальную проблему или задачу, ее мотивацию И затем проводится анализ плюсов и минусов, вопросов, которые возникают такое, если кто-то сталкивался опять же с процедурой ArchReview, это очень близкая штука, ну собственно Architecture Decision Record и в конце должно быть представлено некоторое решение с мотивацией, что дает такой подход во-первых, это регламентирует процесс, во-вторых, у тебя появляется документ, в котором ты проводишь некоторые исследования, и оно задокументировано, и в конце ты принимаешь решение и фиксируешь, что вот на основе пункта 1, 2, 3 мы решили, что мы будем это делать или не будем это делать. Что это дает? Даже если ты принял или не принял решение, ты всегда можешь вернуться. Два года спустя, когда все взводят и скажут, боже, как мы страдаем от этого Котлина, мы вернемся и скажем, ребята, ну вот мы тогда смотрели на это, таким образом. И выделили вот такие-такие выгоды и преимущества. И на фоне этого перевесило, решили, что надо делать, либо не делать. И это очень крутая штука, потому что ты, например, не приняв некоторые решения, может пройти полгода, вернуться к нему, дописать туда какие-то изменившиеся обстоятельства, и суперфичавка от линии еще появится, еще что-то. И ты можешь туда писать, сказать, вот тогда было недостаточно, Теперь всё, мы готовы. Мы должны попробовать. Мы пришли к этому моменту, изучили этот документ, тех лиды, лиды, и приняли решение, что мы можем в некотором ограниченном режиме, так как опять же, сервис большой, очень высокая... цена ошибки, просто так бездумно бежать, внедрять во все сервисы нельзя, мы пошли путем того, что выделили две команды, которые занимались, в частности моя команда и еще другая, которые было позволено писать на котлене. Это был такой эксперимент по его использованию, у эксперимента был четкий регламент, что можно делать, какие фичи языка можно использовать, какие фичи, например, перегрузку операторов мы сразу сказали нет, DSL нет, это дорого, у этого очень высокий риск того, что мы можем навредить. Такие инструменты должны использоваться только в тех случаях, когда у тебя есть очень четкая мотивация. Честно под это я бы проводил тоже отдельное арх-ревью. Вот мы тут увидели задачу вот такого вида и такого размера. И давайте мы придумаем под эту задачу некоторые DSL. Задокументируем, опишем и только тогда будем использовать. Если вот так вот в ремках эксперимента начать строить свои DSL, то тут и там. Вот, соответственно, когда мы выделили все вот эти зоны... поражение, разрешенные и запрещенные фичи, некоторые регламенты. Мы устроили трехмесячный эксперимент, подписали на Котлине, вернулись, ну, собирали обратную связь с командой, с которой не писали на Котлине, с командой, которые писали на Котлине. Обобщили весь этот опыт, вернулись в ИДА, посмотрели на те выгоды и недостатки, которые мы изначально в теории предполагали. практикой и пришли к выводу что да, Kotlin классный язык, у него есть... ну все преимущества-выгоды о которых мы говорили они подтверждаются либо частично подтверждаются, например, ну одна из таких часто высказываемых выгод на Kotlin ты начинаешь писать код быстрее. В целом... Это интуитивно понятно, потому что код короче, код быстрее. Это также понятно за счет каких-то более упрощенных конструкций. но одновременно мы там допустим смотрели что есть исследования в них напрямую Kotlin в бэкэнд разработки не сравнивался, сравнивался в андроид разработке где понятно у него было преимущество и еще сравнивались котлина подобные языки ну такого нового поколения условные Go, Swift, с языками более старыми, и у них было небольшое преимущество в скорости написания кода. Но такие вещи все равно на практике ты не подтвердишь, потому что тебе нужно посадить двух одинаковых разработчиков с одинаковой задачей, параллельной, и вот сказать, вот теперь ты пиши код на Kotlin, ты пиши код на Java. И вот тогда можно сравнить, типа вот Kotlin написал там задачу, решил за час 10, Java за час 45. Хотя, тоже интересный момент, тут небольшое лирическое отступление. Я тут недавно начал экспериментировать с Copilot. опять же субъективная штука, но по моим ощущениям Copilot значительно лучше подсказывает для кодлина, чем для джавы Возможно из-за того, что язык ну в каком-то плане его можно назвать более высокоуровневым, более высокоуровневой конструкции, больше функциональнейшины и за счет этого вот Copilot видимо легче справляться с таким кодом, писать что-то более осмысленное, чем на джаве Вот, собственно, вернемся к процессу. После этого мы выделили главную фишку, про которую я немножко сегодня уже проговорил. Kotlin максимально хорош для продуктовой разработки. Когда ты взаимодействуешь с верхнеуровневыми сущностями, с сервисами, с доменными объектами, с какой-то бизнес-логикой, где тебе нужно step-by-step описать, делаем это, это, это и это, с учетом того, что Kotlin позволяет те же extension функции писать, которые потрясающе круто вписываются в такого рода разработку, там ощущается густ. Код становится понятнее, интереснее, возникает естественное желание немножко позаниматься творчеством. Его определенно нужно ограничивать, потому что... инженеру покуражиться и поделать что-то на свой вкус и цвет, можно всегда из очень хорошего интересного понятного кода превратить это во что-то, что этот инженер определенно будет считать красивыми и понятными, но никто больше на свете не поймет. При этом у нас осталась инфраструктурная часть, платформенная часть, которая больше про низкоуровневые вещи, Мы решили не пускать Kotlin туда, потому что, во-первых, это некоторые common компоненты, которыми пользуются во всех наших микросервисах. И у нас, опять же, нет цели, не все разработчики говорят энтузиазмом, писать на Kotlin, и у нас нет цели насильно пересадить, все команды должны писать на Kotlin, нет у нас такого подхода нет есть команды которые мы хотим писать на джабе нам нравится джаба нас все устраивает и кто готов хочет получать преимущество от котлина пожалуйста берите в частном у нас так сложилось что это продуктовые команды вот Но при этом common компоненты пишутся на джаве, потому что когда-нибудь разработчикам нужно опуститься в какой-нибудь common компонент, просто почитать код, что-то дописать. Оно должно быть на джаве, оно должно быть удобно, универсально для всех, вне зависимости от того, на каком языке ты пишешь. Единственное, что движемся в сторону того, чтобы чуть упростить жизнь кодлено разработчикам, код надо размечать аннотациями. Собственно, вот так вот выглядел наш вот этот вот путь. Я и не представлял во что это превратится, в хорошем смысле превратится. На самом деле, процесс был очень интересным. Процесс оказался очень познавательным для... Ну, для меня лично, потому что очень, ну, естественно, на каком-то энтузиазме и в свободном времени я очень много... в разные аспекты Котлина погружался, узнал его значительно лучше, чем знал в тот момент, когда я пришел, сказал всем, а давайте писать на нем и понимаю, что этот путь его надо было пройти и что очень важно, мы таким осторожным подходом показали, как мы можем внедрять новые технологии при этом просчитывать стоимость такого внедрения потому что опять же, затащить что-то не так сложно, как потом это выпилить и опять же, когда речь идет о сервисе с большим количеством пользователей ну, это становится очень дорого Минимизация рисков – это была одна из наших главных целей. В некоторых моментах, мне кажется, мы даже немножко слишком перестраховались. Но в итоге получился очень плавный процесс. Получилось выработать документацию внутреннюю свою, какие-то практики, которые мы используем и не используем собрать. На самом деле относительно небольшое количество граблей, наступили. В основном это были какие-то вещи, которые нужно пережить любому джава-разработчику, который переходит на Kotlin. Например, узнать, что у аннотаций в Kotlin есть, назовем это target. В джаве-то у тебя... отдельно поле, отдельно параметр в конструкторе, параметр в сеттере еще где-нибудь отдельно гетер есть в котлине в датаклассе ты навешиваешь аннотацию и и ваш вопрос, а на что она у тебя навесится? и джеристы зачастую даже могут не задуматься а что? аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа интересный момент, в который, по-моему, опыты вляпываются все. И что круто, мы, опять же, ограничили вот эту зону, две команды занимались, две команды в это вляпались параллельно, а не пять. Стоимость подобного внедрения стала значительно меньшим. Сейчас у нас есть на Бординг Гайд, любой, кто хочет... начать писать на котлени, приходят читать, изучают те части языка, которые нужно изучить в первую очередь, потому что мы простым частотным анализом поняли, что вот это, вот это, вот это мы больше всего используем, поэтому если ты начинаешь писать на котлени, просто ознакомься сначала хотя бы с этой частью. В идеале, конечно, прочитать всю документацию, но не все уляжется в голове, а... так мы хотя бы понимаем, на что особенно нужно обратить внимание. Вот, наверное, я завершусь с процессом, у тебя возможно возникли какие-то вопросы и буду рад ответить. Да, у меня на самом деле много вопросов, но я даже не знаю с каких части начать. Вот мне показалось про измерение скорости, я понимаю, что это там все не точно и, типа, тяжело измерить, надо найти двух разработчиков одинаковых, одинаковые сервисы, но ведь есть ли разработчики достаточно опытные, накотлене ну можно же просто типа спросить насколько вы чувствуете себя быстро не знаю там насколько вы быстро имплементируете вот этот вот сервис вот такой сервис просто ну типа я к тому что провести опрос опытный джав разработчик насколько им нравится насколько они чувствуют что они быстрее конечно это может быть тоже такое обычное, что я чувствую, как я быстр, но на самом деле он там 2 часа сидел, все это реализовывал, но в том плане, что это все равно какая-то метрика метрика, которая позволяет говорить, что да, вот так те конкретно там 20 человек, 10, которые использовали Kotlin, у которых там есть опыт вот такой разработки на Java, они чувствуют себя, они чувствуют, что они эффективнее, быстрее, это же тоже позитивные, хорошие быстрее, эффективней, даже если у них на выходе получается точно такой же продукт, ну то есть ничего остального не меняется, это все равно хорошая метрика, и вот это тоже можно как бы померить, не меряя там количество строк-кода, ну то есть не меряя какими-то техническими средствами, я имею ввиду, запоминая, записывая сколько он там строк написал, а просто провести как Java разработчик или как кодлевый разработчик, показать им страшный код на Jive, показать им страшный код на Kotlin и замерить пульс, не знаю что они там, как они чувствуют, когда видят вот этот код, тяжело ли его ревьюить или нет. Вот про меты измерения я хотел вот это добавить. Что-то вы как-то еще пробовали измерить эффективность? Ну смотри, во-первых, мы всех, кто писал на регулярно опрашивали, оценивали степень удовлетворенности. И также мы исследовали использование Котлена других бизнес-юнитов Яндекса, потому что мы, к сожалению, не первопроходцы в этом вопросе. И в целом большая часть там... фидбека, она всегда была на уровне либо очень нравится, либо просто нравится. Более того, если ты посмотришь рейтинги, которые собирается Tech Overflow ежегодные, Kotlin стабильно в топе любимых языков. Разработчики, которые на них пишут, они действительно практически все... Если не ошибаюсь, так Overflow говорит, что рейтинг удовлетворенности около 70%. У Java он уровне 30 или 40. То есть более чем в два раза Кротлин превосходит Java. Но тут есть еще важный момент, что есть обратная сторона медали, есть те, кто Котлин даже не пробовали и не хотят. И они будут изначально к нему относиться очень скептически. И тут возникает вопрос как бы как собрать честный фидбэк, потому что у тебя зачастую пользоваться начинают котлином те разработчики у которых там например от Джавы что-то болит, они приходят к котлину типа ооо, жизнь стала лучше. И в каком-то смысле у тебя получается немножко нерепрезентативная выборка. В идеале мы таким не занимаемся, у нас свободная компания, и никого предудительно стуча колокол по столу мы не заставим писать на котлени. У разработчиков всегда есть выбор. есть некоторые категории разработчиков, которые относятся к Kotlin скептически, и они его не пробовали, либо пробовали очень верхнеуровнево. По собственному поводу скажу, если вы почитали немножко документации и написали какой-нибудь тестовый класс, и остановились на этом, вы не поймете всей прелести языка. Вот хотите понять, насколько Kotlin хорош, насколько он вам понравится, в фичах, возьмите какой-то большой сервис, который у вас есть, и попробуйте его с нуля переписать. В идеале еще потом отдать котленисту, чтобы он немножко его причесал, потому что вы все равно напишете его по-котлиновски. И когда вы получите, просто вот посмотрите и сравните. И если окажется, что... Вот так. Нет, фу. Ну да, может быть... конкретно вот этому разработчику Котлин не понравится. Но говорить о том, нравится тебе язык или нет, пока ты до конца его не попробовал, ну, нельзя. Но одновременно, опять же, есть проблема того, что выборка людей, которым Котлин нравится, немножко смешана в сторону тех, кто изначально там... Ну, кого-то, может быть, и принудили, но в целом, большинство людей, которые им пользуются... к тому чтобы а давай попробуем ну да но это все равно тоже позитивный метрик в том плане что есть языки программирования которые есть интузиасты которые хотят попробовать новый язык приходит попробовать новый язык и такой типа ну да не оправдал ожидание ну котлин получается оправдывает ожидание до интузиастов до тех кто даже не пробует как он может его оправдать но те кто приходит туда как бы зачем-то зачем-то ну не известно тем что они получают получают в итоге это тоже неплохая метрика я хотел еще андрей спросить про технические небольшие детали ты вот рассказал про процессное внедрение но это чисто технические я понимаю вы сделал презентацию ну то есть например кто-то вот и слушатель если нас сейчас слушает такой так у меня есть компания и в ней вот 4 4 команды я бы очень бы хотел чтобы хотя бы одна из них желательно моя команда или две команды написали бы микросервис на Котлени. Хорошо, я понимаю, что мне нужно сделать презентацию. Хорошо, я понимаю, что нужно сделать какой-то unboarding гайд. Мне как-то нужно предложить это как эксперимент, то есть пройти по твоему пути, как ты это сделал. Но вот чисто технически, то есть о чем еще стоит подумать в том плане, что ну достаточно ли просто, знаешь, типа в идее скачать До свидания! Что технически, какие изменения, каким изменениям нужно быть готовы технически? Как должна быть готова ваша платформа, если у вас уже какие-то там есть микросервисы? Может, они собираются Gradle, может быть, Mavin, может быть, это куда-то там, если у вас не Spring. То есть, есть ли какие-то технические детали, которые стоит проверить у себя в компании? Типа, можешь ли ты хотя бы заикнуться о том, чтобы перейти на Kotlin? Может быть, еще до этого момента нужно как-то, не знаю. там, какую-то, какую-то соломку подстелите, какие-то другие сервисы, подготовить, подготовить инфраструктуру для этого. Вот что бы ты мог посоветовать? Смотри, тут будет интересный момент, по крайней мере, по части бэкэнда, опыт Яндекса немножко отличается от опыта других компаний. даже сборку проектов осуществляем собственными инструментами. Ни Грейдлом, ни Майвеном. У нас есть отдельный инструмент под названием Ямэйк. Он изначально создавался для плюсов, но в итоге, потому что Симэйк не удовлетворял потребностям Яндекса. соответственно мы живем еще в монорепозитории там наслаивается из-за этого целый ворох проблем которые вот этим инструментом решаются и поэтому инфраструктурно вот в отношении gridla например мне сложно подсказать я знаю что есть плагин что все это довольно легко между собой интегрируется и когда я играл с этим самостоятельно честно, я даже не вспомню каких-то технических проблем, которые возникали и тут вернусь опять же к опыту Яндекса дело в том, что у нас не только внутри команды подход, но и в целом внутри компании подход, что если мы в нашем монорепозитории разрешаем некоторый язык, на данный момент, если я не ошибаюсь, на бэкэнде разрешены плюсы Java, Kotlin, Go, и Python. Вот, пять языков. Соответственно, Kotlin проходил точно так же внутри Яндекса процесс по которому его одобряли или нет. Потому что опять же, ну как? компания сложные технические решения мы должны это все валидировать и в целом вся инфраструктура у нас внутри она уже была на момент внедрения подготовлена по сути нам нужно было просто в специально конфигурационном файле прописать что вот а вот теперь у нас есть Kotlin и если говорить про этот процесс я он произошел до того как я пришел в яндекс но я интересовался как вообще пришли, почему приняли, какие были технические сложности. И в целом один из очень важных пунктов, почему Котлин был разрешен, это пункт о том, что внедрение с инфраструктурным числе имеет очень низкую стоимость. Внедрить условный C-шар было бы несоразмерно дороже, потребовало бы значительно больше усилий. Kotlin придуман таким образом, чтобы легко вплетаться в GVM платформу и в целом это же бренд. Возможно, какие-то технические проблемы могут в каких-то ситуациях возникать, но на нашем стеке Spring Boot, Postgres... мы не отлавливаем каких-то серьезных проблем с тем, чтобы это все между собой интегрировать. Ну, не могу сказать, что... Нет, окей, ладно, извини. Мне вот сейчас в голову ничего такого не приходит, что где бы подстелить соломки инфраструктурно и чего стоит опасаться. Ну, то есть, давай тогда еще как-то для слушати упростим, то есть, анкету придумаем. То есть, я так понимаю, что тебе... Неважно, чем вы собираете, у вас там должны внутри Мавина и Грейдла там какой-то котлин-компилятор, который соберет ваш котлин-кот со всеми джарками в джарник. Важная штука это, кстати, вещь, которой мы занимались... Вот мне сейчас только в голову пришло, извини. Собственно, когда мы писали наш ADR, был важный момент. Мы собрали весь набор технологий, которые мы используем. Опять же, Spring, Hibernate, GeoOc и так далее. Все-все-все-все. Мы... собрали проверили что в целом если мы заменим джаву целиком котленом, что у нас не отвалятся аспекты, что у нас будут все наши внутренние инструменты работать. То есть, пока резюме с поиском того, как это работает в индустрии, с премьерами, с плагинами, ну, например, там Jackson, да, по Jackson есть отдельный плагин. Все, мы пришли, посмотрели, подсветили, кстати, что у Jackson плагина довольно большое количество открытых Но приедли к коллегам из других бизнес-винтеров Яндекса, поспрашивали, ребят сказали, да вот были такие-такие проблемы, взяли, использовали Jackson-Cotton module, все, все заработало, проблемы ушли. Мы поняли, что даже если эти ИС часы открыты, очень такие специфичные корнер-кейсы, и 99%... наших рабочих потребностей скорее всего этим модулем закроется что бы я подсоветовал, определенно составьте список того, чем вы пользуетесь потому что наверняка есть какие-то вещи которые не умеют и либо вы не найдете подтверждений например есть такой инструмент, как Netflix Hollow Я не нашел ни одного подтверждения о том, что Netflix Hollow генерирует некоторое количество объектов и, соответственно, я не нашел подтверждения, что у тебя есть джавовая модель, а затем он строит разные проксиклассы и еще что-то для... для своей внутренней работы и я не нашел подтверждения того, что этот генератор будет работать как надо переписал с Джавына Котлин, запустил генератор, увидел, что сгенерировалось все равно то же самое поискал какие-то корнер-кейсы, например, вложенные коллекции, массивы, еще что-то то есть не просто объект с тремя полями indowel и string проблем не возникнет. У нас появился такой опыт. Поэтому, да, исследовать и ради чего стоит писать идеару, это по-любому стоит. Кстати, да, это очень хорошо, во-первых. Я пошел гуглить, что такое Netflix-Holo. Что такое Netflix-Holo? Может быть, тендрия скажешь? Сейчас попробую преслоконично это описать. Это такой фрейморк, библиотека, который позволяет тебе некоторые довольно массивные объемы данных преобразовывать в такие... здоровые бинарники, которые загружаются на сервер блин, извини, пожалуйста, давай это, я попробую Ну да, мы может тогда поговорим о чём-нибудь другом, а ты... Ну то есть либо ссылочку хотя бы на этот проект приложим, либо просто ещё тогда к этому вернёмся, либо ещё раз... Я просто вот такого лаконичного описания у меня в голову не складывается, я сейчас буду как-то кастрями объяснять, как это работает. Ну в общем тогда слушатели, мы приложим ссылочку, описание на этот проект, просто я не слышал никогда про него. Вот, вернёмся к тому про список технологий, которого используете. Это вообще очень хорошая идея, даже если вы не собираетесь переходить на котлин соберите инвентарь вашего вашего проекта всех библиотек, которые вы используете и это не не значит что у вас вот не знаю можно это сказать вы кто-то слышит а у меня есть там мавен вот этот биль bill of materials вот это бом или бом там и так все есть версии но Нет, это с одной стороны то, с другой стороны это всё-таки то, как собирается ваш проект. Это несёт какую-то другую цель. Знать о том, какие вы библиотеки используете вообще для какого-то вашего первого архитектур-документа. Просто со списком библиотека, которые вы используете. Почему вы их используете? Почему именно они? Почему не какие-то другие? Потому что вы не сможете никуда переехать, просто не зная вообще... Такие, конечно, аналогии дурацкие, но вы не сможете переехать, не зная, что вам нужно перевести. Для начала нужно составить список тех, о которых вам нужно перевести, чтобы даже проверить, вообще, есть ли под это какие-то Kotlin библиотеки, поддерживается ли это Kotlin. И вообще, может быть, если вы проведете эту инвентаризацию, окажется, что многие библиотеки у вас не используются. Это хорошая работа, ее можно делать. каждую неделю, каждый месяц, просто чистить свои джао-проекты от ненужных завистий. Хотел отметить важный момент, что когда производится анализ этих технологий, больше всего, технологий инструментов больше всего, стоит обратить внимание на все, что связано с кодой генерации, потому что если у вас какой-то инструмент создает проксиклассы... А в Kotlin мы знаем, что все классы по умолчанию Final нужно либо пометить их в аннотации Open, либо использовать тот же Kotlin AllOpen плагин. И опять же стоит понимать, что... Kotlin это отдельный язык и ваш инструмент кода генерации может быть не готов взаимодействовать с какими-то особенностями Kotlin хоть он и компилируется в тот же самый bytecode пока я не сталкивался лично с какими-то проблемами хотя точно знаю что не все вот в Aspect-G том же не абсолютно все возможности использования аспектов доступные в джаве, доступные и в котлене, например. Я точно сейчас не вспомню какие конкретно, но можно посмотреть, почитать, на эту тему есть треды. и много-много обсуждений, но пока не полностью решена эта задача. Мне кажется, что ты, когда перечислял еще просто стэк такой, на который вы переводили на Котлин, мне кажется, что он очень... То есть ты назвал буквально там, я уверен, что больше всякого там еще, но основные такие строительные блоки микросерфи — это вот Spring, Hibernate, Aspect и еще какие-то дополнительные. Просто к тому, что, наверное, стоит проверить Spring поделки. поддерживает ли он Котлин? поддерживает я думаю, что вот эту часть можно даже не тратить время Спринг однозначно поддерживает на уровне пивота который заявляет, если не ошибаюсь в четвертой или пятой версии у них очень много работы проделано в этом направлении Ну а вот Hibernate, во-первых, расскажи, насколько вы используете, насколько вы серьезно используете Hibernate для доступа к базе, либо вы используете просто как матнинг, как вы его используете, расскажи. На самом деле я его исследовал, потому что он используется в нашей ruktury, но... Но по большей части, если немножко заходить на детали того, как мы реализуем свои сервисы, у нас очень много, во-первых, используется наша уже не внутренняя, уже опенсорсная база данных у IDV. Она решает... ну, это нерелационная база данных, соответственно... решаем ну некоторые другой класс задач вот а с постгрессом так вот исторически сложилось что хайбер нейтом мы не пользуемся используем gdb сидим template и напрямую вот но кстати даже там возник однажды очень интересный момент потому что ну кто писал мапперы для gdb си когда происходит извлечения объектов. мы указываем тип и дело в том, что в Kotlin int это один-единый тип, то есть нет разделения, такого явного разделения, как в Java на примитив и boxed class объект. но null, то зачем нам здесь объект, мы можем использовать примитив, если у тебя null был поле, то здесь, пожалуйста, объект используй. Вот, и одна из особенностей, которая возникла в какой-то момент, что оказывается при написании там int.class в Kotlin есть возможность именно вернуть этот... Когда ты так делаешь, тебе возвращается котленовский класс И затем из-под него можно вытащить джавовый Я так очень объяснил И суть в том, что для примитивов есть возможность указать конкретно, что здесь ты ожидаешь, что все-таки вытащится int.class или integer.class И вот лично я вот вляпывался в эту проблему, что... у меня почему-то в какой-то момент вроде простой код, маппер, что там, что там такого, ты его конвертируешь в Kotlin и у тебя Postgres начинает сыпать ошибками. Оказывается, нюансики есть. Да, но опять же, нюансики, когда тебе нужно помнить, что да, у нас там это Kotlin, он там про-входит в Java, в Java два типа, то есть это наследие, надо помнить про наследие, надо помнить, откуда ты, что ты как бы из Java, из Java мира. конвертировал код, вы сами пишите эти мапперы, либо это какие-то там, не знаю, генерированные мапперы, какие-то, не знаю, мапперы-генераторы, которые генерируют там эти DTO или Value эти Обжекты, либо вы руками садитесь прям так, окей, смотри, у нас строчка есть в базе данных, аккуратненько мы ее поля вот в это значение, поля вот в это значение. Ну, в том случае, да, и в целом, опять же... Ты натолкнул меня на идею того, что, наверное, пора решать эту проблему иногда и иначе, но пока, сравнивая сдержки по поддержке какого-то инструмента, который позволил бы эти маппинги писать автоматически или вручную, так выходит, что нам пока что выгоднее это делать. В таком виде, тем более, опять же, у нас есть много взаимодействий с нашими внутренними библиотеками, которые, ну, где-то предоставляются инструменты, где-то таких инструментов пока нет. Ну, в частности для OADB я не встречал, хотя надо пройтись по коллегам, может быть, кто-то этим пользуется. Вот. Но если этого нет, то это хорошая идея Runit. Ну... для такого интересного проекта написать. Тем более, опять же, OIDB стал open-source, и наверняка это будет полезно только внутри Яндекса. А, я еще хотел просто... Ну, мне было интересно, потому что я сам писал, сталкивался с этой проблемой, когда ты... Ну, ты один раз пишешь маппер такой, вау, какой красивый маппер, второй пишешь маппер, третий, после третьего ты такой, блин, почему я опять... Может быть, кто-то решает уже эту проблему, может быть... Ну, просто зачем не писать вот эти вот, опять же, как гетеры, как гетеры-сетеры, вот этот дополнительный код, который вполне можно генерировать. можно генерировать, потом ты когда начинаешь уже генерировать, оказывается что да возможно проще как бы потратить 15 минут на написание этого кода, чем потратить годы на написание этого супер универсального маппера, который будет маппировать вот эти сущности. В общем, это тоже достаточно сложная инженерная и инженерная проблема. Да, ну как мы как раз на той инженеры и мы подобные я понимаю, что у нас внутри это не настолько болит, чтобы этим заниматься То есть, вот, NPE, например, у меня болели Когда откатываешь релиз из-за NPE, каждый раз вспоминаешь, а был бы Kotlin, возможно бы этого не было С мапперами, ну, пока издержки на то, чтобы дописать плюс одну строчку, когда добавилось новое поле Ну, не такие большие Задача интересная и стоит того, чтобы на нее обратили внимание, если таких издержек станет довольно мало. Я хотел еще спросить про аспекты, насчет того, как вы их используете, потому что я вот про маппер, хибернейт и спринг хоть как-то еще, но про аспекты я вообще не работал. Что вы делаете с аспектом? Какое-то логирование, трассировки, что там у вас такое интересное? В основном метрики. В основном метрики, в частности у нас есть... Смотри, у тебя есть, например, самый частый встречающийся кейс, у тебя есть сервисы... Пришел запрос в некоторые endpoint. Этот endpoint дергает один сервис, второй... И дальше у тебя получается такая иерархия вызовов по разным сервисам. Ну, соответственно, мы можем методы определенных сервисов пометить необходимой аннотацией, и эта аннотация завернет внутри аспекты это все в таймер. померяет и автоматически создаст ну ты там в аннотацию прописываешь например название операции вот она создаст метрику и ну у нас внутренний инструмент мониторинга есть который все эти метрики собирает строит тебе красивые графики к этому еще дальше там alerting привязывается в целом стандартный flow и ты можешь посмотреть какая операция, насколько... выбивается насколько она влияет на общий вклад, так далее. Ну, в длительность выполнения того или иного HTTP вызова, например. Вот. Ну, это из такого, что приходит в голову, наверное, первое. Есть еще кейсы, но я сейчас сходу вниз. Интересно. Ну, у вас просто такой очень… Я просто с точки зрения перехода к кодам смотрю, у вас очень, ну, как сказать, очень мало библиотек, которые… Ну, то есть очень тонко написан сервис, то есть вы сами работаете с gdbc, вы используете очень мало мало всяких библиотек, может быть, поэтому тоже при написании нового сервиса не возникает, то есть много проблем типа по переезду, просто потому что и библиотеки, которые вы используете, их достаточно маленькое, ограниченное количество. Либо я не прав, и у вас там помойка из библиотек, но просто это все не видно наружу. Нет, ну, во-первых, уже можно было проследить, что мы следим за тем, чтобы не устраивать как раз-таки помойки из зоопарка, потому что когда это происходит, это сложно и это очень дорого поддерживать. Соответственно, какую-то новую технологию, какой-то новый инструмент мы внедряем, только если в этом есть необходимость. в частности, без деталей, у нас недавно был одно архребил, на котором обсуждали использование Apache Ignite. Вот он у нас нигде не используется, возьми вопрос, а вообще он нужен нам, может быть мы можем имеющимися уже инструментами, другими способами, каким-то образом заместить Apache Ignite чем-то и не выращивать этот запах. Потому что, опять же, еще одна точка интеграции, еще какая-то новая технология, где нужно растить экспертизу. Но при этом важный момент, то что многие инструменты, ну вот я например не работаю с Монгой, в той зоне ответственности, точнее в тех поддоменах, которые находятся в зоне ответственности моей команды, в ней нет необходимости в этом. Ну вот так вот сложилось. Но при этом есть инфраструктурная команда, которая взаимодействует с Монгой. Но как я уже говорил, инфраструктурная команда у нас не пишет на котлени. Как-то изучать вот эту интекрацию не было необходимости особо. Хотя я, насколько помню, тоже исследовал этот момент и с Монгой. видимых причин бояться того, что их упоминания о том, что какие-то супер большие проблемы возникают. Расскажи еще про продуктовую разработку. Ты в самом начале как-то упомянул, что Kotlin именно хорош для продуктовой разработки. Да. Можешь развернуть эту мысль, что ты имеешь в виду в плане, что ты именно продукт, то есть это быстро что? Клепать продукты, быстро делать фичи, либо что ты имеешь под продуктом? то, о чем я говорил про... Котлин чуть-чуть более высокоуровневый, лучше ложиться на какие-то современные паттерны, позволяет проще их имплементировать, проще писать бизнес-логику, а продуктовая разработка это больше не про какие-то технические сложные решения. Андрей, извини, перебью, извини, перебью. Ну а конкретнее, то есть паттерны и ну, например, что? Вот это, чтобы прослушиванием было понятно, это, например, вернуть список объектов. вернуть, добавить, ну то есть какие конкретно паттерны, ну какой-то пример, вот фичи, можно даже взять, например, взять, например, какой-то, например, что-то реализовать вот в голове, например, не кинопоиск, а, допустим, мы что-нибудь вот реализуем с каким-то, не знаю, приложение небольшое, то есть, можно ли ты какому-то практический пример привести? Сложно оторваться от аналогии со своей работой. Сейчас попробую. На самом деле, первое, что мне пришло сейчас в голову, это пример все-таки написания бизнес-логики. Сейчас попытаюсь развернуть мысль, когда у тебя есть... какая-то довольно сложная, запутанная бизнес-логика. Ты собираешь несколько коллекций, каким-то образом их обрабатываешь, потом складываешь это в стрим, потом из этого стрима делаешь коллекцию, обеих-то между собой, делаешь внешний вызов. И вот это вот все начинает превращаться в очень такую неудобную структуру. И несколько раз мы уже сталкивались с тем, что Kotlin позволяет, как раз за счет extension методов, каких-то удобных конструкций в своем Java, Котлин Collection API и Котлин Sequence API, перекладывать данные таким образом, собирать бизнес-логику, что она у тебя выбирается в просто некоторые… в некоторую последовательность делаем это, это, это и это и когда тебе приходят с новой продуктовой фичой просят а мы сможем так сделать? ты открываешь, ты просто смотришь на вот эту последовательность вызовывая, и у тебя немножко уже сраются в памяти, а что мы делаем, что и куда где какие изменения, на каком этапе я вам сказал, некоторые спецификации или такая высокораневая документация Заможности предоставляет язык Не спорю, что это можно сделать на джаве Если заморочиться, можно сделать все что угодно Но... скорее всего это будет значительно сложнее то есть придется потратить просто больше времени на то, чтобы это написать то есть вот это как раз явный пример, где Kotlin выигрывает скорость написания кода и одновременно с этим это будет скорее всего не так красиво Вот такой пример я могу привести. Ну то есть да, я это вижу так, что у нас есть куча каких-то микросервисов, и есть какой-то один микросервис, который агрегатор, то есть какой-то роутер, который ему приходит запрос, там, не знаю, возьмем, например, базу данных фильмов, с чего бы это. В общем, и, например, надо пойти, получить списки каких-то фильмов этого актера, который снимался на фильме, поэтому актеру найти там еще его какие-то, еще фильмы другие. нужно в очень много разных микросервисов пойти и одну большую сущность собрать из кучи походов в разные микросервисы. И код вот этого роутера, вот этого похода в разных микросервисах, он у тебя на джай будет занимать типа три экрана, а на котлене он как бы суть-то такая же, он также выполняет много-много действий, но просто он выглядит гораздо лаконичнее, из-за этого понятнее того, что происходит внутри этого роутера. То есть код выглядит как просто инструкция, которую ты прочитать что ли и понять что сразу где происходит я правильно понимаю ну примерно так Просто у нас были примеры, когда у нас некоторые наборы вот таких вот инструкций там отдельно, мы там берем один стрим, потом его коллектим, потом какие-то манипуляции проваливаем, потом там второй стрим И вот это вот несколько разных разбитых флоу, они за счет котлона И это знаешь, что самое интересное, это происходит самопроизвольно Ты просто пишешь код И как-то тебе автоматом это приходит в голову, что это нужно сделать так и только так. В джаве тебе это не придет в голову, потому что в джаве это неудобно. В джаве тебе приходится какие-то манипуляции дополнительные производить. И вот это как раз вот то, о чем мы говорили, помнишь в самом начале, меняет то, как ты пишешь код, то как ты смотришь на решение задачи, и это уже меняет в целом твои представления разработки о том, что и как ты будешь делать. Классно, классно, как бы, писать, писать на языке, писать код и понимать, что да, ты начинаешь мыслить мысли по-другому, потому что ты начал писать, писать на вот этом именно, и вот этом именно языке. Короче, много, много, много у меня сейчас вопросов, конечно, еще, еще хочется погрузиться, погрузиться в эту, в эту тему. еще разработку чуть развернуть если бы ты например писал вот не знаю решил бы ты другом сделать свой свое какое-то приложение его друг у тебя андроид разработчик или айос разработчик а ты как бы бэкенд разработчик и он такой андрюха кроме ты же бэкенд разработчик давай ты не накидаешь его быстро там на на каком-то языке нам нужно вот смотри фичи какие у нас там список объектов не событий, список вот для онлайн-кинотеатра, показы в кинотеатры. Вот, и на каждом нажать там, детали посмотреть, посмотреть свободные места. Вот, вот если вот такой бы ты бы Kent разрабатывал, с точки зрения Котлена, как бы тут он, ну то есть убыстрил бы твою вот эту продуктовую разработку, можешь ли ты как-то еще подсветить моменты, где здесь, где здесь, убыстрится, убыстрится разработка по сравнению очень-очень классно, что ты на самом деле натолкнул меня к мысли, я думал о ней как раз, хотел ее высказать и потерялась. Собственно, Котлин очень хорош в плане прототипирования, как раз вот этой своей краткостью тем... Например, простая вещь, ее не все любят, мы у себя решили, что мы так делать не будем, но вот для прототипирования мне бывает очень удобно писать весь код или там большую часть кода, или сосредотачивать какие-то отдельные блоки в одном файле. Ну вот, за счет опять же краткости датаклассов, в джаве появились рекорды, но их в сторону можно кинуть несколько камней. они не настолько удобные как датаклассы. Затем... Ну, и вот Котлин, для таких... вот в каких-то очень небольших вещах, но он оказывается проще и удобнее. И у меня есть опыт коллеги, который раньше для прототипирования все время использовал Python, он джавист, но он все время мне говорил, что вот когда мне нужно что-то быстро накидать, вот на джаве неудобно. Ты начинаешь по умолчанию писать правильный джава-код со всеми вот этими... конструкциями, тебе нужно написать какую-то функцию. в процессе прототипирования вкотлене функции это firstclass.citizen спокойно пишешь ее в любом месте где тебе это удобно потом будешь заниматься тем чтобы выделять там утильный... создаешь просто файл утил закидываешь все туда понятно это тоже можно сделать на джаве но там начинается вот это вот какие-то мелочи из разряда написать статическую функцию как это все равно почему вроде вроде мелочи я согласен что это не супер сложные вещи там кто захочет запрототипирует решаемая задача на котле не делать удобно опять же продуктовые разработки ну мне даже недавно была задача которую я просто взял открыл файл и начал в нем творить придумывать она между технической и продуктовой и я просто это все делал в одном файле и вот... мне лично, сугубо мой опыт, мне удобнее так. И я вижу в этом буст, определённо. Ну да, я понимаю, о чём ты говоришь. В некоторых языках, типа там, Go, там тоже, раз ты можешь просто писать функции, типа верх, ну типа, просто пишешь функции в одном файле, всё, всё фигачишь в одном файле. Вот тебе надо сделать, не знаю, какой-то простой, ну не микросерс, но какой-то HTTP endpoint, какой-то бота ты там делаешь для телеграмма. программист открываешь файл называешь омэй не думаю как и пишешь и пишешь там у тебя к объекты которые возвращаются дата дата 2 там до дата 3 лист называется лист но ты как бы пишешь код который в итоге за 15 минут написано он в итоге будет будет работать в джаве ты начинаешь так ага архитектура поехали значит мы тут создаем пакет шконтроллер пакет сервис значит я тут у меня http у меня в контроллере это вызывает серты как бы очень много тратишь времени но вот это вот все кто кого вызывают а какая у нас тут зона ответственности а какие ошибки контракты геттер эсэтер и и получается что с опытом то есть с опытом разработки тебе все сложнее как бы писайте плохой, ну не то что плохой код, а вот такой код прототипный, потому что ты знаешь, что любая шрика сейчас, она потом может выстрелить вот таких языках, которых функции это там, не знаю, вот они там, как они функции, как называется, вот функцию, когда ты можешь писать просто без классно. Это называется first-class citizen, то есть объекты такого типа, это Ну, в случае практически всех языков это присваивать перемены, возвращать из метода, передавать параметры. Ну да, то есть я забыл, фест класс сезона. И в общем, к тому, что это гораздо упрощает жизнь. Конечно, в джаве ты можешь тоже написать мейн класс и написать там, короче, вот такое вот блатниче, но потом ты, рано или поздно, ты захочешь это такое, я же разработчик, мне надо это все, а три фактора. Ты начинаешь все это выносить там, думать о зонах ответственности, разделять это как-то. насколько я понимаю там в го в котлени там в расти просто вот такой такой код быстрый для протетипирования он смотрится гораздо лаконичнее конечно в расти наверное просто ну там компилировать гораздо сложнее на в го в го наверное го свифте не знаю и котлени и питоний наверное смотрится короче это большой это большой конечно плюс джау разработчикам не хватает вот это вот легкости погрязли в интерпрайзе погрязли своей синьорности конечно котлени добавляет это какого-то вновь радости от того, что ты можешь что-то быстренько там написать. Позволь добавить, есть еще такая штука, что это подход. еще и развивается за счет инструментов доступных в котлени тот же Ktor. К сожалению, мы его не используем у себя. Просто так складывается, что у нас очень много инфраструктурного всего написано под... Rest in plate, да, извините. Под Rest in plate и под... веб-флюкс и втаскивать в это еще кто-то, опять же зоопарк из технологий, решили так не делать. Но опять же, ты хочешь написать какой-нибудь микросервис, и я так делал тоже. Просто делаешь рядышком какой-то проект, в городле прописал 2-3 зависимости, буквально за пару минут накидал какую-то логику, написал контроллер. написал пару внешних вызовов и это все опять же все в одном файле очень-очень быстро складывается и задача решается быстро когда мне нужно написать какой-нибудь прототип микросервиса на спринге ты тащишь туда весь спринг со всеми его особенностями и ну как бы никто я думаю не будет спорить что спринг и в плане ты затаскиваешь его со всеми миллиардом зависимости и затаскиваешь его естественно с дербозностью всех вот этих инструментов выбираем что тебе сейчас нужно и для прототипирования KTOR вообще потрясающе. Да, слушатели если вы не знаете по KTOR добавим наверное его в ссылочку подкаста в описании я про него слышал уже много только положительных отзывов и именно вот в таком контексте и слышал про него то что если вы что-то хотите небольшое быстро быстро и накотлене и с htp берите берите кто андрей может приближаемся к двум часам и хотелось оставить оставить время на рубрику потому что она иногда занимает тоже некоторое время вот на рубрику не популярное мнение и я кстати когда-нибудь наверное запишу надо найти джингл для этой рубрики какой-нибудь с этой рубрики, потому что вот ты спросил, насколько она серьезная. Это и для слушателей, она не очень серьезная, это как бы веселая, веселая, веселая рубрика. Она призвана разбавить наш серьезный подкаст какими-то веселыми, новыми, новыми или старыми забытыми идеями. Вот, в общем, для начала я попрошу тебя ответить на предыдущую рубрику, предыдущую гость подкаста, но, к сожалению, я еще то есть мне вот сейчас нужно потратить время чтобы ее открыть, но я попытаюсь пересказать ее своими словами, насколько я ее понял, надеюсь надеюсь ничего не перепутаю. В общем, и такая предыдущий гость выразил вот такое непопулярное мнение он считает, что в нашей IT-индустрии не хватает программисток вот очень... очень... Мы на подкасте заходим на тонкий лед, но я не могу не спросить, что ты считаешь об этом непопулярном мнении. Не, ну это на самом деле, я бы сказал, что вопрос подставы, потому что в наше время отвечать на какие-то такие острые вопросы, как ты сам сказал, ходить по тонкому льду. Ну, лично, мое точка зрения это то, что у инженера или инженерки нет пола, то есть все могут заниматься всем. У меня очень много коллег разработчиков, разработчи, извините, QAF, потрясающих технических специалистов. Я бы сказал, что я буду только рад, если... Это гендерное смещение в сторону мужчин В программировании будет двигаться в сторону Такого... Некоторого выравнивания Насчет... Темы квотирования, допустим Тут уже немножко сложнее, потому что... Как мы видим, майкник все время качается То в одну, то в другую сторону Люди пытаются выровнять какую-то ситуацию, я тут... Я выражу такое свое тоже возможно не очень популярное мнение, потому что есть такой подход, когда говорят о том, что чтобы выразить кого-то в правах, им надо сначала дать прав чуть-чуть больше, чем... чем им надо. С одной стороны, тут можно, наверное, как условно, чем-то скомпенсировать, но, к сожалению, в некоторых ситуациях, и это касается не только темы гендерного равенства в мире программистов, но и многих других, к сожалению, Я за то, чтобы в компаниях... вкладывали, например, в популяризацию программирования среди девочек. Чтобы компании, например, у нас есть в Яндексе отличные спикеры, программисты, женщины. И мне кажется, что путь к изменениям должен лежать через позитивные примеры. Я сейчас скажу очевидные вещи, это не означает, что ты не имеешь права играть с машинками, что тебе не может нравиться инженерные задачи и что это вообще как-то нет, это классно. Каждый человек волен заниматься тем, что ему по душе, и при этом тут корни всех этих проблем, они же системе образования, например. Да. Когда... Опять же, у нас, я не знаю, в России до сих пор живет труд для девочек, труд для мальчиков разделён по... Ну, почему? Как бы... Кому-то нравится готовить. К сожалению, я не могу... Я так понаслышке знаю, как происходят уроки труда в России, потому что я учился в Молдове, и у нас это немного по-другому проходило. Вот. Я, например, вышиванием занимался. Было дело. А-а-а... Да. Но при этом, на самом деле, вот это вот некоторые гендерные давления, оно происходит и в другую сторону. Там многих пальчиков на них, извините, просто давят на то, что ты мужчина, ты должен такую профессию серьезным инженером быть. Не важно, лиши это у тебя душа к этому, не лежи. Поэтому очень хотелось бы в первую очередь увидеть структурные изменения в системе образования. И я очень надеюсь, что как раз-таки крупные компании, в том числе IT-компании будут... Ну и многие делают, собственно, не просто так в России, очень круто развивает рынок онлайн-образования. Ну, опять же, могу говорить про Яндекс. Не на правах рекламы, просто как бы вещи, о которых знаю. У Яндекса есть много классных проектов в виде практикума, в виде Яндекс.Лице, Яндекс.Школы. Да, то есть... Много усилий в этом направлении вкладывается, и я уверен, что через какое-то время эта проблема должна просто исчезнуть как... Все нормально, у программистов нет проблем. Те, кто хочет этим заниматься вне зависимости от пола, занимаются этим. Да, спасибо. Спасибо за такой развернутый ответ. Вопрос действительно важный. Но пойдем дальше. Тогда пришло время для твоего непопулярного мнения. Андрей, если у тебя какое-то непопулярное время, то нужно сказать его вот прямо сейчас. Многие думают, что это очень субъективно, но... Мне кажется, что какие-то очень сложные технологии высоковыруннивые, которые вроде решают какие-то злободневные насущные проблемы. И я понимаю, что это будет очень иронично, учитывая, что я рассказывал очень много времени про Kotlin, который именно этим и занимается. Но такая технология, как GraphQL, приносит больше сложностей и проблем. чем удобство и польза, просто, к сожалению, из-за ее сложности это очень тяжело измерить. Спасибо за непопулярное мнение. Я, в общем, как работают, объясню. Слушайте, я в твиттере постил непопулярное мнение, и мы там потом проводим вопрос и проверяем, типа, действительно это непопулярное мнение, либо популярное. Мы отменяли Котлин, отменяли Джаву, отменяли ГО, в общем. У нас очень много было технологий, которые не популярны. Вот добрались и до GraphQL. Отлично. Выпилим теперь. Выясним, нужен ли GraphQL нам Java разработчиков. Андрей, спасибо тебе большое, что пришел. Спасибо за эту беседу о Kotlin. Мне кажется, получилось очень интересно. Не погружаясь, насколько это возможно в рамках подкаста в технические темы, потому что это все-таки тяжело, размахивая руками, голосом объяснить какие-то концепции. По-моему, получился у нас интересный выпуск. Спасибо тебе большое. В конце, если у тебя есть что-то рассказать, может быть, что-то я у тебя не спросил, может быть, ты хочешь порекламировать какие-то свои, не знаю, какие-то ресурсы, блоги, Twitter, позвать на работу, либо просто что-то пожелать слушателям, то тебе слово. пользоваться кинопоиском и всей экосистемой Яндекс.Плюса. Я знаю, что мы делаем классный продукт и уверен, что те, кто еще не пользуется ими, могут получить огромное удовольствие от того, что присоединяться к нашей большой семье Плюса. хорошо спасибо большое ну что слушатели это подписывайтесь на канал на apple подкастах google подкастах ставьте там звездочки либо либо что там рейтинг потому что я что-то зашел и оказывается оказывается там есть рейтинг и оказывается это важно поэтому если вы дослушали до этого момента поставьте там лайк либо либо либо что там в этом этом этом apple подкастах есть вот и Андрей, спасибо тебе еще раз. Спасибо тебе, Дима. Было очень интересно поговорить, поделиться своим оптом. Ну что ж, с вами был подкаст Java Swag. Всем спасибо. Пока.