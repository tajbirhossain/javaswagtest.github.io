1
00:00:13,774 --> 00:00:19,774
какие фичи языка можно использовать, какие фичи, например, перегрузку операторов мы сразу сказали нет.

2
00:00:24,334 --> 00:00:30,854
ДСЛ или нет. Это дорого, у этого очень высокий риск того, что мы можем навредить.

3
00:00:36,078 --> 00:00:45,174
Всем привет! В биреподкаст Java Swag. С вами я, ведущий Дима Волыхин.
Сегодня у нас в гостях Андрей Корниенков, бэкенд-разработчик.

4
00:00:45,174 --> 00:00:54,214
Андрей, привет. Привет, Дима. Андрей работает над платформой кинопоиска и пишет на Kotlin
и пишет на Kotlin бэкенды, насколько я знаю.

5
00:00:54,214 --> 00:01:01,734
Поэтому, надеюсь, что сегодня мы как раз поговорим про
Kotlin и как писать на нем красиво и правильно, эффективно

6
00:01:01,734 --> 00:01:14,788
разные бэкенды. Конечно же, повезло очень с Андреем, потому что у
о Kotlin, и вот в этом выпуске мы пытаемся как бы покрыть

7
00:01:14,788 --> 00:01:23,028
что-то из Kotlin, но с практической точки зрения.
То есть, как бы сегодня интересует нас такой опыт, как именно

8
00:01:23,028 --> 00:01:32,088
используется Kotlin в обычной такой рутине.
Вот, когда ты открываешь идею, и что ты пишешь, какие

9
00:01:32,088 --> 00:01:39,628
твои рутинные задачи, когда ты пишешь на Kotlin, и чем
они отличаются на Java. Вот, ну и поговорим о всяких около программических

10
00:01:39,628 --> 00:01:51,048
штучках, процессах. процессах продуктовой разработки. Кстати, вот еще я хотел усно сказать, что у нас у
подкаста скоро будет обновиться сайт, но пока он не обновился, подписывайтесь на

11
00:01:51,048 --> 00:02:01,368
Apple подкасты, Google подкасты, на Spotify и в общем да и ставьте там лайки, пишите
свои комментарии, либо пишите комментарии просто в чат в чате или крае.

12
00:02:01,368 --> 00:02:07,568
Так, Андрей, до того как мы начали восхищаться либо ругать о Котлин,

13
00:02:10,768 --> 00:02:20,608
рассказать тебе очень интересно твоё прошлое, как ты пришёл к Котлину?
Да, это довольно такая интересная история.

14
00:02:23,246 --> 00:02:33,286
Ну, как и многие, я с детства вовлекался программированием,
ближе к студенчеству начал пробовать разные языки,

15
00:02:33,286 --> 00:02:47,574
разные направления в разработке. Начинал с фронт-энда, потом немного мобильной разработки,
iOS, затем... Решил попробовать Android разработку, и в моей жизни случилась

16
00:02:47,574 --> 00:03:02,054
Java. Это была любовь, как мне казалось, на всю жизнь, но
не совсем. Из Java Android разработки я как-то так постепенно, аккуратно перетек в Backend.

17
00:03:02,734 --> 00:03:20,814
Просто оказалось, что это ближе ко мне. И в Backend очень долго существовал в мире Java, и ничего не хотелось не видеть, не слышать.
И когда я впервые столкнулся с Котлином, он вызвал у меня, как у некоторых разработчиков такое,

18
00:03:21,694 --> 00:03:32,808
максимальное отторжение, типа, зачем это нужно?
что это такое и вот как раз на своей предыдущей работе столкнулся с кучей разработчиков,

19
00:03:32,808 --> 00:03:48,448
которые типа «ааа, Котлин, это так потрясающе!» и у меня все было такое, о чем вы говорите.
И затем так вышло, что мне все-таки пришлось попробовать и мой мир начал постепенно меняться,

20
00:03:54,608 --> 00:04:09,886
параллельно с этим я попал в кинопоиск. Это тоже довольно интересная история, небольшое лирическое отступление.
Я с детства очень люблю кино, пользовался кинопоиском еще с момента основания сайта,

21
00:04:09,886 --> 00:04:22,006
ну как энциклопедии, и у меня действительно лет в 14 была мечта в него попасть,
и вот так вот сложились обстоятельства. Я прошел собеседование в Яндекс,

22
00:04:22,566 --> 00:04:38,560
удачно попал, и теперь... моя любовь к кино и разработка, и сверх этого наложилось желание продвигать Котлин,
потому что я проникся этим языком в определенный момент.

23
00:04:38,560 --> 00:04:51,120
У меня два вопроса сразу возник. Во-первых, ты сказал, что ты очень любишь кино,
можно ли узнать топ-3 твоих любимых фильма? А второй вопрос, это откуда в компании появляются

24
00:04:51,120 --> 00:05:01,280
вот эти вот тусовки разработчиков, которые такие «А, Котлин, Котлин!» То есть как ты говоришь,
кластеран то есть сначала же сначала же в компании есть какой-то один первого

25
00:05:01,280 --> 00:05:10,120
проходит потом появляется его тут напарник а потом формируется такое целая
целая масса людей кластер кластер разработчиков от которого потом просто

26
00:05:10,120 --> 00:05:19,680
ну никак не не замени не не избежать не избавиться ты заходишь там на кухне у
них там прокотли ну то есть как как как вообще не начать не начать смотреть на

27
00:05:19,680 --> 00:05:29,574
котлин вот это второе Давай, да, закончим с лирическим отступлением про кино.
Вот ты меня спросил, первое, что пришло в голову,

28
00:05:29,574 --> 00:05:41,534
с детства обожаю «Титаник». 6 лет его посмотрел, всё, и этот фильм навсегда запал мне в душу.
Теперь менее популярный вариант «Трасса 60».

29
00:05:42,054 --> 00:05:53,598
И давай что-нибудь свежего за последние полтора-два года,
всё везде и сразу. очень зацепил фильм классный.

30
00:05:53,598 --> 00:06:05,598
Да, если говорить про вот эти вот тусовки разработчиков,
ну, я думаю, сложным будет поспорить, что мы разработчики

31
00:06:05,598 --> 00:06:25,842
люди, увлекающиеся. Нам на... решать задачи, нам нравится вот что-то вот погружаться, ковыряться и
одновременно с этим, ну как, для многих людей важна новизна. И немалая часть...

32
00:06:27,022 --> 00:06:34,862
популярности той или иной технологии, того или иного
языка, она базируется на том, что «о, что-то новенькое,

33
00:06:34,862 --> 00:06:44,102
и что-то решающее твои какие-то текущие проблемы, что-то,
что вот, типа, о, а вот оказывается, можно было так».

34
00:06:44,102 --> 00:06:53,902
И это на самом деле, ну, можем это тебе чуть дальше
сказать, то, как ты… это очень сильно влияет на то,

35
00:06:53,902 --> 00:07:02,976
как ты еще решаешь задачи. с разными технологиями, с разными языками,
ну естественно ты решаешь по-разному и это увлекательно.

36
00:07:02,976 --> 00:07:14,526
Вот. я просто делал делал делал по метке вот про это высказание меняет то как ты
решаешь задачи я думал что ты скажешь меня это как ты мыслишь в том плане что

37
00:07:14,526 --> 00:07:22,686
как ты как ты пишешь код как ты решаешь как ты решаешь задачу как ты
какими структурами ты пользуешься как ты вообще подходишь подходишь к

38
00:07:22,686 --> 00:07:30,606
разработке это кажется что может быть да просто сменил язык ну какая разница
на чем я буду писать типа на го там на на джави там на на росте ну как я

39
00:07:30,606 --> 00:07:40,360
программист как раз там везде есть функции там какие-то объекты разные
разные реализации, но везде как бы код. Мне в конце концов надо написать код, в который,

40
00:07:40,360 --> 00:07:48,440
если мы будем говорить о платформе «Кинопоиск»,
он там на какой-то REST API, графку LLPI, он вернет список JSON, типа какой-то JSON.

41
00:07:48,440 --> 00:07:57,680
Ну, то есть примерно на всех языках код будет выглядеть по-разному.
Какая вообще разница, каких... То есть как это будет реализовывать разработчик.

42
00:07:57,680 --> 00:08:09,880
Кажется, что ведь можно вообще даже нанять любых каких-то разработчиков на нескольких языках.
Но ведь... Но это не так. то, как ты пишешь код, влияет сильно на то, как ты мыслишь,

43
00:08:09,880 --> 00:08:21,800
как ты что-то делаешь первым. То есть даже самая вот эти вот веб-флаксы и вот это
все параллельная потоковая работка ведь это тоже позволяет

44
00:08:21,800 --> 00:08:34,720
думать о коде о каком-то конвейере. То есть это все реализация каких-то таких достаточно
сложных концепций. И с этой точки зрения у Котлина гораздо красивее

45
00:08:34,800 --> 00:08:51,800
концепции. Ну то есть ты, если знаешь, как бы знаешь, как писать код на джаве, ты смотришь на код на Котлин, и он выглядит интересней, он выглядит любопытней.
В него хочется сразу, не знаю, как-то хочется самому, ну то есть эти концепции достаточно красивые. Видно, что писал,

46
00:08:51,800 --> 00:09:00,800
разрабатывал язык какой-то опытный программист, который знает твою боль. И у меня вот такой вопрос, что Котлин может

47
00:09:04,720 --> 00:09:15,240
считаешь ли это правильно начинать например сразу с котлена в том плане что
ну ты начинаешь писать не языке и тогда ну то есть и к тому что ты может быть ты сразу и не оценишь всех тех

48
00:09:15,440 --> 00:09:26,960
преимуществ которые который он дает может быть план вхождения в котлент через джаву это и есть правильный план сначала ты должен немножко
пострадать как там ну я плохо пишу плохо знаю котлена как писать там сингл тон

49
00:09:28,080 --> 00:09:39,840
пострадать то есть ошибиться и потом уже увидеть что а в котленте пример это проблема просто решена на уровне языка не знаю
по-моему решено, но это не точно. Да, насчет синглтонов ты прав, да, она решена.

50
00:09:39,840 --> 00:09:58,720
Ну давай немножко разделим. Про то как обучаться, как там входить, например,
если ты планируешь стать бэкэнд разработчиком, Kotlin так или иначе привязан к GVM.

51
00:10:00,014 --> 00:10:13,214
И тут мне кажется, ну, может быть, альтернативное мнение, но мне кажется, что в любом случае, если ты разрабатываешь под GVM,
пожалуйста, выучи хотя бы базовую джаву, познакомься с ней.

52
00:10:15,854 --> 00:10:31,078
Как минимум, все это так или иначе компилируется в единый байт-код.
В идеале есть еще классно, если... разработчик потратит некоторое время и посмотрит, например, на декомпилированный

53
00:10:31,678 --> 00:10:43,086
ну, на байт-код на байт-код, допустим, Джавового и Котленовского класса
в таких кишочках поковыряться это бывает на самом деле очень интересно.

54
00:10:43,086 --> 00:10:57,886
Но мне кажется, да, очень важно пройти некоторый путь, потому что когда ты
придешь сразу, начнешь писать на Kotlin, вещи которые, типа, работают из коробки и

55
00:10:57,886 --> 00:11:09,966
работают, какие-то концепции, ты можешь не оценить всей прелести языка, но с
другой стороны, когда ты пописал на Java, это оставляет

56
00:11:10,000 --> 00:11:24,920
некоторые след приведу другой пример на котлени это не так явно хотя тоже
очень сильно проявляется но например получается пару дней назад да проходил

57
00:11:24,920 --> 00:11:35,838
хайлоут Я сейчас нахожусь в Белграде, у нас здесь проходил хайлоуд,
и я общался с ГОР-разработчиком, и он рассказывал о том,

58
00:11:35,838 --> 00:11:49,178
как многие джависты, переходя на ГОР, продолжают писать гетеросетеры.
Ну да. Соответственно, ты так или иначе многие парадигмы переносишь из одного языка в другой.

59
00:11:49,178 --> 00:12:02,618
Kotlin всё-таки в каких-то аспектах достаточно сильно отличается.
И язык, который разрабатывался с учётом уже накопленного опыта годами по...

60
00:12:02,618 --> 00:12:15,422
Ну, накопленного опыта в объектно-ориентированном программировании, в паттернах, в каких-то вещах, которые...
используется повсеместно и придуман таким образом чтобы

61
00:12:16,062 --> 00:12:28,162
упростить жизнь разработчика опять же вот как ты привел пример singleton прям супер ярный
делайте обжиг и будет вам singleton все вот и

62
00:12:28,162 --> 00:12:39,742
Java разработчики когда начинает писать на Kotlin все абсолютно
проходят вот этот вот этап в две в три недели в месяц у разных людей по-разному когда они пишут Kotlin код по Java

63
00:12:41,966 --> 00:13:07,006
Проходит какое-то время, концепции укладываются, начинаешь ощущать прелесть от каких-то отдельных конструкций, от инструментов языка, и жизнь начинает играть новыми красками.
В каком-то смысле, мне кажется... прожить новыми красками что котлин спас как бы кризисно но джава уже старый

64
00:13:07,006 --> 00:13:15,846
достаточно язык сколько там 30 лет и он как бы в таком в кризисе среднего
среднего возраста и котлин это какой-то новый новый виток придал

65
00:13:15,846 --> 00:13:25,806
придал развитию развитию джавы что мне кажется что даже джава задышала как-то
более более более легче более лучший глядик на то как хорошо получается

66
00:13:25,806 --> 00:13:43,214
решать эти проблемы у котлина Это очень напоминает, знаешь, такого уже матерого спортсмена.
излете карьеры, который... Вдруг приходит молодой конкурент, и он такой понимает,

67
00:13:43,214 --> 00:13:52,374
а я должен показать ему, что мой опыт никуда не делся,
что мастерство не пропьешь, и я могу перенять у этого

68
00:13:52,374 --> 00:14:03,854
молодого спортсмена какие-то фишки и привнести его в
себя. И на самом деле, Java очень сильно изменилась, начиная

69
00:14:05,808 --> 00:14:22,768
17 тоже движение в project loom я думаю его бы разрабатывали сильно дольше если бы не
существовала коротин потому что вот у такого костика джава сообщество наверняка была просто

70
00:14:22,768 --> 00:14:31,128
двойная мотивация раз ребят в джет брейн смогли мы тоже должны сможем классно а что что если что

71
00:14:35,728 --> 00:14:45,408
которые ты нам включаешь, выключаешь через dash-dash.
И прикольно, что ты... Ну, как будто ты можешь посмотреть, что хорошо работает в Kotlin,

72
00:14:45,408 --> 00:14:58,808
и тебе сразу это делать. И ты сразу знаешь, что это будет использоваться,
что это точно нужно. Нет такого, что мы сделаем фичу, а она там, не знаю, никто ее не заметит.

73
00:14:58,808 --> 00:15:05,648
Ты точно уже знаешь, что будет использоваться, как и что это возможно сделать,
что в bytecode ты можешь просто скомпинировать и посмотреть.

74
00:15:05,648 --> 00:15:16,168
как там сделали ребята из Котлина? А, определенно так.
Собственно, мне кажется, что по большей части, большая

75
00:15:16,168 --> 00:15:26,688
часть джепов, которые там выпускалось, так или иначе
ориентировалась, типа, о, сиолет класса. Ну, понятно, это не только фишка Котлина, это, ну, Котлин

76
00:15:26,688 --> 00:15:32,048
тоже явно напитывался идеями из других современных
языков. Но...

77
00:15:36,750 --> 00:15:52,750
есть с другой стороны какие-то концептуальные вещи, которые заложены в языке,
и Java является заложником подхода поддержки обратной совместимости,

78
00:15:53,750 --> 00:16:06,158
и в итоге мы получаем какие-то вещи, как null-safety ты не сделаешь в Java сейчас, никак.
К сожалению, это просто данность. Либо мы ломаем обратную совместимость,

79
00:16:06,158 --> 00:16:14,638
делаем Java версию 2.0, в которой появляется null safety,
может быть, еще какие-то конструкции, языка которых нет,

80
00:16:14,638 --> 00:16:29,214
но ты в любом случае строишь язык на базе того, что было задумано в каком-то 94-ом.
Я сам не знаю, мне хочется сказать, что 90-91-ые, но кто его знает? В 90-х, скажем так.

81
00:16:29,214 --> 00:16:41,934
Да, да, да. То есть на базе языка, придуманного 30 лет назад.
И если мы посмотрим там, альтернативно, C-sharp ломал обратную совместимость, по-моему, несколько раз.

82
00:16:41,934 --> 00:16:58,206
Swift... Apple просто... Это вообще компания, которой я восхищаюсь в плане того, как она насильно пересаживает весь мир
с устаревших технологий на что-то новое. Мне кажется, что если бы...

83
00:17:00,526 --> 00:17:20,486
Ну, Apple могла рулить всем интернетом, мы бы уже все давно перешли на IPv6,
на HTTP версии 2.0.3.0, недавно вышедшей. То есть компания умеет, как никто, фортить отказ от всего старого и рудиментарного.

84
00:17:20,486 --> 00:17:39,590
В Java в этом есть определенно свои плюсы, и это одна из фичей, которая позволяла Java и позволяет, наверное, до сих пор
продавать как классный язык, но... Мне кажется, что это очень сильно ограничивает.

85
00:17:41,590 --> 00:17:50,350
Хотя многие джависты говорят, null-safety, да ладно, мы там
аннотациями кода разметим. Я, когда исследовал

86
00:17:52,350 --> 00:18:04,670
разницу между Java и Kotlin, наткнулся на то, что есть отдельный целый фреймворк,
который занимается примерно тем же самым, чем занимается Kotlin-компилятор.

87
00:18:05,584 --> 00:18:21,584
подсвечивает на этапе компиляции варнингами все места, где у тебя потенциально может вылететь на alt.
Мне кажется, что если что-то подобное существует, это не просто...

88
00:18:21,584 --> 00:18:33,584
Ну, это огромный фреймворк, я смотрел там документации просто, какое-то бесчётное количество.
Если люди запарились написать документацию там на 50-100 страниц, у них болит.

89
00:18:35,534 --> 00:18:46,974
И это боль не одного разработчика, и... Ты не можешь ее решить в Java иначе.
Кроме как, давайте сломаем обратную совместимость.

90
00:18:46,974 --> 00:18:54,734
Перепишем язык, сделаем какие-то новые фичи, неллбл-типы и так далее.
Вот. Но зачем это делать, если существует Kotlin?

91
00:18:54,734 --> 00:19:05,134
Большой вопрос. Да, я просто... Ты сказал про null-safety, про эти подсветки
идеи, я просто слышал шутку какую-то, что Kotlin вообще

92
00:19:05,134 --> 00:19:15,614
появился как плагин, как плагинк идеи, потому что
подсвечивать все эти ворнинги, тебе нужно написать достаточно

93
00:19:15,614 --> 00:19:23,934
много кода. Конечно, Kotlin не плагинк идеи, но все
равно достаточно зававно. Хотя, вот сейчас в данный

94
00:19:27,568 --> 00:19:32,968
Котлин, как бы, можешь писать в других редакторах, и
наверное на джайве тоже можешь писать в других

95
00:19:32,968 --> 00:19:43,368
редакторах, но мне кажется, Котлин вот как никто привязан
к своему… К идее. К идее, да. То есть в каком-то, в некотором роде это, ну то есть это

96
00:19:43,368 --> 00:19:51,928
не плагинг идеи, но без идеи тебе будет очень тяжело,
почти, почти невозможно выписать, даже, не знаю, на какой-то

97
00:19:51,928 --> 00:20:04,408
быть настолько же продуктивным, как бы, как в идее, даже
на 20%, на 20%. вот это это вот первый первый такой как бы штучка которую хотелось сказать про кодлин а вторая про

98
00:20:04,768 --> 00:20:17,728
на л на л сейфити нет я просто не писал на ку не писал на кодлине и у меня как у джава разработчика сразу
возникают там такие вопросы ну типа ну как и никак нет налов ну типа да ладно ну как нет нал ну наверное

99
00:20:17,968 --> 00:20:27,088
ну что это значит нет налов наверное парочку есть просто просто их меньше но в том плане что
наверняка возникают налы когда-то там npe имеют ну

100
00:20:27,408 --> 00:20:36,328
exception, когда ты там интегрируешь другие библиотеки, ты же все равно работаешь
из Kotlin с какими-то другими библиотеками, он может же возникнуть в другой библиотеке,

101
00:20:36,328 --> 00:20:46,408
он может там, если проверяешь какие-то другие параметры, ну там, на выходе, то они там
где-то внутри может произойти, то есть ты как бы избавился на этом, на уровне того, что ты себя

102
00:20:46,408 --> 00:20:53,808
чувствуешь немножко безопаснее, ну типа чувствуешь себя увереннее, можешь быстрее менять, редактировать

103
00:20:57,328 --> 00:21:06,828
все равно инфраструктура такая, что там он может быть, где-то тебе все равно с
проинтеграцией с другой библиотекой тебе надо будет там какой-нибудь сделать

104
00:21:06,828 --> 00:21:15,528
кетч, не знаю, как котланд, типа кетч с роублой поймать, какое-то там ужасное
исключение, просто потому что библиотека другая, так вот плохо

105
00:21:15,528 --> 00:21:26,568
написано, вот, поэтому ты же полностью его не избавишься, то есть этот рудимент
вот этого вот NPE, оно как бы даже в новый язык, оно все равно так как бы может

106
00:21:27,248 --> 00:21:38,968
и напомнить и напомнить о себе то есть вроде бы как написали язык полностью с нуля а вроде бы
все равно мы как разработчики тебе должны помнить что да да мы им пишем пишем на котлин на библиотеке

107
00:21:38,968 --> 00:21:48,288
у нас наджаи значит они могут выбрасывать всякие нпшки к тому что ты все равно должен быть каким-то
вечным вечным сеньором то есть или ты пишет на котлин тут должен быть сеньор разработчиком каким-то

108
00:21:48,288 --> 00:22:03,448
уже с десятилетним опытом с уставшими грустными глазами и как будто нету нету входа в котлин вот
момента пока ты как бы пока ты не на ну как бы не узнал про все эти ошибки

109
00:22:03,448 --> 00:22:12,848
которые тянет за собой джава как бы на бумаге у нас не должно быть этих
ошибок но как бы они там вроде бы и есть потому что мы все равно помним что

110
00:22:12,848 --> 00:22:23,288
это как бы наследник наследник жала вот и этого два пункта которые хотел
поговорить это то что без как бы жесткая привязанность к де и все равно

111
00:22:27,088 --> 00:22:56,088
Давай начнем с жесткой привязанности к IDE. До недавнего времени это не казалось какой-то большой проблемой, потому что, ну, сугубо личное мнение, продукты от JetBrains потрясающие.
Идея лучшая IDE для Java, которой я пользовался, я думаю, что многие Javist с этим согласятся тут тоже.

112
00:22:56,846 --> 00:23:12,846
Достаточно популярное мнение. Но, ввиду недавних событий, принятых компанией JetBrains
решений не лицензировать свои продукты для компании из России,

113
00:23:12,846 --> 00:23:39,538
у backend-котленистов остается единственная альтернатива, это community-версия идеи.
вызывает опасение, что вдруг JetBrains скажет, что все, вот комьюнити версию идеи нельзя использовать в коммерческой разработке.

114
00:23:41,486 --> 00:23:53,806
Мы не можем этого гарантировать, компания вольна делать со своим продуктом всё что угодно, хотя
по моим сугубо личным ощущениям мне кажется, что этого не должно произойти, но всё может быть, и это определённый риск.

115
00:23:56,406 --> 00:24:16,158
Я, если честно, даже не пробовал в каком-нибудь Visual Studio Code, но вроде как для неё существует...
Котлиновский плагин, но, естественно, разница в удобстве и в уровне поддержки будет существенной.

116
00:24:16,158 --> 00:24:33,638
И, возможно, если такой плагин есть и им кто-то занимается, сейчас российские разработчики
могут очень неплохо в него законтребьютить, чтобы иметь возможность использовать удобные IDE,

117
00:24:38,672 --> 00:24:56,352
Год разрабатывать на старой версии идеи может не очень удобно, но в какой-то момент
станет неудобно, а какие-то фишки ultimate версии все равно нужны. Хотя тоже такое

118
00:24:56,352 --> 00:25:10,302
спорное мнение, потому что я знаю многих коллег, которые пишут в community версии идеи,
им абсолютно всего хватает. Это был первый вопрос, можешь, пожалуйста, напомнить второй?

119
00:25:10,342 --> 00:25:19,822
Да, мне надо перестать задавать по три вопроса одновременно.
Второй вопрос был про... Все-таки мы начали язык с нуля,

120
00:25:19,862 --> 00:25:24,742
написали его полностью с нуля, у нас новый красивый язык,
но мы все равно должны быть в первую очередь,

121
00:25:24,782 --> 00:25:36,822
когда-то давно Java-разработчиками, мы все равно должны помнить о каких-то ошибках,
которые происходят в Java-экосистеме, все равно мы все время идем и смотрим, что там в Java,

122
00:25:37,456 --> 00:25:47,496
что там в джаве то есть ты все время ты как бы модный котлин котлин разработчик но
отбросить вот это вот все старое как бы ты и отбросил у тебя там нал сейф эти много

123
00:25:47,496 --> 00:25:57,656
других плюшек но ты все равно все равно следишь за джавой смотришь что там за
байт коды появляются смотришь какие-то новые ошибки ведь если изменяется что-то

124
00:25:57,656 --> 00:26:05,776
там не знаю я на котлени не пишу но я предполагаю что если у тебя изменяется
какое-то нам поведение там мета новый мета добавляется новый эффективный все

125
00:26:07,376 --> 00:26:20,116
смотреть за за джавы то есть все равно должен быть все как бы в курсе того а что там что там
джави ты все-таки если поскрести котлин разработчика там будет внутри хороший

126
00:26:20,116 --> 00:26:32,436
разработчик и от этого никак никак не избавиться не бывает так не бывает котлин разработчика который
не ха ну как бы так себе как сказать хороший котлин разработчик он хороший джави разработчик не

127
00:26:32,436 --> 00:26:43,716
бывает такого чтобы хороший котлин разработчик не знал ничего от жави не получается полностью
вот прошлое. На самом деле даже с последним вот хороший Kotlin разработчик,

128
00:26:43,716 --> 00:26:55,796
обязательно хороший Java разработчик, зависит от многих факторов и в частности
Kotlin хорош, когда он изобилирован. Понятно, если у тебя есть большое

129
00:26:55,796 --> 00:27:04,116
количество общих границ с Java, если у вас переплетается Java Kotlin код, это

130
00:27:07,216 --> 00:27:17,996
в частности в отношении поддержки null-safety
как ее решаем мы у себя к сожалению единственный выход разметка кода

131
00:27:17,996 --> 00:27:31,316
аннотациями везде на входах, на границах надо постараться это сделать
и на null-null было аннотациями вот

132
00:27:45,870 --> 00:27:47,870
Извините, я немного подвис.

133
00:27:56,814 --> 00:28:07,614
аспект, ты не можешь защититься от внешнего влияния никак.
Уберем джаву, у тебя будет внешнее влияние в виде

134
00:28:07,614 --> 00:28:18,734
смежного микросервиса, который точно также может
выбрасывать какие-то ошибки. То есть в любом случае надо знать, с чем ты взаимодействуешь

135
00:28:18,734 --> 00:28:32,558
и быть к этому готовым. И да, я согласен, опять же это...
те места, где Kotlin граничит с Java. возникают иногда проблемы, их можно

136
00:28:33,558 --> 00:28:49,638
можно минимизировать их влияние, это не нулевая
по стоимости активность, но на мой взгляд это субъективно, к сожалению, это такие уже тонкие вещи, которые очень сложно измерить

137
00:28:50,998 --> 00:28:59,238
очень сложно вообще придумать какую-то метрику, как понять, например
сильно ты выиграл от null safety, то есть или нет, потому что

138
00:28:59,632 --> 00:29:12,652
когда я смотрю какой-нибудь pull request и я там вижу, что
бывают довольно простые pull request, где какой-то новый

139
00:29:12,652 --> 00:29:24,710
параметр нужно протащить через 10 сервисов с одного объекта перекинуть в другой
и ты в этот момент смотришь и такой а будет там нал или нет

140
00:29:24,710 --> 00:29:31,390
залазишь и начинаешь по стеку спускаться вниз
по всей логике и такой ааа тут не будет нала все хорошо

141
00:29:32,590 --> 00:29:46,950
И вместо того, чтобы посмотреть полреквест в Kotlin, типа, а, мы здесь поле прокинули, ага-ага, все понятно,
это занимает там условно 3-5 минут. В Java у меня были случаи, когда я заморачивался, когда у тебя не просто классы,

142
00:29:46,950 --> 00:30:00,270
например, какой-то интерфейс, у него несколько реализаций, каждый еще в какой-то сервис ходит,
и понять, что у тебя там вернется, если это все заранее не было размечено.

143
00:30:02,544 --> 00:30:07,544
На этом приходится тратить очень много времени.
Если Pull Request параллельно смотрит два разработчика,

144
00:30:07,544 --> 00:30:13,544
ты тратишь их с два времени. Если они в одинаковой степени скрупулезности.

145
00:30:16,544 --> 00:30:26,606
Вот это была, кстати, одна из самых больших болей, которая...
Когда я почувствовал, что Kotlin ее решает, жизнь, как я говорил, заиграла новыми красками.

146
00:30:27,726 --> 00:30:43,206
При этом, да, окей, надо потратить какое-то время, разметить весь смежный код.
Но в целом, тоже, лично наш опыт заключается в том, что ты разрабатываешь какой-то микросервис,

147
00:30:43,806 --> 00:30:57,080
большая часть логики взаимодействует, ну, один сервис внутри этого микросервиса взаимодействует с другим.
код взаимодействует с Kotlin кодом и когда ты доходишь до состояния что у тебя там

148
00:30:57,080 --> 00:31:08,100
99 процентов кода либо на Kotlin либо размечено, эта проблема исчезает
практически как класс, потому что ну окей, да ты знаешь что если ты используешь

149
00:31:08,100 --> 00:31:19,920
какую-то библиотечную функцию, то там бы проверить вернется тебе Null или нет, но
это не супер, вот, субъективно не супер часто кейс и при этом его можно

150
00:31:21,040 --> 00:31:32,240
следить. Плюс к этому добавляем, то что многие инструменты, такие как Spring,
размечаются аннотациями. Затем ты можешь начать использовать

151
00:31:32,240 --> 00:31:45,920
котлинобертки над какими-то известными библиотеками,
котлиновские библиотеки, которые тоже очень круто облегчают жизнь. И когда ты

152
00:31:45,920 --> 00:31:59,910
начинаешь жить вот в этом в целом... И почему я сказал изначально не факт, что хороший Kotlin разработчик будет хорошим Java разработчиком,
если ты, например, занимаешься какой-то продуктовой разработкой,

153
00:31:59,910 --> 00:32:11,110
у тебя не очень много задач, где тебе нужно что-то сложное, инфраструктурное.
Опять же, в bytecode не каждый разработчик лезет.

154
00:32:12,110 --> 00:32:23,824
И если твои задачи лежат в этой области, возникает вопрос, зачем тебе вообще...
практически не можешь не контактировать с java.

155
00:32:23,824 --> 00:32:33,904
Пишешь хороший продуктовый код, примерно понимаешь
в каких кодлингах может просесть, и глубоко в детали java тебе

156
00:32:33,904 --> 00:32:52,238
уходить не надо. И на фоне этого ты можешь быть отличным кодлинг-разработчиком.
который пишет отличный продуктовый код, но при этом очень далеким от деталей GVM,

157
00:32:52,238 --> 00:33:03,438
оптимизации и всего вот этого. Ну, примерно так.
Ну, мне очень понравилось, как ты сказал, про типы в том плане, что это...

158
00:33:04,558 --> 00:33:20,198
Ну это правда очень удобно, когда ты просто компилируешь код, и он скомпилировался, и значит работает.
Значит, все хорошо, тебе просто какой-то простой pull request дополнительным параметром нужно проверить,

159
00:33:20,198 --> 00:33:26,318
что просто он как бы скомпилировался, что там нет никаких ошибок,
что программа работает за тебя, тебе не нужно.

160
00:33:26,318 --> 00:33:34,478
В джаве такой же pull request действительно пришлось бы проходить.
Ну, как очень хороший пример про кучу вот этих вызовов, когда у тебя один параметр,

161
00:33:34,512 --> 00:33:42,912
вот он там в контроллер в сервисы сервисов контроллеры с контроллеров сервисов том
другой микросервис у тебя такой pull request на несколько несколько сервисов эти

162
00:33:42,912 --> 00:33:56,938
везде тебе надо пойти подумать так а вот он участвует из джессона вот он сейчас во что
серилизуется так там если там мы передадим на л то там будет на либо 0 а тут может быть на то есть это достаточно много

163
00:33:57,158 --> 00:34:12,258
много работы и много работы и много работы достаточно опытных инженеров которые сидят смотрят на такие
казалось бы пул реквеста уровня добавь добавь одно поле и вот эти вот шутки про то что почему у нас две недели

164
00:34:12,638 --> 00:34:23,872
требует добавить одно поле в какой-нибудь микро микросерверс да ну потому что ты сначала добавят но появились ошибки ты начинаешь откатывать
и в общем и это тяжело. Корлин, конечно, с

165
00:34:23,872 --> 00:34:34,372
своими типами убирает эту проблему. Это определенный плюс. Приятней
становится писать на языке, меньше чувствуешь себя каким-то... Ну то есть

166
00:34:34,372 --> 00:34:45,772
программа работает, человек отдыхает. Это классно. Позволь
перебью тебя. Есть важный момент. Котлин, вот ты когда задавал вопрос,

167
00:34:45,772 --> 00:35:06,214
на который я сейчас отвечал... Котлин не убирает, он значительно снижает издержки по тому,
чтобы найти и предотвратить эту проблему, а также значительно

168
00:35:06,214 --> 00:35:15,006
снижает риски того, что она возникнет, она не исчезает
полностью. потому что она иногда даже может в неявном виде возникнуть в код-линг-коде

169
00:35:15,006 --> 00:35:37,550
у меня такое тоже было но знаешь это как если ты не можешь победить болезнь, да, но как минимум можешь ее окупировать и
снизить шанс того, что у тебя вот хроническая болезнь будет там проявляться раз в месяц или раз в год

170
00:35:38,910 --> 00:35:52,350
стоит ли эти усилия того? как правило стоит, поэтому я смотрю всегда на это так, что да, он не решит эту проблему целиком
но жизнь становится значительно проще. А давай может быть тогда

171
00:35:53,744 --> 00:36:05,704
немножко платформе которую вот и разрабатываешь и не могут рассказать про то то есть
сразу ли она была написана котлени либо вы писали на котлени какие-то несколько

172
00:36:06,184 --> 00:36:16,726
несколько микросервисов и то есть что изначально
послужило... ну я понимаю, что любопытство и свободное время разработчика, скорее всего

173
00:36:16,726 --> 00:36:27,486
ну то есть какие вы основные плюсы извлекли из этого? ведь в это надо все вложиться
то есть в том плане, что одно дело свое, как какой-то микросереж на рабочем ноутбуке

174
00:36:27,486 --> 00:36:38,806
что-то там напилить, а другое дело то, что чтобы в прод его выкатить, тебе там надо
поменять полностью pipeline, ну не полностью, но заметно, короче, это

175
00:36:40,240 --> 00:36:49,540
работа не сложной, но все же еще работа и объяснить почему мы должны попробовать вот этот вот микросервис на
котлени, либо почему у нас вот тут должен добавиться еще

176
00:36:51,400 --> 00:37:04,440
котлин как еще одна зависимость. Можешь про это рассказать, про именно практически стороны того, как вы внедряли, как вы
обосновывали себя, для чего вы вообще это делаете?

177
00:37:09,038 --> 00:37:24,398
Начнем с того, что, да, ты прав, как всегда подобные истории, они начинаются с некоторого энтузиазма.
Я только пришел в Яндекс, начал работать, осваиваться,

178
00:37:26,518 --> 00:37:44,850
повыкся, и в какой-то момент захотелось взять тот опыт, который у меня был до Яндекса, в частности опыт.
работы с Котлином и каким-то образом улучшить жизнь разработчиков внутри БКНД «Кинопоиска».

179
00:37:46,370 --> 00:37:57,910
Началось это все с того, что я абсолютно вероломно...
увидев что ага вот у нас есть такая возможность использовать kotlin сделал

180
00:37:57,910 --> 00:38:09,714
pull request с тестами написанными на kotlin и сказал типа ребята смотрите классная
штука можно хотя бы там начать сейчас писать тесты

181
00:38:10,062 --> 00:38:25,902
все попробуют, потому что тесты писать безопаснее на Kotlin это проще и поддерживает проще
как бы вы хотя бы немножко поймете чем предлестен язык, а потом поймете как он раскрывается уже когда ты пишешь продовый код

182
00:38:28,334 --> 00:38:41,894
все проникнутся вот этим моим энтузиазмом. Чудо не произошло, к сожалению, ну, точнее, нет, не к сожалению,
это на самом деле к счастью, потому что на предыдущей

183
00:38:41,894 --> 00:38:54,454
моей работе было немножко больше свободы в плане
а давайте попробуем что-то еще. Но когда ты разрабатываешь сервис с...

184
00:38:56,782 --> 00:39:09,142
огромной аудитории с очень высокими требованиями к его технической составляющей,
с высокими требованиями к качеству этого сервиса,

185
00:39:09,142 --> 00:39:23,422
ты не можешь позволить себе делать зоопарк с технологией.
Если в каждом микросервисе тут у нас будет одна база данных, там другая, здесь Kotlin, там Java,

186
00:39:23,422 --> 00:39:34,542
тут пришел разработчик с опытом на Go, это все абсолютно невозможно будет поддерживать.
Стоимость такой поддержки кратно возрастает.

187
00:39:34,542 --> 00:39:50,736
Соответственно, мне сразу сказали, что мы поддерживаем твой энтузиазм, это классно,
какую-то технологию вводим, что она нам даст.

188
00:39:50,736 --> 00:40:04,736
Мы зашли на второй круг. Я собрал небольшую презентацию, на которую пригласил всех
разработчиков нашего бэкэнда и показал, посмотрите,

189
00:40:04,736 --> 00:40:18,158
есть Котлин, какой он классный и какие боли он решает.
НПЕ, вербозность Джавы, ну и так далее, так далее.

190
00:40:20,658 --> 00:40:30,558
Почему это нужно было? Как минимум не все разработчики, во-первых, задумываются о том,
а с какими проблемами ты сталкиваешься. Ну, потому что ты живешь в мире Джавы, здесь есть НПЕ.

191
00:40:30,958 --> 00:40:44,302
И иногда, знаешь, как это, наступил на кнопку, уходишь и болит, и болит, ну...
А потом оказывается, а можно достать? и будет хорошо. И иногда стоит на это обратить внимание.

192
00:40:47,374 --> 00:41:02,374
Я рассказал своим коллегам, смотрите, у кого-то был опыт, у кого-то не было совсем, кто-то заинтересовался, у кого-то возник всё ещё тот же вопрос, а зачем нам это нужно, что мы выиграем, потому что так или иначе будут не нулевые расходы,

193
00:41:17,328 --> 00:41:29,426
должен сохраняться один язык. Это легче, это объективно легче и, соответственно,
в существующих микросервисах непонятно писать на Kotlin или писать на Jail.

194
00:41:30,446 --> 00:41:46,526
сервисы, ну не прям чтобы супер часто появляются, ну появляются естественно, но возникло море вопросов
относительно того, зачем это нужно, как внедряться и так далее. И мы решили пойти следующим этапом,

195
00:41:46,526 --> 00:41:54,286
выстроить процесс следующим образом. Значит, я думаю ты знаком с тем, что такое ADR? Лучше расскажи,

196
00:42:00,366 --> 00:42:12,866
Соответственно, это некоторый документ, у которого есть о техническом решении
Архитектурном, но на самом деле его можно применять в целом к любому решению

197
00:42:12,866 --> 00:42:28,866
В чем суть? Ты описываешь какую-то глобальную проблему или задачу, ее мотивацию
И затем проводится анализ плюсов и минусов, вопросов, которые возникают

198
00:42:30,320 --> 00:42:43,440
такое, если кто-то сталкивался опять же с процедурой ArchReview, это очень близкая штука, ну собственно
Architecture Decision Record и в конце должно быть

199
00:42:44,760 --> 00:42:57,620
представлено некоторое решение с мотивацией, что дает такой подход
во-первых, это регламентирует процесс, во-вторых, у тебя появляется

200
00:42:59,054 --> 00:43:13,614
документ, в котором ты проводишь некоторые исследования, и оно задокументировано, и в конце ты принимаешь решение и
фиксируешь, что вот на основе пункта 1, 2, 3 мы решили, что мы будем это делать или не будем это делать.

201
00:43:14,274 --> 00:43:25,114
Что это дает? Даже если ты принял или не принял решение, ты всегда можешь вернуться.
Два года спустя, когда все взводят и скажут, боже, как мы страдаем от этого Котлина,

202
00:43:25,674 --> 00:43:35,848
мы вернемся и скажем, ребята, ну вот мы тогда смотрели на это,
таким образом. И выделили вот такие-такие выгоды и преимущества. И на фоне этого перевесило,

203
00:43:35,848 --> 00:43:48,288
решили, что надо делать, либо не делать. И это очень крутая штука, потому что ты,
например, не приняв некоторые решения, может пройти полгода, вернуться к нему, дописать туда

204
00:43:48,288 --> 00:43:58,568
какие-то изменившиеся обстоятельства, и суперфичавка от линии еще появится,
еще что-то. И ты можешь туда писать, сказать, вот тогда было недостаточно,

205
00:43:58,928 --> 00:44:13,648
Теперь всё, мы готовы. Мы должны попробовать.
Мы пришли к этому моменту, изучили этот документ,

206
00:44:13,648 --> 00:44:24,648
тех лиды, лиды, и приняли решение, что мы можем в
некотором ограниченном режиме, так как опять же,

207
00:44:24,648 --> 00:44:38,922
сервис большой, очень высокая... цена ошибки, просто так бездумно бежать, внедрять во все
сервисы нельзя, мы пошли путем того, что выделили

208
00:44:38,922 --> 00:44:48,062
две команды, которые занимались, в частности моя команда
и еще другая, которые было позволено писать на котлене.

209
00:44:48,062 --> 00:44:56,462
Это был такой эксперимент по его использованию, у
эксперимента был четкий регламент, что можно делать,

210
00:44:57,616 --> 00:45:08,976
какие фичи языка можно использовать, какие фичи, например, перегрузку операторов мы сразу сказали нет,
DSL нет, это дорого, у этого очень

211
00:45:12,056 --> 00:45:14,956
высокий риск того, что мы можем навредить.

212
00:45:19,694 --> 00:45:29,494
Такие инструменты должны использоваться только в тех случаях, когда у тебя есть очень четкая мотивация.
Честно под это я бы проводил тоже отдельное арх-ревью.

213
00:45:29,494 --> 00:45:40,174
Вот мы тут увидели задачу вот такого вида и такого размера.
И давайте мы придумаем под эту задачу некоторые DSL.

214
00:45:40,174 --> 00:45:48,574
Задокументируем, опишем и только тогда будем использовать.
Если вот так вот в ремках эксперимента начать строить свои DSL, то тут и там.

215
00:45:49,648 --> 00:46:00,502
Вот, соответственно, когда мы выделили все вот эти зоны...
поражение, разрешенные и запрещенные фичи, некоторые

216
00:46:00,502 --> 00:46:08,942
регламенты. Мы устроили трехмесячный эксперимент, подписали
на Котлине, вернулись, ну, собирали обратную связь

217
00:46:08,942 --> 00:46:17,622
с командой, с которой не писали на Котлине, с командой,
которые писали на Котлине. Обобщили весь этот опыт, вернулись в ИДА, посмотрели

218
00:46:17,622 --> 00:46:36,216
на те выгоды и недостатки, которые мы изначально
в теории предполагали. практикой и пришли к выводу что да, Kotlin классный язык, у него есть... ну все

219
00:46:36,216 --> 00:46:47,496
преимущества-выгоды о которых мы говорили они подтверждаются либо частично
подтверждаются, например, ну одна из таких часто высказываемых выгод на Kotlin

220
00:46:47,496 --> 00:46:59,478
ты начинаешь писать код быстрее. В целом...
Это интуитивно понятно, потому что код короче, код быстрее.

221
00:46:59,478 --> 00:47:14,382
Это также понятно за счет каких-то более упрощенных конструкций.
но одновременно мы там допустим смотрели что есть исследования в них напрямую Kotlin

222
00:47:14,382 --> 00:47:30,622
в бэкэнд разработки не сравнивался, сравнивался в андроид разработке где понятно у него было
преимущество и еще сравнивались котлина подобные языки ну такого нового поколения условные

223
00:47:31,502 --> 00:47:56,374
Go, Swift, с языками более старыми, и у них было небольшое преимущество в скорости написания кода.
Но такие вещи все равно на практике ты не подтвердишь, потому что тебе нужно посадить двух одинаковых разработчиков с одинаковой задачей, параллельной, и вот сказать, вот теперь ты пиши код на Kotlin, ты пиши код на Java.

224
00:47:56,374 --> 00:48:09,574
И вот тогда можно сравнить, типа вот Kotlin написал там задачу, решил за час 10, Java за час 45.
Хотя, тоже интересный момент, тут небольшое лирическое отступление.

225
00:48:09,574 --> 00:48:21,148
Я тут недавно начал экспериментировать с Copilot.
опять же субъективная штука, но по моим ощущениям Copilot значительно лучше подсказывает для кодлина, чем для джавы

226
00:48:22,988 --> 00:48:42,548
Возможно из-за того, что язык ну в каком-то плане его можно назвать более высокоуровневым, более высокоуровневой конструкции, больше функциональнейшины и за счет этого
вот Copilot видимо легче справляться с таким кодом, писать что-то более осмысленное, чем на джаве

227
00:48:46,894 --> 00:48:56,774
Вот, собственно, вернемся к процессу. После этого мы выделили главную фишку,
про которую я немножко сегодня уже проговорил.

228
00:48:56,774 --> 00:49:06,254
Kotlin максимально хорош для продуктовой разработки.
Когда ты взаимодействуешь с верхнеуровневыми сущностями,

229
00:49:06,254 --> 00:49:18,062
с сервисами, с доменными объектами, с какой-то бизнес-логикой, где тебе нужно
step-by-step описать, делаем это, это, это и это,

230
00:49:20,342 --> 00:49:34,982
с учетом того, что Kotlin позволяет те же extension функции писать,
которые потрясающе круто вписываются в такого рода разработку,

231
00:49:36,582 --> 00:49:52,342
там ощущается густ. Код становится понятнее, интереснее, возникает естественное желание немножко позаниматься творчеством.
Его определенно нужно ограничивать, потому что...

232
00:49:53,422 --> 00:50:07,022
инженеру покуражиться и поделать что-то на свой вкус и цвет, можно всегда из очень хорошего
интересного понятного кода превратить это во что-то, что этот инженер определенно будет

233
00:50:07,022 --> 00:50:21,862
считать красивыми и понятными, но никто больше на свете не поймет. При этом у нас осталась
инфраструктурная часть, платформенная часть, которая больше про низкоуровневые вещи,

234
00:50:23,376 --> 00:50:38,376
Мы решили не пускать Kotlin туда, потому что, во-первых, это некоторые common компоненты,
которыми пользуются во всех наших микросервисах.

235
00:50:38,376 --> 00:50:49,376
И у нас, опять же, нет цели, не все разработчики говорят энтузиазмом, писать на Kotlin,
и у нас нет цели насильно пересадить, все команды должны писать на Kotlin,

236
00:50:53,296 --> 00:51:08,696
нет у нас такого подхода нет есть команды которые мы хотим писать на джабе нам нравится джаба нас
все устраивает и кто готов хочет получать преимущество от котлина пожалуйста берите в частном

237
00:51:08,696 --> 00:51:27,274
у нас так сложилось что это продуктовые команды вот
Но при этом common компоненты пишутся на джаве, потому что когда-нибудь разработчикам нужно опуститься в какой-нибудь common компонент, просто почитать код, что-то дописать.

238
00:51:27,274 --> 00:51:42,774
Оно должно быть на джаве, оно должно быть удобно, универсально для всех, вне зависимости от того, на каком языке ты пишешь.
Единственное, что движемся в сторону того, чтобы чуть упростить жизнь кодлено разработчикам, код надо размечать аннотациями.

239
00:51:44,046 --> 00:51:52,246
Собственно, вот так вот выглядел наш вот этот вот путь.
Я и не представлял во что это превратится, в хорошем

240
00:51:52,246 --> 00:52:00,046
смысле превратится. На самом деле, процесс был очень интересным.
Процесс оказался очень познавательным для...

241
00:52:00,046 --> 00:52:10,926
Ну, для меня лично, потому что очень, ну, естественно,
на каком-то энтузиазме и в свободном времени я очень

242
00:52:10,926 --> 00:52:26,006
много... в разные аспекты Котлина погружался, узнал его значительно лучше, чем знал в тот момент, когда я пришел, сказал всем, а давайте писать на нем
и понимаю, что этот путь его надо было пройти

243
00:52:26,006 --> 00:52:38,006
и что очень важно, мы таким осторожным подходом показали, как мы можем внедрять новые технологии
при этом просчитывать стоимость такого внедрения

244
00:52:39,758 --> 00:52:52,278
потому что опять же, затащить что-то не так сложно, как потом это выпилить
и опять же, когда речь идет о сервисе с большим количеством пользователей

245
00:52:54,198 --> 00:53:08,518
ну, это становится очень дорого Минимизация рисков – это была одна из наших главных целей.
В некоторых моментах, мне кажется, мы даже немножко слишком перестраховались.

246
00:53:08,518 --> 00:53:18,878
Но в итоге получился очень плавный процесс.
Получилось выработать документацию внутреннюю свою,

247
00:53:18,878 --> 00:53:28,598
какие-то практики, которые мы используем и не используем собрать.
На самом деле относительно небольшое количество граблей,

248
00:53:29,232 --> 00:53:42,192
наступили. В основном это были какие-то вещи, которые нужно пережить любому джава-разработчику,
который переходит на Kotlin. Например, узнать, что у аннотаций в Kotlin есть,

249
00:53:42,192 --> 00:54:04,862
назовем это target. В джаве-то у тебя... отдельно поле, отдельно параметр в конструкторе, параметр в сеттере
еще где-нибудь отдельно гетер есть в котлине в датаклассе ты навешиваешь аннотацию и

250
00:54:04,862 --> 00:54:10,862
и ваш вопрос, а на что она у тебя навесится?
и джеристы зачастую даже могут не задуматься

251
00:54:10,862 --> 00:54:23,502
а что? аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа
интересный момент, в который, по-моему, опыты вляпываются все.

252
00:54:25,502 --> 00:54:33,502
И что круто, мы, опять же, ограничили вот эту зону, две команды занимались,
две команды в это вляпались параллельно, а не пять.

253
00:54:35,502 --> 00:54:41,502
Стоимость подобного внедрения стала значительно меньшим.
Сейчас у нас есть на Бординг Гайд, любой, кто хочет...

254
00:54:42,286 --> 00:54:49,606
начать писать на котлени, приходят читать, изучают
те части языка, которые нужно изучить в первую очередь,

255
00:54:49,606 --> 00:54:58,806
потому что мы простым частотным анализом поняли, что вот
это, вот это, вот это мы больше всего используем,

256
00:54:58,806 --> 00:55:06,326
поэтому если ты начинаешь писать на котлени, просто
ознакомься сначала хотя бы с этой частью. В идеале, конечно, прочитать всю документацию, но не

257
00:55:06,326 --> 00:55:23,446
все уляжется в голове, а... так мы хотя бы понимаем, на что особенно нужно обратить внимание.
Вот, наверное, я завершусь с процессом, у тебя возможно возникли какие-то вопросы и буду рад ответить.

258
00:55:24,446 --> 00:55:35,446
Да, у меня на самом деле много вопросов, но я даже не знаю с каких части начать.
Вот мне показалось про измерение скорости, я понимаю, что это там все не точно и, типа, тяжело измерить,

259
00:55:35,446 --> 00:55:50,080
надо найти двух разработчиков одинаковых, одинаковые сервисы, но ведь есть ли разработчики достаточно опытные,
накотлене ну можно же просто типа спросить насколько вы чувствуете себя

260
00:55:50,080 --> 00:55:58,440
быстро не знаю там насколько вы быстро имплементируете вот этот вот сервис вот
такой сервис просто ну типа я к тому что провести опрос опытный джав разработчик

261
00:55:58,440 --> 00:56:13,282
насколько им нравится насколько они чувствуют что они быстрее конечно это
может быть тоже такое обычное, что я чувствую, как я быстр, но на самом деле он там 2 часа сидел, все это реализовывал, но в том плане, что это все равно какая-то метрика

262
00:56:13,982 --> 00:56:29,422
метрика, которая позволяет говорить, что да, вот так те конкретно там 20 человек, 10, которые использовали Kotlin, у которых там есть опыт вот такой
разработки на Java, они чувствуют себя, они чувствуют, что они эффективнее, быстрее, это же тоже позитивные, хорошие

263
00:56:34,576 --> 00:56:48,856
быстрее, эффективней, даже если у них на выходе получается точно такой же продукт,
ну то есть ничего остального не меняется, это все равно хорошая метрика, и вот это тоже можно как

264
00:56:48,856 --> 00:57:01,056
бы померить, не меряя там количество строк-кода, ну то есть не меряя какими-то техническими
средствами, я имею ввиду, запоминая, записывая сколько он там строк написал, а просто провести

265
00:57:04,496 --> 00:57:18,656
как Java разработчик или как кодлевый разработчик, показать им страшный код на Jive, показать им
страшный код на Kotlin и замерить пульс, не знаю что они там, как они чувствуют, когда видят

266
00:57:18,656 --> 00:57:33,576
вот этот код, тяжело ли его ревьюить или нет. Вот про меты измерения я хотел вот это добавить.
Что-то вы как-то еще пробовали измерить эффективность? Ну смотри, во-первых, мы всех, кто писал на

267
00:57:34,416 --> 00:57:49,416
регулярно опрашивали, оценивали степень удовлетворенности.
И также мы исследовали использование Котлена других бизнес-юнитов Яндекса,

268
00:57:49,416 --> 00:58:07,382
потому что мы, к сожалению, не первопроходцы в этом вопросе.
И в целом большая часть там... фидбека, она всегда была на уровне либо очень нравится,

269
00:58:07,382 --> 00:58:19,782
либо просто нравится. Более того, если ты посмотришь рейтинги, которые собирается
Tech Overflow ежегодные, Kotlin стабильно в топе любимых языков.

270
00:58:21,390 --> 00:58:35,170
Разработчики, которые на них пишут, они действительно практически все...
Если не ошибаюсь, так Overflow говорит, что рейтинг удовлетворенности около 70%.

271
00:58:35,530 --> 00:58:53,862
У Java он уровне 30 или 40. То есть более чем в два раза Кротлин превосходит Java.
Но тут есть еще важный момент, что есть обратная сторона медали, есть те, кто Котлин даже не пробовали и не хотят.

272
00:58:54,562 --> 00:59:20,342
И они будут изначально к нему относиться очень скептически.
И тут возникает вопрос как бы как собрать честный фидбэк, потому что у тебя зачастую пользоваться начинают котлином те разработчики у которых там например от Джавы что-то болит, они приходят к котлину типа ооо, жизнь стала лучше.

273
00:59:22,342 --> 00:59:34,674
И в каком-то смысле у тебя получается немножко нерепрезентативная выборка.
В идеале мы таким не занимаемся, у нас свободная компания,

274
00:59:34,674 --> 00:59:45,674
и никого предудительно стуча колокол по столу мы не заставим писать на котлени.
У разработчиков всегда есть выбор.

275
00:59:49,806 --> 00:59:59,806
есть некоторые категории разработчиков, которые относятся к Kotlin скептически,
и они его не пробовали, либо пробовали очень верхнеуровнево.

276
00:59:59,806 --> 01:00:09,806
По собственному поводу скажу, если вы почитали немножко документации
и написали какой-нибудь тестовый класс, и остановились на этом,

277
01:00:09,806 --> 01:00:16,806
вы не поймете всей прелести языка. Вот хотите понять, насколько Kotlin хорош, насколько он вам понравится,

278
01:00:19,822 --> 01:00:29,222
в фичах, возьмите какой-то большой сервис, который у вас есть, и попробуйте его с нуля переписать.
В идеале еще потом отдать котленисту, чтобы он немножко его причесал,

279
01:00:29,222 --> 01:00:39,222
потому что вы все равно напишете его по-котлиновски. И когда вы получите,
просто вот посмотрите и сравните. И если окажется, что...

280
01:00:39,222 --> 01:00:54,642
Вот так. Нет, фу. Ну да, может быть... конкретно вот этому разработчику Котлин не понравится.
Но говорить о том, нравится тебе язык или нет, пока ты до конца его не попробовал,

281
01:00:54,642 --> 01:01:04,822
ну, нельзя. Но одновременно, опять же, есть проблема того, что выборка людей, которым Котлин нравится,
немножко смешана в сторону тех, кто изначально там...

282
01:01:04,822 --> 01:01:19,102
Ну, кого-то, может быть, и принудили, но в целом, большинство людей, которые им пользуются...
к тому чтобы а давай попробуем ну да но это все равно тоже позитивный метрик

283
01:01:19,102 --> 01:01:25,342
в том плане что есть языки программирования которые есть
интузиасты которые хотят попробовать новый язык приходит попробовать новый

284
01:01:25,342 --> 01:01:35,222
язык и такой типа ну да не оправдал ожидание ну котлин получается оправдывает
ожидание до интузиастов до тех кто даже не пробует как он может его

285
01:01:35,222 --> 01:01:48,616
оправдать но те кто приходит туда как бы зачем-то зачем-то ну не известно
тем что они получают получают в итоге это тоже неплохая метрика я хотел еще

286
01:01:48,616 --> 01:01:57,616
андрей спросить про технические небольшие детали ты вот рассказал про
процессное внедрение но это чисто технические я понимаю вы сделал

287
01:01:57,616 --> 01:02:07,656
презентацию ну то есть например кто-то вот и слушатель если нас сейчас слушает
такой так у меня есть компания и в ней вот 4 4 команды я бы очень бы хотел

288
01:02:07,656 --> 01:02:21,774
чтобы хотя бы одна из них желательно моя команда или две команды
написали бы микросервис на Котлени. Хорошо, я понимаю, что мне нужно сделать презентацию. Хорошо, я понимаю, что нужно сделать какой-то unboarding

289
01:02:22,174 --> 01:02:33,214
гайд. Мне как-то нужно предложить это как эксперимент, то есть пройти по твоему пути, как ты это сделал. Но вот
чисто технически, то есть о чем еще стоит подумать в том плане, что ну

290
01:02:33,974 --> 01:02:36,654
достаточно ли просто, знаешь, типа в идее скачать

291
01:02:43,568 --> 01:02:56,054
До свидания! Что технически, какие изменения, каким изменениям нужно быть готовы технически?
Как должна быть готова ваша платформа, если у вас уже какие-то там есть микросервисы?

292
01:02:56,054 --> 01:03:07,134
Может, они собираются Gradle, может быть, Mavin, может быть, это куда-то там, если у вас не Spring.
То есть, есть ли какие-то технические детали, которые стоит проверить у себя в компании?

293
01:03:07,134 --> 01:03:14,734
Типа, можешь ли ты хотя бы заикнуться о том, чтобы перейти на Kotlin?
Может быть, еще до этого момента нужно как-то, не знаю.

294
01:03:14,768 --> 01:03:23,248
там, какую-то, какую-то соломку подстелите, какие-то другие
сервисы, подготовить, подготовить инфраструктуру для этого.

295
01:03:23,248 --> 01:03:37,968
Вот что бы ты мог посоветовать? Смотри, тут будет интересный момент, по крайней мере,
по части бэкэнда, опыт Яндекса немножко отличается от

296
01:03:37,968 --> 01:03:55,598
опыта других компаний. даже сборку проектов осуществляем собственными инструментами.
Ни Грейдлом, ни Майвеном. У нас есть отдельный инструмент под названием Ямэйк.

297
01:03:55,598 --> 01:04:12,374
Он изначально создавался для плюсов, но в итоге, потому что Симэйк не удовлетворял потребностям Яндекса.
соответственно мы живем еще в монорепозитории там

298
01:04:12,374 --> 01:04:26,254
наслаивается из-за этого целый ворох проблем которые вот этим инструментом
решаются и поэтому инфраструктурно вот в отношении

299
01:04:26,254 --> 01:04:36,446
gridla например мне сложно подсказать я знаю что есть плагин что
все это довольно легко между собой интегрируется

300
01:04:36,446 --> 01:04:58,846
и когда я играл с этим самостоятельно честно, я даже не вспомню каких-то технических проблем, которые возникали
и тут вернусь опять же к опыту Яндекса дело в том, что у нас

301
01:05:00,942 --> 01:05:14,422
не только внутри команды подход, но и в целом внутри компании подход, что если мы в нашем монорепозитории
разрешаем некоторый язык, на данный момент, если я не ошибаюсь, на бэкэнде разрешены плюсы

302
01:05:14,422 --> 01:05:36,526
Java, Kotlin, Go, и Python. Вот, пять языков. Соответственно, Kotlin проходил точно так же внутри Яндекса процесс
по которому его одобряли или нет. Потому что опять же, ну как?

303
01:05:36,686 --> 01:05:47,966
компания сложные технические решения мы должны это все валидировать и в целом
вся инфраструктура у нас внутри она уже была на момент внедрения подготовлена

304
01:05:47,966 --> 01:05:58,686
по сути нам нужно было просто в специально конфигурационном файле
прописать что вот а вот теперь у нас есть Kotlin и если говорить про этот

305
01:05:58,686 --> 01:06:10,306
процесс я он произошел до того как я пришел в яндекс но я
интересовался как вообще пришли, почему приняли,

306
01:06:10,306 --> 01:06:23,606
какие были технические сложности. И в целом один из очень важных пунктов, почему Котлин
был разрешен, это пункт о том, что внедрение с инфраструктурным

307
01:06:23,606 --> 01:06:49,486
числе имеет очень низкую стоимость. Внедрить условный C-шар было бы несоразмерно дороже, потребовало бы значительно больше усилий.
Kotlin придуман таким образом, чтобы легко вплетаться в GVM платформу и в целом это же бренд.

308
01:06:52,238 --> 01:07:14,958
Возможно, какие-то технические проблемы могут в каких-то ситуациях возникать, но на нашем стеке Spring Boot, Postgres...
мы не отлавливаем каких-то серьезных проблем с тем, чтобы это все между собой интегрировать.

309
01:07:19,278 --> 01:07:33,726
Ну, не могу сказать, что... Нет, окей, ладно, извини.
Мне вот сейчас в голову ничего такого не приходит, что где бы подстелить соломки инфраструктурно и чего стоит опасаться.

310
01:07:33,726 --> 01:07:51,726
Ну, то есть, давай тогда еще как-то для слушати упростим, то есть, анкету придумаем.
То есть, я так понимаю, что тебе... Неважно, чем вы собираете, у вас там должны внутри Мавина и Грейдла там какой-то котлин-компилятор, который соберет ваш котлин-кот со всеми джарками в джарник.

311
01:07:53,680 --> 01:08:02,080
Важная штука это, кстати, вещь, которой мы занимались...
Вот мне сейчас только в голову пришло, извини.

312
01:08:02,080 --> 01:08:10,080
Собственно, когда мы писали наш ADR, был важный момент.
Мы собрали весь набор технологий, которые мы используем.

313
01:08:11,280 --> 01:08:27,998
Опять же, Spring, Hibernate, GeoOc и так далее.
Все-все-все-все. Мы... собрали проверили что в целом если мы заменим

314
01:08:28,518 --> 01:08:37,654
джаву целиком котленом, что у нас не отвалятся аспекты,
что у нас будут все наши внутренние инструменты

315
01:08:37,654 --> 01:08:48,574
работать. То есть, пока резюме с поиском того, как это работает в
индустрии, с премьерами, с плагинами, ну, например,

316
01:08:48,574 --> 01:08:55,814
там Jackson, да, по Jackson есть отдельный плагин.
Все, мы пришли, посмотрели, подсветили, кстати, что

317
01:08:55,814 --> 01:09:06,548
у Jackson плагина довольно большое количество открытых
Но приедли к коллегам из других бизнес-винтеров Яндекса,

318
01:09:06,548 --> 01:09:16,888
поспрашивали, ребят сказали, да вот были такие-такие
проблемы, взяли, использовали Jackson-Cotton module, все, все

319
01:09:16,888 --> 01:09:33,238
заработало, проблемы ушли. Мы поняли, что даже если эти ИС часы открыты, очень
такие специфичные корнер-кейсы, и 99%... наших рабочих потребностей скорее всего этим модулем закроется

320
01:09:34,758 --> 01:09:43,838
что бы я подсоветовал, определенно составьте список того, чем вы пользуетесь
потому что наверняка есть какие-то вещи которые не умеют

321
01:09:43,838 --> 01:10:06,462
и либо вы не найдете подтверждений например
есть такой инструмент, как Netflix Hollow Я не нашел ни одного подтверждения о том, что Netflix Hollow генерирует некоторое количество объектов

322
01:10:06,462 --> 01:10:25,118
и, соответственно, я не нашел подтверждения, что у тебя есть джавовая модель, а затем он строит разные проксиклассы и еще что-то для...
для своей внутренней работы и я не нашел подтверждения того, что этот генератор будет работать как надо

323
01:10:25,118 --> 01:10:38,358
переписал с Джавына Котлин, запустил генератор, увидел, что сгенерировалось все равно то же самое
поискал какие-то корнер-кейсы, например, вложенные коллекции, массивы, еще что-то

324
01:10:38,358 --> 01:10:44,758
то есть не просто объект с тремя полями indowel и string

325
01:10:47,952 --> 01:10:56,712
проблем не возникнет. У нас появился такой опыт.
Поэтому, да, исследовать и ради чего стоит писать

326
01:10:56,712 --> 01:10:58,112
идеару, это по-любому стоит.

327
01:11:07,918 --> 01:11:14,638
Кстати, да, это очень хорошо, во-первых. Я пошел гуглить, что такое Netflix-Holo.
Что такое Netflix-Holo? Может быть, тендрия скажешь?

328
01:11:14,638 --> 01:11:30,038
Сейчас попробую преслоконично это описать. Это такой фрейморк, библиотека,
который позволяет тебе некоторые довольно массивные объемы данных

329
01:11:30,038 --> 01:11:47,526
преобразовывать в такие... здоровые бинарники, которые загружаются на сервер
блин, извини, пожалуйста, давай это, я попробую

330
01:11:48,878 --> 01:11:55,498
Ну да, мы может тогда поговорим о чём-нибудь другом, а ты...
Ну то есть либо ссылочку хотя бы на этот проект приложим,

331
01:11:55,518 --> 01:12:02,238
либо просто ещё тогда к этому вернёмся, либо ещё раз...
Я просто вот такого лаконичного описания у меня в голову не складывается,

332
01:12:02,258 --> 01:12:08,438
я сейчас буду как-то кастрями объяснять, как это работает.
Ну в общем тогда слушатели, мы приложим ссылочку,

333
01:12:08,458 --> 01:12:16,178
описание на этот проект, просто я не слышал никогда про него.
Вот, вернёмся к тому про список технологий, которого используете.

334
01:12:16,198 --> 01:12:28,752
Это вообще очень хорошая идея, даже если вы не собираетесь переходить на котлин соберите инвентарь вашего вашего
проекта всех библиотек, которые вы используете и это не не значит что у вас

335
01:12:28,752 --> 01:12:38,898
вот не знаю можно это сказать вы кто-то слышит а у меня есть там мавен вот этот
биль bill of materials вот это бом или бом там и так все есть версии но

336
01:12:39,374 --> 01:12:56,074
Нет, это с одной стороны то, с другой стороны это всё-таки то, как собирается ваш проект.
Это несёт какую-то другую цель. Знать о том, какие вы библиотеки используете вообще для какого-то вашего первого архитектур-документа.

337
01:12:56,074 --> 01:13:09,034
Просто со списком библиотека, которые вы используете. Почему вы их используете? Почему именно они? Почему не какие-то другие?
Потому что вы не сможете никуда переехать, просто не зная вообще...

338
01:13:09,678 --> 01:13:21,758
Такие, конечно, аналогии дурацкие, но вы не сможете переехать, не зная, что вам нужно перевести.
Для начала нужно составить список тех, о которых вам нужно перевести, чтобы даже проверить,

339
01:13:21,758 --> 01:13:34,998
вообще, есть ли под это какие-то Kotlin библиотеки, поддерживается ли это Kotlin.
И вообще, может быть, если вы проведете эту инвентаризацию, окажется, что многие библиотеки у вас не используются.

340
01:13:34,998 --> 01:13:52,632
Это хорошая работа, ее можно делать. каждую неделю, каждый месяц, просто чистить свои джао-проекты от ненужных завистий.
Хотел отметить важный момент, что когда производится анализ этих технологий,

341
01:13:52,632 --> 01:14:06,632
больше всего, технологий инструментов больше всего, стоит обратить внимание на все,
что связано с кодой генерации, потому что если у вас какой-то инструмент создает проксиклассы...

342
01:14:07,662 --> 01:14:18,022
А в Kotlin мы знаем, что все классы по умолчанию Final
нужно либо пометить их в аннотации Open, либо использовать тот же Kotlin AllOpen плагин.

343
01:14:21,182 --> 01:14:39,222
И опять же стоит понимать, что... Kotlin это отдельный язык и ваш инструмент кода генерации может быть не готов взаимодействовать с какими-то особенностями Kotlin
хоть он и компилируется в тот же самый bytecode

344
01:14:40,262 --> 01:14:51,522
пока я не сталкивался лично с какими-то проблемами
хотя точно знаю что не все вот в Aspect-G том же не абсолютно все

345
01:14:54,158 --> 01:15:08,158
возможности использования аспектов доступные в джаве, доступные и в котлене, например.
Я точно сейчас не вспомню какие конкретно, но можно посмотреть, почитать, на эту тему есть треды.

346
01:15:10,158 --> 01:15:18,838
и много-много обсуждений, но пока не полностью решена эта задача.
Мне кажется, что ты, когда перечислял еще просто стэк такой,

347
01:15:18,918 --> 01:15:26,318
на который вы переводили на Котлин, мне кажется, что он очень...
То есть ты назвал буквально там, я уверен, что больше всякого там еще,

348
01:15:26,398 --> 01:15:36,038
но основные такие строительные блоки микросерфи —
это вот Spring, Hibernate, Aspect и еще какие-то дополнительные.

349
01:15:36,118 --> 01:15:46,112
Просто к тому, что, наверное, стоит проверить Spring поделки.
поддерживает ли он Котлин? поддерживает я думаю, что вот эту часть

350
01:15:46,112 --> 01:15:54,112
можно даже не тратить время Спринг однозначно поддерживает
на уровне пивота который заявляет, если не ошибаюсь

351
01:15:54,112 --> 01:16:16,186
в четвертой или пятой версии у них очень много работы проделано
в этом направлении Ну а вот Hibernate, во-первых, расскажи, насколько вы используете, насколько вы серьезно используете Hibernate для доступа к базе, либо вы используете просто как матнинг, как вы его используете, расскажи.

352
01:16:16,186 --> 01:16:35,934
На самом деле я его исследовал, потому что он используется в нашей ruktury, но...
Но по большей части, если немножко заходить на детали того, как мы реализуем свои сервисы,

353
01:16:35,934 --> 01:16:53,934
у нас очень много, во-первых, используется наша уже не внутренняя, уже опенсорсная база данных у IDV.
Она решает... ну, это нерелационная база данных, соответственно...

354
01:16:54,894 --> 01:17:07,834
решаем ну некоторые другой класс задач вот а с постгрессом так вот исторически
сложилось что хайбер нейтом мы не пользуемся используем gdb сидим

355
01:17:07,834 --> 01:17:24,614
template и напрямую вот но кстати даже там возник однажды очень интересный момент
потому что ну кто писал мапперы для gdb си когда происходит

356
01:17:24,848 --> 01:17:50,254
извлечения объектов. мы указываем тип и дело в том, что в Kotlin int это один-единый тип, то есть нет разделения, такого явного разделения, как в Java на примитив и boxed class объект.

357
01:18:00,208 --> 01:18:11,808
но null, то зачем нам здесь объект, мы можем использовать примитив, если у тебя
null был поле, то здесь, пожалуйста, объект используй. Вот, и одна из особенностей,

358
01:18:11,808 --> 01:18:29,490
которая возникла в какой-то момент, что оказывается при написании там int.class
в Kotlin есть возможность именно вернуть этот...

359
01:18:29,806 --> 01:18:36,606
Когда ты так делаешь, тебе возвращается котленовский класс
И затем из-под него можно вытащить джавовый

360
01:18:36,606 --> 01:18:59,058
Я так очень объяснил И суть в том, что для примитивов есть возможность указать конкретно, что здесь ты ожидаешь, что все-таки вытащится int.class или integer.class
И вот лично я вот вляпывался в эту проблему, что...

361
01:18:59,214 --> 01:19:08,214
у меня почему-то в какой-то момент вроде простой код, маппер, что там, что там такого,
ты его конвертируешь в Kotlin и у тебя Postgres начинает сыпать ошибками.

362
01:19:08,214 --> 01:19:21,334
Оказывается, нюансики есть. Да, но опять же, нюансики, когда тебе нужно помнить, что да, у нас там это Kotlin,
он там про-входит в Java, в Java два типа, то есть это наследие, надо помнить про наследие,

363
01:19:21,334 --> 01:19:26,094
надо помнить, откуда ты, что ты как бы из Java, из Java мира.

364
01:19:29,168 --> 01:19:36,928
конвертировал код, вы сами пишите эти мапперы, либо это какие-то там, не знаю,
генерированные мапперы, какие-то, не знаю, мапперы-генераторы, которые генерируют

365
01:19:36,928 --> 01:19:48,168
там эти DTO или Value эти Обжекты, либо вы руками садитесь прям так, окей, смотри, у
нас строчка есть в базе данных, аккуратненько мы ее поля вот в это значение, поля вот в это значение.

366
01:19:48,168 --> 01:20:03,750
Ну, в том случае, да, и в целом, опять же...
Ты натолкнул меня на идею того, что, наверное, пора решать эту проблему иногда и иначе,

367
01:20:03,750 --> 01:20:14,830
но пока, сравнивая сдержки по поддержке какого-то инструмента,
который позволил бы эти маппинги писать автоматически или вручную,

368
01:20:14,830 --> 01:20:25,034
так выходит, что нам пока что выгоднее это делать.
В таком виде, тем более, опять же, у нас есть много взаимодействий с нашими внутренними библиотеками,

369
01:20:25,034 --> 01:20:38,894
которые, ну, где-то предоставляются инструменты, где-то таких инструментов пока нет.
Ну, в частности для OADB я не встречал, хотя надо пройтись по коллегам, может быть, кто-то этим пользуется.

370
01:20:38,894 --> 01:20:51,534
Вот. Но если этого нет, то это хорошая идея Runit. Ну...
для такого интересного проекта написать. Тем более, опять же, OIDB стал open-source,

371
01:20:51,534 --> 01:21:01,206
и наверняка это будет полезно только внутри Яндекса.
А, я еще хотел просто... Ну, мне было интересно, потому что я сам писал, сталкивался с этой проблемой, когда ты...

372
01:21:01,206 --> 01:21:20,206
Ну, ты один раз пишешь маппер такой, вау, какой красивый маппер, второй пишешь маппер, третий, после третьего ты такой, блин, почему я опять...
Может быть, кто-то решает уже эту проблему, может быть... Ну, просто зачем не писать вот эти вот, опять же, как гетеры, как гетеры-сетеры, вот этот дополнительный код, который вполне можно генерировать.

373
01:21:26,160 --> 01:21:38,160
можно генерировать, потом ты когда начинаешь уже генерировать, оказывается что да возможно проще
как бы потратить 15 минут на написание этого кода, чем потратить годы на написание этого супер

374
01:21:38,160 --> 01:21:50,800
универсального маппера, который будет маппировать вот эти сущности. В общем, это тоже достаточно
сложная инженерная и инженерная проблема. Да, ну как мы как раз на той инженеры и мы подобные

375
01:21:56,080 --> 01:22:05,760
я понимаю, что у нас внутри это не настолько болит, чтобы этим заниматься
То есть, вот, NPE, например, у меня болели

376
01:22:07,240 --> 01:22:20,800
Когда откатываешь релиз из-за NPE, каждый раз вспоминаешь, а был бы Kotlin, возможно бы этого не было
С мапперами, ну, пока издержки на то, чтобы дописать плюс одну строчку, когда добавилось новое поле

377
01:22:21,560 --> 01:22:42,158
Ну, не такие большие Задача интересная и стоит того, чтобы на нее обратили внимание, если таких издержек станет довольно мало.
Я хотел еще спросить про аспекты, насчет того, как вы их используете, потому что я вот про

378
01:22:42,158 --> 01:22:54,678
маппер, хибернейт и спринг хоть как-то еще, но про аспекты я вообще не работал. Что вы делаете с аспектом?
Какое-то логирование, трассировки, что там у вас такое интересное? В основном метрики.

379
01:22:56,718 --> 01:23:06,018
В основном метрики, в частности у нас есть...
Смотри, у тебя есть, например, самый частый встречающийся кейс,

380
01:23:06,018 --> 01:23:18,438
у тебя есть сервисы... Пришел запрос в некоторые endpoint.
Этот endpoint дергает один сервис, второй...

381
01:23:18,438 --> 01:23:30,734
И дальше у тебя получается такая иерархия вызовов по разным сервисам.
Ну, соответственно, мы можем методы определенных сервисов пометить необходимой аннотацией,

382
01:23:30,734 --> 01:23:46,526
и эта аннотация завернет внутри аспекты это все в таймер.
померяет и автоматически создаст ну ты там в аннотацию прописываешь

383
01:23:46,526 --> 01:23:56,526
например название операции вот она создаст метрику
и ну у нас внутренний инструмент мониторинга есть

384
01:23:56,526 --> 01:24:05,526
который все эти метрики собирает строит тебе красивые графики
к этому еще дальше там alerting привязывается

385
01:24:05,526 --> 01:24:20,334
в целом стандартный flow и ты можешь посмотреть
какая операция, насколько... выбивается насколько она влияет на общий вклад, так

386
01:24:20,334 --> 01:24:33,094
далее. Ну, в длительность выполнения того или иного HTTP вызова,
например. Вот. Ну, это из такого, что приходит в голову, наверное, первое.

387
01:24:33,094 --> 01:24:39,574
Есть еще кейсы, но я сейчас сходу вниз. Интересно.
Ну, у вас просто такой очень… Я просто с точки зрения

388
01:24:39,574 --> 01:24:45,294
перехода к кодам смотрю, у вас очень, ну, как сказать,
очень мало библиотек, которые… Ну, то есть очень

389
01:24:45,328 --> 01:24:59,326
тонко написан сервис, то есть вы сами работаете с gdbc, вы используете очень мало
мало всяких библиотек, может быть, поэтому тоже при написании нового сервиса не возникает,

390
01:24:59,326 --> 01:25:10,366
то есть много проблем типа по переезду, просто потому что и библиотеки, которые вы используете,
их достаточно маленькое, ограниченное количество. Либо я не прав, и у вас там помойка из библиотек,

391
01:25:10,366 --> 01:25:21,846
но просто это все не видно наружу. Нет, ну, во-первых, уже можно было проследить,
что мы следим за тем, чтобы не устраивать как раз-таки помойки из зоопарка, потому

392
01:25:22,000 --> 01:25:36,480
что когда это происходит, это сложно и это очень дорого поддерживать. Соответственно, какую-то новую технологию,
какой-то новый инструмент мы внедряем, только если в этом есть необходимость.

393
01:25:38,958 --> 01:25:46,758
в частности, без деталей, у нас недавно был
одно архребил, на котором обсуждали использование Apache Ignite.

394
01:25:46,758 --> 01:25:55,758
Вот он у нас нигде не используется, возьми вопрос, а вообще он нужен нам,
может быть мы можем имеющимися уже инструментами,

395
01:25:55,758 --> 01:26:05,558
другими способами, каким-то образом заместить Apache Ignite чем-то и не выращивать этот запах.
Потому что, опять же, еще одна точка интеграции,

396
01:26:05,558 --> 01:26:27,712
еще какая-то новая технология, где нужно растить экспертизу. Но при этом важный момент, то что многие инструменты,
ну вот я например не работаю с Монгой, в той зоне ответственности, точнее в тех поддоменах,

397
01:26:27,712 --> 01:26:43,478
которые находятся в зоне ответственности моей команды, в ней нет необходимости в этом.
Ну вот так вот сложилось. Но при этом есть инфраструктурная команда, которая взаимодействует

398
01:26:43,478 --> 01:26:53,678
с Монгой. Но как я уже говорил, инфраструктурная команда у нас не пишет на котлени.
Как-то изучать вот эту интекрацию не было необходимости особо.

399
01:26:53,678 --> 01:27:07,270
Хотя я, насколько помню, тоже исследовал этот момент
и с Монгой. видимых причин бояться того, что их упоминания о том, что какие-то супер большие проблемы возникают.

400
01:27:07,270 --> 01:27:25,270
Расскажи еще про продуктовую разработку. Ты в самом начале как-то упомянул, что Kotlin именно хорош для продуктовой разработки.
Да. Можешь развернуть эту мысль, что ты имеешь в виду в плане, что ты именно продукт, то есть это быстро что?

401
01:27:25,270 --> 01:27:38,566
Клепать продукты, быстро делать фичи, либо что ты имеешь под продуктом?
то, о чем я говорил про... Котлин чуть-чуть более высокоуровневый,

402
01:27:38,566 --> 01:27:49,446
лучше ложиться на какие-то современные паттерны,
позволяет проще их имплементировать, проще писать бизнес-логику, а продуктовая разработка

403
01:27:49,446 --> 01:27:59,886
это больше не про какие-то технические сложные решения.
Андрей, извини, перебью, извини, перебью. Ну а конкретнее, то есть паттерны и ну, например, что?

404
01:27:59,886 --> 01:28:12,400
Вот это, чтобы прослушиванием было понятно,
это, например, вернуть список объектов. вернуть, добавить, ну то есть какие конкретно паттерны, ну какой-то пример, вот фичи, можно даже взять, например,

405
01:28:12,800 --> 01:28:25,840
взять, например, какой-то, например, что-то реализовать вот в голове, например, не кинопоиск, а, допустим, мы что-нибудь вот
реализуем с каким-то, не знаю, приложение небольшое, то есть, можно ли ты какому-то практический пример привести?

406
01:28:26,240 --> 01:28:32,120
Сложно оторваться от аналогии со своей работой. Сейчас попробую.

407
01:28:37,454 --> 01:28:55,410
На самом деле, первое, что мне пришло сейчас в голову, это пример
все-таки написания бизнес-логики. Сейчас попытаюсь развернуть мысль, когда у тебя есть...

408
01:28:56,494 --> 01:29:07,494
какая-то довольно сложная, запутанная бизнес-логика.
Ты собираешь несколько коллекций, каким-то образом их обрабатываешь,

409
01:29:07,494 --> 01:29:14,494
потом складываешь это в стрим, потом из этого стрима делаешь коллекцию,
обеих-то между собой, делаешь внешний вызов.

410
01:29:14,494 --> 01:29:22,494
И вот это вот все начинает превращаться в очень такую неудобную структуру.
И несколько раз мы уже сталкивались с тем, что Kotlin позволяет,

411
01:29:22,494 --> 01:29:37,448
как раз за счет extension методов, каких-то удобных конструкций в своем Java,
Котлин Collection API и Котлин Sequence API,

412
01:29:37,448 --> 01:29:53,448
перекладывать данные таким образом, собирать бизнес-логику,
что она у тебя выбирается в просто некоторые…

413
01:29:54,702 --> 01:30:04,482
в некоторую последовательность делаем это, это, это и это
и когда тебе приходят с новой продуктовой фичой

414
01:30:04,482 --> 01:30:18,902
просят а мы сможем так сделать? ты открываешь, ты просто смотришь на вот эту последовательность
вызовывая, и у тебя немножко уже сраются в памяти, а что мы делаем, что и куда

415
01:30:18,902 --> 01:30:35,656
где какие изменения, на каком этапе я вам сказал, некоторые спецификации или такая высокораневая документация
Заможности предоставляет язык Не спорю, что это можно сделать на джаве

416
01:30:35,656 --> 01:30:45,702
Если заморочиться, можно сделать все что угодно
Но... скорее всего это будет значительно сложнее

417
01:30:45,702 --> 01:30:54,662
то есть придется потратить просто больше времени на то, чтобы это написать
то есть вот это как раз явный пример, где Kotlin выигрывает скорость написания кода

418
01:30:54,662 --> 01:31:07,766
и одновременно с этим это будет скорее всего не так красиво
Вот такой пример я могу привести. Ну то есть да, я это вижу так, что у нас есть куча каких-то микросервисов,

419
01:31:07,766 --> 01:31:18,766
и есть какой-то один микросервис, который агрегатор, то есть какой-то роутер,
который ему приходит запрос, там, не знаю, возьмем, например, базу данных фильмов, с чего бы это.

420
01:31:18,766 --> 01:31:30,686
В общем, и, например, надо пойти, получить списки каких-то фильмов этого актера,
который снимался на фильме, поэтому актеру найти там еще его какие-то, еще фильмы другие.

421
01:31:30,960 --> 01:31:43,200
нужно в очень много разных микросервисов пойти и одну большую сущность собрать из кучи походов
в разные микросервисы. И код вот этого роутера, вот этого похода в разных микросервисах,

422
01:31:43,200 --> 01:31:55,000
он у тебя на джай будет занимать типа три экрана, а на котлене он как бы суть-то такая же, он также
выполняет много-много действий, но просто он выглядит гораздо лаконичнее, из-за этого понятнее

423
01:31:55,000 --> 01:32:06,480
того, что происходит внутри этого роутера. То есть код выглядит как просто инструкция, которую ты
прочитать что ли и понять что сразу где происходит я правильно понимаю ну

424
01:32:06,480 --> 01:32:25,294
примерно так Просто у нас были примеры, когда у нас некоторые наборы вот таких вот инструкций
там отдельно, мы там берем один стрим, потом его коллектим, потом какие-то манипуляции проваливаем, потом там второй стрим

425
01:32:25,294 --> 01:32:33,394
И вот это вот несколько разных разбитых флоу, они за счет котлона
И это знаешь, что самое интересное, это происходит самопроизвольно

426
01:32:33,394 --> 01:32:44,288
Ты просто пишешь код И как-то тебе автоматом
это приходит в голову, что это нужно сделать так и только так. В джаве тебе это не придет в голову,

427
01:32:44,288 --> 01:32:55,448
потому что в джаве это неудобно. В джаве тебе приходится какие-то манипуляции дополнительные
производить. И вот это как раз вот то, о чем мы говорили, помнишь в самом начале, меняет то,

428
01:32:55,448 --> 01:33:10,446
как ты пишешь код, то как ты смотришь на решение задачи, и это уже меняет в целом твои представления
разработки о том, что и как ты будешь делать.

429
01:33:10,446 --> 01:33:18,446
Классно, классно, как бы, писать, писать на языке,
писать код и понимать, что да, ты начинаешь мыслить

430
01:33:18,446 --> 01:33:26,446
мысли по-другому, потому что ты начал писать,
писать на вот этом именно, и вот этом именно языке.

431
01:33:26,446 --> 01:33:33,446
Короче, много, много, много у меня сейчас вопросов,
конечно, еще, еще хочется погрузиться, погрузиться в эту, в эту тему.

432
01:33:36,400 --> 01:33:47,920
еще разработку чуть развернуть если бы ты например писал вот не знаю решил бы ты
другом сделать свой свое какое-то приложение его друг у тебя андроид

433
01:33:47,920 --> 01:33:57,280
разработчик или айос разработчик а ты как бы бэкенд разработчик и он такой
андрюха кроме ты же бэкенд разработчик давай ты не накидаешь его быстро там на

434
01:33:57,280 --> 01:34:10,620
на каком-то языке нам нужно вот смотри фичи какие у нас там список объектов не
событий, список вот для онлайн-кинотеатра, показы в кинотеатры.

435
01:34:10,620 --> 01:34:18,700
Вот, и на каждом нажать там, детали посмотреть, посмотреть
свободные места. Вот, вот если вот такой бы ты бы Kent разрабатывал,

436
01:34:18,700 --> 01:34:27,660
с точки зрения Котлена, как бы тут он, ну то есть
убыстрил бы твою вот эту продуктовую разработку,

437
01:34:27,660 --> 01:34:35,540
можешь ли ты как-то еще подсветить моменты, где здесь,
где здесь, убыстрится, убыстрится разработка по сравнению

438
01:34:36,240 --> 01:34:59,160
очень-очень классно, что ты на самом деле натолкнул меня к мысли, я думал о ней как раз, хотел ее
высказать и потерялась. Собственно, Котлин очень хорош в плане прототипирования, как раз вот этой

439
01:34:59,160 --> 01:35:03,000
своей краткостью тем...

440
01:35:06,030 --> 01:35:20,430
Например, простая вещь, ее не все любят, мы у себя решили, что мы так делать не будем,
но вот для прототипирования мне бывает очень удобно писать весь код или там большую часть кода,

441
01:35:20,430 --> 01:35:30,550
или сосредотачивать какие-то отдельные блоки в одном файле.
Ну вот, за счет опять же краткости датаклассов, в джаве появились рекорды,

442
01:35:30,550 --> 01:35:39,984
но их в сторону можно кинуть несколько камней.
они не настолько удобные как датаклассы. Затем...

443
01:35:39,984 --> 01:35:47,984
Ну, и вот Котлин, для таких... вот в каких-то очень
небольших вещах, но он оказывается проще и удобнее.

444
01:35:50,062 --> 01:35:58,342
И у меня есть опыт коллеги, который раньше для прототипирования
все время использовал Python, он джавист, но он все время

445
01:35:58,342 --> 01:36:10,542
мне говорил, что вот когда мне нужно что-то быстро
накидать, вот на джаве неудобно. Ты начинаешь по умолчанию писать правильный джава-код

446
01:36:10,542 --> 01:36:28,142
со всеми вот этими... конструкциями, тебе нужно написать какую-то функцию.
в процессе прототипирования вкотлене функции это firstclass.citizen

447
01:36:28,142 --> 01:36:37,982
спокойно пишешь ее в любом месте где тебе это удобно потом будешь заниматься тем
чтобы выделять там утильный... создаешь просто файл утил закидываешь все туда

448
01:36:37,982 --> 01:36:49,662
понятно это тоже можно сделать на джаве но там начинается вот это вот
какие-то мелочи из разряда написать статическую функцию как это все равно

449
01:36:52,816 --> 01:37:07,296
почему вроде вроде мелочи я согласен что это не супер сложные вещи там кто захочет
запрототипирует решаемая задача на котле не делать удобно опять же продуктовые разработки

450
01:37:07,296 --> 01:37:16,416
ну мне даже недавно была задача которую я просто взял открыл файл и начал в нем творить придумывать

451
01:37:21,998 --> 01:37:35,846
она между технической и продуктовой и я просто это все делал в одном файле и вот...
мне лично, сугубо мой опыт, мне удобнее так.

452
01:37:35,846 --> 01:37:44,566
И я вижу в этом буст, определённо. Ну да, я понимаю, о чём ты говоришь.
В некоторых языках, типа там, Go, там тоже,

453
01:37:44,566 --> 01:37:52,446
раз ты можешь просто писать функции, типа верх, ну типа,
просто пишешь функции в одном файле, всё, всё фигачишь в одном файле.

454
01:37:52,446 --> 01:37:58,046
Вот тебе надо сделать, не знаю, какой-то простой,
ну не микросерс, но какой-то HTTP endpoint,

455
01:37:58,046 --> 01:38:05,320
какой-то бота ты там делаешь для телеграмма.
программист открываешь файл называешь омэй не думаю как и пишешь и пишешь там у тебя

456
01:38:05,320 --> 01:38:17,200
к объекты которые возвращаются дата дата 2 там до дата 3 лист называется лист но ты как бы пишешь
код который в итоге за 15 минут написано он в итоге будет будет работать

457
01:38:17,550 --> 01:38:30,270
в джаве ты начинаешь так ага архитектура поехали значит мы тут создаем пакет шконтроллер пакет
сервис значит я тут у меня http у меня в контроллере это вызывает серты как бы очень много тратишь

458
01:38:30,270 --> 01:38:45,030
времени но вот это вот все кто кого вызывают а какая у нас тут зона ответственности а какие ошибки
контракты геттер эсэтер и и получается что с опытом то есть с опытом разработки тебе все сложнее как бы

459
01:38:47,504 --> 01:39:04,664
писайте плохой, ну не то что плохой код, а вот такой код прототипный, потому что ты знаешь, что любая шрика сейчас, она потом может выстрелить
вот таких языках, которых функции это там, не знаю, вот они там, как они функции, как называется, вот функцию, когда ты можешь писать просто без

460
01:39:06,224 --> 01:39:12,384
классно. Это называется first-class citizen, то есть
объекты такого типа, это

461
01:39:17,424 --> 01:39:26,224
Ну, в случае практически всех языков это присваивать перемены, возвращать из метода, передавать параметры.
Ну да, то есть я забыл, фест класс сезона.

462
01:39:26,224 --> 01:39:33,824
И в общем, к тому, что это гораздо упрощает жизнь.
Конечно, в джаве ты можешь тоже написать мейн класс и написать там, короче, вот такое вот блатниче,

463
01:39:33,824 --> 01:39:46,064
но потом ты, рано или поздно, ты захочешь это такое, я же разработчик, мне надо это все, а три фактора.
Ты начинаешь все это выносить там, думать о зонах ответственности, разделять это как-то.

464
01:39:47,344 --> 01:40:00,744
насколько я понимаю там в го в котлени там в расти просто вот такой такой код быстрый для протетипирования он смотрится гораздо
лаконичнее конечно в расти наверное просто ну там компилировать гораздо сложнее на в го в го

465
01:40:01,424 --> 01:40:10,784
наверное го свифте не знаю и котлени и питоний наверное смотрится короче это большой это большой конечно плюс джау
разработчикам не хватает вот это вот легкости

466
01:40:11,504 --> 01:40:22,184
погрязли в интерпрайзе погрязли своей синьорности конечно котлени добавляет это
какого-то вновь радости от того, что ты можешь что-то быстренько там написать.

467
01:40:22,184 --> 01:40:29,664
Позволь добавить, есть еще такая штука, что это подход.

468
01:40:32,814 --> 01:40:48,814
еще и развивается за счет инструментов доступных в котлени тот же Ktor.
К сожалению, мы его не используем у себя. Просто так складывается, что у нас очень много инфраструктурного всего написано под...

469
01:40:52,942 --> 01:41:04,182
Rest in plate, да, извините. Под Rest in plate и под...
веб-флюкс и втаскивать в это еще кто-то, опять же зоопарк из технологий, решили так не делать.

470
01:41:04,182 --> 01:41:20,062
Но опять же, ты хочешь написать какой-нибудь микросервис, и я так делал тоже.
Просто делаешь рядышком какой-то проект, в городле прописал 2-3 зависимости,

471
01:41:20,062 --> 01:41:35,576
буквально за пару минут накидал какую-то логику, написал контроллер.
написал пару внешних вызовов и это все опять же все в одном файле очень-очень

472
01:41:35,576 --> 01:41:48,136
быстро складывается и задача решается быстро когда мне нужно написать какой-нибудь
прототип микросервиса на спринге ты тащишь туда весь спринг со всеми его

473
01:41:48,136 --> 01:42:04,456
особенностями и ну как бы никто я думаю не будет спорить что спринг
и в плане ты затаскиваешь его со всеми миллиардом зависимости и затаскиваешь его естественно с

474
01:42:04,456 --> 01:42:20,176
дербозностью всех вот этих инструментов выбираем что тебе сейчас нужно и для прототипирования
KTOR вообще потрясающе. Да, слушатели если вы не знаете по KTOR добавим наверное его в ссылочку

475
01:42:20,176 --> 01:42:32,116
подкаста в описании я про него слышал уже много только положительных отзывов и именно вот в таком
контексте и слышал про него то что если вы что-то хотите небольшое быстро быстро и накотлене и

476
01:42:32,116 --> 01:42:47,296
с htp берите берите кто андрей может приближаемся к двум часам и хотелось оставить оставить время
на рубрику потому что она иногда занимает тоже некоторое время вот на рубрику не популярное

477
01:42:47,296 --> 01:42:53,096
мнение и я кстати когда-нибудь наверное запишу надо найти джингл для этой рубрики какой-нибудь

478
01:42:56,496 --> 01:43:06,896
с этой рубрики, потому что вот ты спросил, насколько она серьезная. Это и для
слушателей, она не очень серьезная, это как бы веселая, веселая, веселая рубрика.

479
01:43:06,896 --> 01:43:20,016
Она призвана разбавить наш серьезный подкаст какими-то веселыми, новыми,
новыми или старыми забытыми идеями. Вот, в общем, для начала я попрошу тебя

480
01:43:20,016 --> 01:43:30,376
ответить на предыдущую рубрику, предыдущую гость подкаста, но, к сожалению, я еще
то есть мне вот сейчас нужно потратить время чтобы ее открыть, но

481
01:43:31,256 --> 01:43:40,016
я попытаюсь пересказать ее своими словами, насколько я ее понял, надеюсь
надеюсь ничего не перепутаю. В общем, и такая

482
01:43:41,456 --> 01:43:51,136
предыдущий гость выразил вот такое непопулярное мнение
он считает, что в нашей IT-индустрии не хватает

483
01:43:52,336 --> 01:44:27,214
программисток вот очень... очень... Мы на подкасте заходим на тонкий лед, но я не могу не спросить, что ты считаешь об этом непопулярном мнении.
Не, ну это на самом деле, я бы сказал, что вопрос подставы, потому что в наше время отвечать на какие-то такие острые вопросы, как ты сам сказал, ходить по тонкому льду.

484
01:44:28,974 --> 01:44:43,974
Ну, лично, мое точка зрения это то, что у инженера или инженерки нет пола, то есть все могут заниматься всем.

485
01:44:47,022 --> 01:45:07,022
У меня очень много коллег разработчиков, разработчи, извините, QAF, потрясающих технических специалистов.
Я бы сказал, что я буду только рад, если...

486
01:45:09,134 --> 01:45:21,134
Это гендерное смещение в сторону мужчин В программировании будет двигаться в сторону
Такого... Некоторого выравнивания Насчет...

487
01:45:21,614 --> 01:45:31,634
Темы квотирования, допустим Тут уже немножко сложнее, потому что...
Как мы видим, майкник все время качается То в одну, то в другую сторону

488
01:45:31,634 --> 01:45:47,990
Люди пытаются выровнять какую-то ситуацию, я тут...
Я выражу такое свое тоже возможно не очень популярное мнение, потому что есть такой подход, когда говорят о том, что чтобы выразить кого-то в правах, им надо сначала дать прав чуть-чуть больше, чем...

489
01:45:48,718 --> 01:46:04,358
чем им надо. С одной стороны, тут можно, наверное, как
условно, чем-то скомпенсировать, но, к сожалению, в некоторых

490
01:46:04,358 --> 01:46:15,438
ситуациях, и это касается не только темы гендерного
равенства в мире программистов, но и многих других, к сожалению,

491
01:46:18,704 --> 01:46:37,766
Я за то, чтобы в компаниях... вкладывали, например, в популяризацию программирования среди девочек.
Чтобы компании, например, у нас есть в Яндексе отличные спикеры,

492
01:46:37,766 --> 01:46:48,046
программисты, женщины. И мне кажется, что путь к изменениям
должен лежать через позитивные примеры.

493
01:46:54,000 --> 01:47:05,160
Я сейчас скажу очевидные вещи, это не означает, что ты не имеешь права играть с машинками,
что тебе не может нравиться инженерные задачи и что это вообще как-то нет, это классно.

494
01:47:05,160 --> 01:47:19,280
Каждый человек волен заниматься тем, что ему по душе, и при этом тут корни всех этих проблем,
они же системе образования, например. Да. Когда...

495
01:47:19,726 --> 01:47:33,526
Опять же, у нас, я не знаю, в России до сих пор живет труд для девочек, труд для мальчиков разделён по...
Ну, почему? Как бы... Кому-то нравится готовить.

496
01:47:33,526 --> 01:47:43,526
К сожалению, я не могу... Я так понаслышке знаю, как происходят уроки труда в России,
потому что я учился в Молдове, и у нас это немного по-другому проходило.

497
01:47:43,526 --> 01:47:53,982
Вот. Я, например, вышиванием занимался. Было дело.
А-а-а... Да. Но при этом, на самом деле, вот это вот некоторые

498
01:47:53,982 --> 01:48:01,982
гендерные давления, оно происходит и в другую сторону.
Там многих пальчиков на них, извините, просто давят

499
01:48:01,982 --> 01:48:13,102
на то, что ты мужчина, ты должен такую профессию
серьезным инженером быть. Не важно, лиши это у тебя душа к этому, не лежи.

500
01:48:15,534 --> 01:48:27,694
Поэтому очень хотелось бы в первую очередь увидеть структурные изменения в системе образования.
И я очень надеюсь, что как раз-таки крупные компании, в том числе IT-компании будут...

501
01:48:27,790 --> 01:48:36,910
Ну и многие делают, собственно, не просто так в России,
очень круто развивает рынок онлайн-образования.

502
01:48:36,910 --> 01:48:47,710
Ну, опять же, могу говорить про Яндекс. Не на правах рекламы, просто как бы вещи, о которых знаю.
У Яндекса есть много классных проектов в виде практикума,

503
01:48:47,710 --> 01:48:59,062
в виде Яндекс.Лице, Яндекс.Школы. Да, то есть...
Много усилий в этом направлении вкладывается, и я уверен,

504
01:48:59,062 --> 01:49:06,078
что через какое-то время эта проблема должна просто
исчезнуть как... Все нормально, у программистов нет проблем.

505
01:49:06,838 --> 01:49:13,798
Те, кто хочет этим заниматься вне зависимости от пола, занимаются этим.
Да, спасибо. Спасибо за такой развернутый ответ.

506
01:49:14,678 --> 01:49:25,758
Вопрос действительно важный. Но пойдем дальше.
Тогда пришло время для твоего непопулярного мнения.

507
01:49:25,798 --> 01:49:31,758
Андрей, если у тебя какое-то непопулярное время,
то нужно сказать его вот прямо сейчас.

508
01:49:35,022 --> 01:49:52,790
Многие думают, что это очень субъективно, но...
Мне кажется, что какие-то очень сложные технологии высоковыруннивые,

509
01:49:52,790 --> 01:50:00,430
которые вроде решают какие-то злободневные насущные проблемы.
И я понимаю, что это будет очень иронично,

510
01:50:00,430 --> 01:50:10,630
учитывая, что я рассказывал очень много времени про Kotlin,
который именно этим и занимается. Но такая технология, как GraphQL, приносит больше сложностей и проблем.

511
01:50:12,142 --> 01:50:24,262
чем удобство и польза, просто, к сожалению, из-за ее сложности это очень тяжело измерить.
Спасибо за непопулярное мнение. Я, в общем, как работают, объясню.

512
01:50:24,262 --> 01:50:29,102
Слушайте, я в твиттере постил непопулярное мнение,
и мы там потом проводим вопрос и проверяем,

513
01:50:29,102 --> 01:50:39,262
типа, действительно это непопулярное мнение,
либо популярное. Мы отменяли Котлин, отменяли Джаву, отменяли ГО, в общем.

514
01:50:39,262 --> 01:50:46,496
У нас очень много было технологий, которые не популярны.
Вот добрались и до GraphQL. Отлично. Выпилим теперь.

515
01:50:46,496 --> 01:50:57,096
Выясним, нужен ли GraphQL нам Java разработчиков.
Андрей, спасибо тебе большое, что пришел. Спасибо за эту беседу о Kotlin.

516
01:50:57,096 --> 01:51:12,016
Мне кажется, получилось очень интересно. Не погружаясь, насколько это возможно в рамках подкаста в технические темы,
потому что это все-таки тяжело, размахивая руками, голосом объяснить какие-то концепции.

517
01:51:12,016 --> 01:51:20,216
По-моему, получился у нас интересный выпуск.
Спасибо тебе большое. В конце, если у тебя есть что-то рассказать, может

518
01:51:20,216 --> 01:51:27,336
быть, что-то я у тебя не спросил, может быть, ты
хочешь порекламировать какие-то свои, не знаю,

519
01:51:27,336 --> 01:51:34,656
какие-то ресурсы, блоги, Twitter, позвать на работу,
либо просто что-то пожелать слушателям, то тебе слово.

520
01:51:41,936 --> 01:51:56,276
пользоваться кинопоиском и всей экосистемой Яндекс.Плюса.
Я знаю, что мы делаем классный продукт и уверен, что те, кто еще не пользуется

521
01:51:56,276 --> 01:52:10,062
ими, могут получить огромное удовольствие от того, что присоединяться к нашей большой семье Плюса.
хорошо спасибо большое ну что слушатели это подписывайтесь на

522
01:52:10,062 --> 01:52:19,942
канал на apple подкастах google подкастах ставьте там звездочки либо либо что
там рейтинг потому что я что-то зашел и оказывается оказывается там есть рейтинг

523
01:52:19,942 --> 01:52:29,982
и оказывается это важно поэтому если вы дослушали до этого момента поставьте
там лайк либо либо либо что там в этом этом этом apple подкастах есть вот и

524
01:52:34,256 --> 01:52:46,256
Андрей, спасибо тебе еще раз. Спасибо тебе, Дима. Было очень интересно поговорить, поделиться своим оптом.
Ну что ж, с вами был подкаст Java Swag. Всем спасибо. Пока.

