1
00:00:00,270 --> 00:00:08,070
Здорова, меня зовут Саша Пахомов и я инженер, который
любит свое дело. Это подкаст Java Swag. Сегодня мы поговорим про все, что я рассказывал

2
00:00:08,070 --> 00:00:16,330
в своем подкасте 1000 фичей, а именно слепая печать,
вим, клавиатуры, наследование, Java, Kotlin, очень много интересных

3
00:00:16,330 --> 00:00:23,170
тем, поэтому не переключайтесь и слушайте до конца, в конце
очень интересное непопулярное мнение. Поехали.

4
00:00:30,542 --> 00:00:46,090
Омонлайн тулы на джай писать не нужно. Котлин он компилируется в сто раз дольше, к нему идея начинает тупить.
Ну пиши ты на джаве как бы и не парься. Я не девелпер-адвокат и поэтому все что я говорю это то что происходит в реальной жизни.

5
00:00:52,270 --> 00:01:00,070
Всем привет, в эфире подкаст Java Swag, с вами я и ведущий
Дима Волыхин. Сегодня у нас в гостях Саша Пакомов, разработчик из

6
00:01:00,070 --> 00:01:09,310
компании Unison, контрибьютор в проект Apache Ignite 3 и еще
подкастер из отличного подкаста 1000 фичей, всем советую.

7
00:01:09,310 --> 00:01:16,238
Вот прям сразу рекламу ставлю, всем советую посмотреть
Сашем подкаст. Саша, привет. Привет, Дима, спасибо большое, что позвал.

8
00:01:16,238 --> 00:01:24,758
Огромное спасибо за такое интро. Теплое, мне очень приятно.
Но есть небольшая оговорочка. Я всё-таки не контрибьютор, а уже комитер.

9
00:01:24,758 --> 00:01:31,598
Это значит, что я могу мержить и ревьюить реквесты.
Но это так. Да, ну может быть, немного давай о себе, поподробнее.

10
00:01:31,598 --> 00:01:42,150
Вообще, я Саша, да, я из Воронежа. Учился в Воронежском государственном университете.
Закончил его не так давно. После этого я работал во всяких маленьких локальных стартапах,

11
00:01:42,150 --> 00:01:54,710
там консалтинговых компаниях. Долго там не задерживался, просто потому что не было интересно, скажем честно.
Вот потом я какое-то время работал в компании, возможно знакомая всем T-Systems,

12
00:01:54,710 --> 00:02:03,270
занимался разработкой прикольных сервисов, мне все нравилось.
Но потом случился ковид, и как-то я решил куда-то переехать.

13
00:02:03,662 --> 00:02:18,622
посмотреть, переехал в Питер и там нашел уже вот компанию Unison, в которой сейчас работаю, очень сильно я люблю и
вот сейчас живу в Ереване, занимаюсь разработкой, как ты сказал уже Apache Ignite 3 базы данных, она еще как бы в

14
00:02:18,622 --> 00:02:31,582
Альфе, вот я очень многое уделяю времени, внимание всяким UX штукам, там command line,
rest API, все с чем разработчики взаимодействуют, я так или иначе разрабатываю, мне это очень интересно и

15
00:02:33,616 --> 00:02:46,350
говорить. Ну а на этом, наверное, короткое интро или не очень.
Всё. Отличная интро, и я хотел бы продолжить разговор, хотел бы нажать с неожиданной темой.

16
00:02:46,350 --> 00:02:59,790
То есть ты сказал, что ты из Воронежа. То есть такие слова, как «машмет», «левый берег», «тебе знакомы».
Ну, справедливости ради жил и рос я в Липецке, это рядом город,

17
00:02:59,790 --> 00:03:06,550
а уже учился в Воронежском государственном инститете и какое-то время там жил, да.
А какой факультет, если не секрет?

18
00:03:09,744 --> 00:03:24,144
отделение МУАИС, математическое обеспечение и администрирование информационных систем.
Отлично, отлично. А ты что, откуда? Мне тоже знаком, знаком университет ВГУ, факультет ПММ, и ты, наверное, третий человек,

19
00:03:26,344 --> 00:03:35,344
которого я встретил в таких публичных кругах, кто из ВГУ. Очень здорово, что я не набрел на это в линкодине, потому что я,

20
00:03:39,664 --> 00:03:53,924
там на инсайты что-нибудь интересного спросить но вот до вгу не заскролил очень очень здорово
ну что же воронеж центр центра центр конечно центр россии но мы пойдем команлайна команлайн

21
00:03:53,924 --> 00:04:07,654
тул тулам и всяким таким на всяким штучкам, которые делают программиста лучше, но не напрямую.
Вот, например, у нас же Java-подкаст, и прежде чем добраться до Java, вот как мое мнение, что в Java

22
00:04:07,654 --> 00:04:21,654
вот Java-разработчики мало уделяют времени таким вот практикам, как слепая печать, вот
разработчики редко пользуются пользуются типа Java-разработчики, Vim'ом, то есть мы все такие

23
00:04:22,654 --> 00:04:49,608
фанаты IntelliJ IDEA, просто до мозга и У тебя был очень прикольный выпуск про слепую печать, и после этого я даже пошел и сам потренивал некоторые упражнения подделал, решил, что да, вот я именно сейчас начну заниматься вот этой слепой печати.
Можешь рассказать предысторию, как ты дошел до этой, вообще, как это появилось в твоей жизни, почему ты решил, что это вообще важно разработчику?

24
00:04:56,528 --> 00:05:05,968
как к чему я пришел. В общем, да, интересно, что вот, например, в школе
слепая печать входит в обязательную программу по информатике. Я думаю, не многие

25
00:05:05,968 --> 00:05:15,248
помнят, но все-таки у нас были такие уроки, когда нам показывали расположение рук
на клавиатуре, например, и нас учили как бы, и были, может быть, какие-то даже

26
00:05:15,248 --> 00:05:22,968
небольшие там экзамены или, как эту школу называется, уже забыл, когда нужно было
что-то напечатать, не глядя. Вот у меня такое было, по крайней мере, но что

27
00:05:22,968 --> 00:05:30,228
удивительно, преподавательница или учительница, которая в школе
показывала, она естественно делала это двумя указательными пальцами, глядя на клавиатуру, вот так вот

28
00:05:30,228 --> 00:05:41,628
еще высоко подымала, очки так еще задирала. В общем, такой небольшой диссонанс, он происходил,
как бы человек вроде бы этим не владеет, а рассказывает, и вроде как будто бы какая-то одна из очередных...

29
00:05:43,246 --> 00:05:58,906
заморочек школьной программы, мы ее, конечно, пролистывали, но дальше потом в универе тоже как бы вот эти преподаватели, которые нам рассказывали всякие алгоритмы
и структуры данных, они их очень хорошо знали, но когда мы там начинали, дело доходило до программирования, это тоже выглядело довольно странно, когда вот

30
00:05:59,646 --> 00:06:10,526
женщины они просто вот двумя пальцами по клавиатуре били, и как будто бы это норма, да?
Я думаю, что для многих это и сейчас норма, и ничего в этом нет такого, но потом какое-то время у нас

31
00:06:13,200 --> 00:06:21,360
опять к государственному университете, у нас были молодые преподаватели, то есть они приходили,
они не... я сам был таким, я тоже преподавал ВГУ, мне это дико доставило.

32
00:06:22,062 --> 00:06:32,382
И вот парочку таких молодых преподавателей, которые вот реально из индустрии, которые вот open source,
там один из нас, у нас был чувак, который вообще свой 2D движок написал для iOS,

33
00:06:32,382 --> 00:06:39,582
а какого-то, не какого-то 2D, а файберы какое-то называется.
В общем, и ты видишь, что люди профессионалы, и они тебя начинают зажигать своей энергией.

34
00:06:39,582 --> 00:06:46,702
И одно из тех вот этих ключевых качеств этих людей, которые меня зажгли,
это то, что они не смотрели на клавиатуру и печатали с дикой высокой скоростью для меня тогда.

35
00:06:46,702 --> 00:06:54,816
То есть я, они что-то печатали, и они печатали быстрее, чем они говорят.
голову взорвало, потому что вживую я это увидел вот первый раз.

36
00:06:54,816 --> 00:07:02,214
И подумал, что, наверное, это что-то прикольное, я тоже так хочу.
И потом, когда уже чуть-чуть с универом стало попроще,

37
00:07:02,214 --> 00:07:07,214
потому что тоже такие вещи изучать, когда ты учишься
и работаешь, да, справедливо сказать, что со второго курса

38
00:07:07,214 --> 00:07:14,974
начал full-time работать, и совмещать там было сложно.
Когда стало попроще, я открыл для себя ресурс typing.com.

39
00:07:14,974 --> 00:07:21,654
Это такой в игровой форме достаточно легкий тренажер,
который тебя плавно вводит во всю эту тему.

40
00:07:21,654 --> 00:07:28,094
И просто перед митингами, во время митингов иногда,
перед созвонами какими-то, когда уже программировать

41
00:07:28,688 --> 00:07:42,128
глубоко погружаться. Я садился и 5-10-15-20 минут сессий проходил эти курсы, проходил эти классы,
писал про них у себя в Telegram-канале, делился с друзьями программистами. Тоже все, кто пробовал,

42
00:07:42,128 --> 00:07:53,248
достаточно довольны остались, и они сейчас тоже занимаются, ну точнее печатают уже несмотря на
клавиатуру. Ну это как бы, если говорить про то, как я к этому пришел и почему я решил так делать.

43
00:07:58,608 --> 00:08:09,486
Круто. Ну, это реально прикольно выглядит со стороны, но как это ощущается изнутри?
То есть ты перестаёшь, у тебя перестаёт быть вот эта вот задержка между мыслью

44
00:08:09,486 --> 00:08:21,326
и тем, как эта мысль появилась на экране. Ты перестаёшь, взгляд у тебя перестаёт бегать, ты начинаешь вот реально какой-то,
как вот в «Аватаре», когда они соединялись друг с другом через этот проводочек,

45
00:08:21,326 --> 00:08:28,046
так и ты, может, тоже соединяешься как бы через свои руки с компьютером
и реально начинаешь мыслить уже непосредственно текстом

46
00:08:28,046 --> 00:08:35,360
и пропускаешь этот ненужный этап поиска каких-то там
взглядов по клавиатуре. Помимо всего прочего, помимо вот этих вот ощущений,

47
00:08:35,360 --> 00:08:43,400
коннект и так далее, ты открываешь для себя всякие такие прикольные штуки.
Сейчас покажу, наверное, подкасте не будет видно, я показываю NewFi клавиатуру,

48
00:08:43,400 --> 00:08:52,280
которую я себе недавно купил, у меня есть еще Keychron клавиатура. В общем, ты открываешь для
себя мир вот этих вот прикольных заморочек программистских, которые

49
00:08:52,280 --> 00:09:00,480
справедливости ради без десяти пальцев печати удовольствие не доставят.
Вот, поэтому это такой целый мир, целый хобби, который мне очень нравится, и я

50
00:09:00,880 --> 00:09:10,880
иногда прокачиваю именно скорость, потому что скорость, чем выше, тем она прикольнее,
но мне кажется, что у меня сейчас уже скорость на приемлемом уровне, то есть я вот с той скоростью,

51
00:09:10,880 --> 00:09:21,000
в которую думаю, с той скоростью я воспроизвожу код, текст, и в целом достаточно, дальше упарываться
я смысла не вижу. Но это, кстати, тоже интересно, когда я изучал, я изучал, естественно, английском

52
00:09:21,000 --> 00:09:29,680
языке, чтобы программировать, это английская раскладка, а вот русскую раскладку долго
времени не мог, и это, мне кажется, у многих такая проблема, кто там тренировался, начнет сложно

53
00:09:30,800 --> 00:09:37,960
этот вот тумблер на то, что у тебя теперь другая раскладка,
постоянно начинаешь печатать какие-то английские символы.

54
00:09:37,960 --> 00:09:42,840
И то, что мне помогло, это то, что вот я себе купил
вот такую клавиатуру, в которой, естественно, нет

55
00:09:42,840 --> 00:09:49,000
русской раскладки, и пару месяцев, наверное, были
какие-то проблемы. Ну даже, наверное, так, первые две недели это вообще

56
00:09:49,000 --> 00:09:57,240
было невозможно. Я смотрел, у меня был мак, у меня перед ним была русская
клавиатура и раскладка. Я смотрел, то есть, на нее и как бы пытался повторить.

57
00:09:57,240 --> 00:10:04,440
Но потом в какой-то момент по щелчку просто реально
просыпаюсь и я уже вообще не смотрю ни на русскую, ни на английскую, то есть оно

58
00:10:04,440 --> 00:10:13,800
как-то само вошло в жизнь. Тоже такой момент, который как бы происходит сам, если
достаточно долго практиковаться. Ну, по мне так месяц-два это не так уж и много,

59
00:10:13,800 --> 00:10:26,600
наверное. От себя хочу сказать, что у меня такой переход был, я не пишу слепым
набором, я смотрю на клавиатуру, то есть, но переход был для меня знаковый, когда

60
00:10:30,640 --> 00:10:39,480
И тогда я понял, что прикольно, а мне-то вот, чтобы, например, я работаю, работаю,
а потом мне нужно что-то написать там типа в телеграмчике, кому-то сообщение ответить.

61
00:10:39,480 --> 00:10:48,560
И я, вот когда смотрю на клавиатуру, я не помню, где находятся какие буквы,
я не могу вспомнить. Но как только я кладу туда руки, это происходит какая-то магия.

62
00:10:48,560 --> 00:11:00,480
Конечно, магия не такая эффектная, когда ты напечатаешь каждую букву, там не знаю,
с первой попытки. Моя магия, она такая, иногда там видно, как фокусник вынул.

63
00:11:00,560 --> 00:11:15,000
вынул там карту из кармана то есть я все еще стираю там буквы иногда печатаю не в неверном порядке
вот эти вот слова буквы те же но просто порядок не тот же но все равно эффект эффект удивительный всем и всем кому то есть кто

64
00:11:15,640 --> 00:11:29,230
хотел бы печатать вот как бы ускорить ускорить свое
убыстрить скорость набора текста, для начала, возможно, даже до тренажёров можно попробовать просто печатать, попечатать и

65
00:11:30,110 --> 00:11:38,070
попытаться не смотреть на клавиатуру. То есть это очень важно, важно, важно
понять вот это вот именно, как бы разделить ваше

66
00:11:39,630 --> 00:11:51,150
заметить, как часто вы смотрите вниз и как часто вы смотрите на экран. Это очень много времени. То есть вы очень много времени
тратите вот на вот этот фокус, который, который опускается глаза вниз и подымаются глаза

67
00:11:51,984 --> 00:12:00,984
контексты, и контекст меняется. То есть в этом, наверное, маленькие микросвичи контекста, они, они, конечно,
очень, очень сильно отвлекают. Говоря про слепую еще,

68
00:12:02,144 --> 00:12:18,104
говоря еще про слепую печатку, хотел, хотел узнать, как быстро ты пишешь паблик статик void main string
квадратные скобочки. Ну, то есть это же очень эффектно выглядит, когда тебе просят что-нибудь там, ну давай что-нибудь попечатаем тут на, значит, на,

69
00:12:21,904 --> 00:12:31,664
соблайн текст, давай напиши программу. И ты такой, не глядя, просто там написал
там какой-то цикл, написал какой-то там, не знаю, парсинг, не знаю, разбор

70
00:12:31,664 --> 00:12:41,344
простейший текста на строчки, и потом его копернул там в идее или в какой-то онлайн
редакторе, и он действительно компилируется. То есть, ваша точность набора текста

71
00:12:41,344 --> 00:12:50,904
улучшается, вы делаете меньше ошибок и меньше как бы, я бы даже сказал, может
быть, даже багов, ваши переменные перестают путать, название переменной

72
00:12:51,824 --> 00:13:01,564
путаться буков, название переменных перестают путать места и вы просто становитесь лучше, лучше, как
программист. Ну вот конкретно для Java разработки, есть ли у тебя какие-то

73
00:13:02,544 --> 00:13:13,064
не знаю, может быть идеи о том, нужно ли это слепая печать, потому что ну вот Java разработчик, тебе скажешь, ну у меня есть идея, ну у меня там
Control, Control пробел, это моя слепая печать

74
00:13:14,224 --> 00:13:24,344
мне вот эти два пальца достаточно для набора базового сервиса, зачем мне все эти 10
а к тому же идея. Ну идея, ты видел, она же тоже на джайве

75
00:13:24,344 --> 00:13:29,504
написана. И если я быстро начну печатать, там курсор
будет не успевать. То есть надо тоже как-то наоборот

76
00:13:29,504 --> 00:13:37,584
сильно не торопиться, чтобы печатать много кода. Вот
расскажи про свой опыт с идеей и конкретно с набором

77
00:13:37,584 --> 00:13:42,864
джава кода. Есть какие-то интересные истории?
Давай так, вот начиная про паблик статик void mains,

78
00:13:42,864 --> 00:13:49,784
с какой скоростью быстро ли я набираю. Вообще, постоянно
я в голове быстрее всего набираю по svm и enter. Вот это

79
00:13:51,664 --> 00:14:00,564
шорткат, который я изучил. Но если нет идеи, то вообще
на тренажерах типа у меня скорость там 50 слов в минуту,

80
00:14:00,564 --> 00:14:07,484
что на самом деле вообще не быстро. Это как бы базовый,
это наверное вот начиная там с 40-45 уже начинает доставлять

81
00:14:07,484 --> 00:14:12,084
удовольствие этот процесс. То есть ты понимаешь, что
ты меньше тупишь и реально начинаешь продуктивно

82
00:14:12,084 --> 00:14:20,284
что-то делать. А дальше там это уже я считаю, ну отточка
такая. То есть ты потратил 20% усилия, получил 80% результатов,

83
00:14:21,584 --> 00:14:34,344
45. Дальше уже ты просто можешь остальные 80% усилий тратить, но результат уже будет не такой.
Ну если так представить, то типа 50 слов в минуту, это примерно слова в секунду, чуть медленнее. Типа public, static, void,

84
00:14:34,584 --> 00:14:42,304
main, string. Вот с такой скоростью это появится. Типа, ну достаточно
нормально. Но вот печатать всякие там, знаешь, эти

85
00:14:42,704 --> 00:14:55,534
кривые скобочки и так далее, к ним надо тоже отдельно готовиться, потому что это специальные символы, есть специальные ресурсы, которые помогают отработать именно эту штуку.
Вот, давай дальше теперь про для Java разработчиков,

86
00:14:55,534 --> 00:15:05,534
ведь есть идея. Да, Take хороший, я с ним согласен, я с ним жил, я вижу, как с
ним живут куча людей, но это не про меня просто.

87
00:15:05,534 --> 00:15:13,214
То есть, если кому-то комфортно и удобно использовать shortcut
и идеи автокомплита, они действительно неплохие.

88
00:15:13,214 --> 00:15:19,414
Там Copilot сейчас уже появился, вообще, там тебе целое
полотно напишет, зачем вообще тратить свои усилия.

89
00:15:21,648 --> 00:15:32,048
контра аргумента придумать, потому что когда такой аргумент передо мной встает, то я понимаю, что
разные мои цеты у меня и у того, кто делает этот аргумент, и мне в целом нет желания доказывать ему и объяснять, что

90
00:15:32,248 --> 00:15:38,748
вот оно того стоит, да и в целом, ну зачем.
Как я уже сказал, в первую очередь это про удовольствие, получение от работы и про

91
00:15:39,648 --> 00:15:51,488
ощущения, а не про какие-то метрики. Вот, но если какие-то аргументы все-таки попытаться придумать, то можно сказать, что вот, например, когда ты пишешь
тесты вперед кода, и у тебя нет классов с компли...

92
00:15:51,568 --> 00:16:05,168
например, то ты, если ты хочешь упороться, ты можешь написать некомпилируемый код достаточно
быстро, не теряя в продуктивность, а потом там нажатие option или control-enter в идее, когда она так

93
00:16:05,168 --> 00:16:13,648
подсвечивает красненький класс и предлагает тебе, например, сделать имплементацию этого класса,
и ты уже имплементацию генерируешь, а не пишешь сначала имплементацию, а потом ее используешь,

94
00:16:13,648 --> 00:16:18,288
то есть такой паттерн использования в целом может быть, и действительно, когда ты на клауне

95
00:16:21,488 --> 00:16:27,468
себя выдавить какой-то не скомпилированный красный
текст в идее, у тебя все внутри сжимается, ты такой

96
00:16:27,468 --> 00:16:37,334
«да как же это невозможно?» А тут ты просто взял и написал, не думаешь даже об этом.
В целом, да, идея нас, конечно, разбаловала, но иногда все-таки идеи нет под руками,

97
00:16:37,334 --> 00:16:46,334
не хочется быть адептом и заложником одного инструмента,
поэтому нужно диверсифицировать свои риски, диверсифицировать портфель.

98
00:16:46,334 --> 00:16:53,334
В какой-то момент, возможно, вы будете не Java разработчиком,
и не разработчиком на Go, например, у которого тоже есть идея,

99
00:16:53,334 --> 00:17:01,334
а придется там EML файлы писать где-нибудь на серверах какое-то время.
Ну, просто бывает так. Уже нет идеи, поэтому все-таки скилл он достаточно важный.

100
00:17:02,288 --> 00:17:12,888
и везде применим. Да, я полностью с тобой согласен.
На самом деле, я большой фанат идеи, но к сожалению,

101
00:17:12,888 --> 00:17:21,168
нам вот, даже с другой стороны зайду, нам вот Java-разработчикам
очень повезло, что у нас есть такой крутой редактор

102
00:17:21,168 --> 00:17:30,128
кода. То есть мы изначально с разбалованной идеей очень
привыкли, что слепая печать даже не нужна, и тебе идея

103
00:17:32,208 --> 00:17:45,128
подумать, если подумать они просто безумные, они очень много знают о коде, они подсказывают очень много всего
очень много всего интересного Java разработчиков, то есть Java разработчику нужно просто как бы

104
00:17:46,008 --> 00:17:59,008
наслаждаться, очень много туллинга, который подсказывает ему как нужно писать код в других языках, к сожалению
к сожалению не так, слава богу появился там VSCode, который более или менее как бы подтягивает все эти языки до уровня

105
00:18:02,128 --> 00:18:17,502
они не такие, конечно, развёрнуты по сравнению с идеей, но всё равно хотя бы что-то такое есть.
Я ещё хотел поговорить про... про набор текста вообще в командной строке, то есть вот ты научился

106
00:18:17,502 --> 00:18:26,182
слепой печате, как долго тебе осталось, не знаю, сколько лет до того, как ты
перейдешь в ВИМ, знаешь, вот есть такая дорожка, что научился печатать,

107
00:18:26,182 --> 00:18:36,782
скоро ты пойдешь, значит ВИМ, скоро тебе IntelliJ IDEA просто начнет потихоньку
немножко бесить своей вот этой вот огромностью, своей вот этой вот просто

108
00:18:36,782 --> 00:18:51,096
несоразмерностью с проектами, которые ты пишешь, хочешь написать маленький
2 Гиговую, 2 Гиговую, иди. Да, я понял. Ну смотри, если говорить о пути, то вот второй шаг в виде механической клавиатуры, даже не одной, я уже тоже купил,

109
00:18:51,096 --> 00:19:09,096
поэтому уверенно двигаюсь в этом направлении. Но если шутки в сторону, то я думаю, что мне она не надоест и бесить не начнет по ряду причин.
Во-первых, у каждого инструмента или у каждой направления есть свой инструмент.

110
00:19:12,016 --> 00:19:29,022
инструмент intel и gidea поэтому я не вижу смысла писать на java используя какой-нибудь vim или emacs даже если ты его очень хорошо
знаешь потому что ну это немного уже мне кажется перегиб, то есть смысла нет. В сторону того, что бесить, ну например,

111
00:19:29,022 --> 00:19:40,622
можно поставить вим байдинги у себя в идее и в целом у тебя вообще ворфлоу меняться не будет,
только там отрисовка и отображение. По поводу тормознутости, ну тут вопрос такой, конечно,

112
00:19:40,622 --> 00:19:51,942
потому что что значит тормознутость? Меня не сильно бесит, время открыто, что идея там открывается,
сейчас не знаю сколько, секунд пять, наверное, на маке там. В целом это приемлемо по сравнению

113
00:19:52,816 --> 00:20:04,136
это было, когда я начинал карьеру, вот на моем там каком-то Asus, она открывалась на секунд 30-45,
вот прям реально, это была уже проблема, а 5 секунд мне кажется нет. К тому же...

114
00:20:05,582 --> 00:20:22,302
если мы говорим про джау, да, а если мы говорим про какие-то другие вещи, про какие-то другие файлы, то да, тут я уже наверное и сейчас в целом уже не использую почти идею
и какие-то емел файлы, джейсон файлы, там зайти на сервис, вот когда ты на сервис заходишь, ну у тебя уже нет выбора использовать идею

115
00:20:22,302 --> 00:20:35,502
в любом случае тебе нужно использовать командную строку, и тут уже как ни крути, хотя можно конечно там портфорвадинг сделать, там что-то удаленную идею поднять
но это уже вот тоже как будто бы инструмент не для этого создавался

116
00:20:35,536 --> 00:20:56,536
а для того чтобы изменять конфигурации на сервере был создан vim и ему уже много лет и почему бы его там не использовать
в одно время я кстати когда ну не очень любил vim да и сейчас я его не сильно люблю просто его использую как утилитарную штуку то есть я могу там по словам попрыгать удалить добавить то есть чистой редактурой но не какой-то глубокое знание

117
00:20:56,536 --> 00:21:00,536
я использовал так называем называется микро по моему

118
00:21:05,456 --> 00:21:15,056
и там можно почти как в идее в терминале бегать и использовать его.
То есть что можно, например, себе на сервер поставить какой-нибудь такой редактор, если очень сложно.

119
00:21:15,790 --> 00:21:25,970
Кстати, хотел вот ты сказать, что про идею и Vim байнинги.
Вот очень похожая ведь идея между услепой печатью и

120
00:21:25,970 --> 00:21:34,450
Vim байнингами. Сначала ты замечаешь, что тратишь время на то, чтобы
посмотреть на клавиатуру и на экраны. Вот так вот всё время у тебя микросвитчи вот этого

121
00:21:34,450 --> 00:21:42,450
контекста. Потом ты начинаешь замечать, что чтобы бегать по коду,
тебе тоже нужно убирать руку с твоей любимой вот

122
00:21:45,744 --> 00:21:55,124
руку тянуть до стрелочек это тоже на клавиатуре это тоже такой микросвич
микросвич какой-то происходит ты начинаешь пользоваться уже этими

123
00:21:55,124 --> 00:22:05,504
винбайдингами потом ты начинаешь понимать что ага для редактирования кода
джао кода любого кода и построение проекта мне нужна как бы консоль почему я

124
00:22:05,504 --> 00:22:12,864
каждый раз переключаюсь в редактор и из консоли вы редактор ведь я могу в
принципе делать все вот это вот типа открывать в консоли какой-то редактор

125
00:22:15,664 --> 00:22:28,644
их ты начинаешь замечать все больше и постепенно как бы двигаешься вообще в сторону того,
что у тебя есть только есть только консоль и это такой как бы пути пути разработчика от какого-то

126
00:22:28,644 --> 00:22:43,164
не знаю от станка громадного для разработки кода каким-то базовым базовым навыкам таким там не
знаю я чтобы поискать код я мне надо выучить один раз греб чтобы не знаю посмотреть структуру

127
00:22:45,584 --> 00:22:55,304
еще очень там кого-нибудь авакатом сет выучить я не знаю не в конец я грепу
и там двумя двумя командами которые я за каждый раз каждый раз гуглю но все

128
00:22:55,304 --> 00:23:03,584
равно есть вот такие базовые инструменты которые получается что
должен знать каждый каждый разработчик а если он еще не знает то скорее всего

129
00:23:03,584 --> 00:23:13,424
он к ним рано или поздно как бы придет и доберется это такие базовые тулы
которые кстати очень редко которым очень редко обучает в университете но по

130
00:23:15,504 --> 00:23:22,824
в ЭГУ точно не было курса по всяким КомАнлайн тулам.
Я слышал у тебя один из выпусков, подкаста, в котором

131
00:23:22,824 --> 00:23:30,264
ты вот говорил про такие прагматичные тулы.
Не мог бы ты рассказать вообще, как ты к ним относишься,

132
00:23:30,264 --> 00:23:38,184
нужно ли их вообще знать, учить, пригождаются они
тебе в работе, либо ты все еще сделаешь в идее.

133
00:23:38,184 --> 00:24:02,070
Ну, в общем, расскажи свое отношение к ним.
Давай так, по частям. Во-первых, про вот этот вот путь, который ты сказал, который мы как-то уходим от, как ты сказал, такого большого станка, очень мощного фичастого, и переходим каким-то примитивным небольшим штукам, овладеваем ими в совершенстве и начинаем использовать уже их большую часть времени.

134
00:24:02,926 --> 00:24:11,406
В целом, я тоже замечаю такое движение за собой.
Я по меркам индустрии, программист молодой, у меня

135
00:24:11,406 --> 00:24:18,726
6-7 лет опыта работы промышленной, и я замечаю, как я начинаю
двигаться от вот этой вот изучения идеи и понимания,

136
00:24:18,726 --> 00:24:26,166
что IDE — это то, что нужно знать вообще, все эти шорткаты,
все эти настройки в идее, какие-то там фичи, они же

137
00:24:26,166 --> 00:24:31,526
еще эти фичи выпускают просто тоннами, и мы про них особо
не знаем. Мне кажется, это такая довольно большая проблема.

138
00:24:32,880 --> 00:24:49,100
ночами не спал, потому что, ну как людям объяснить, что мы сделали, они же не пользуют это. И все эти бедные developer-адвокаты на
конференциях постоянно рассказывают. Я их, этих смотрел видео, просто не знаю, сколько вы на заре карьеры, и я ничего не запомнил. Вот реально, я помню буквально

139
00:24:49,800 --> 00:25:00,320
базовые штуки, это shift-shift, чтобы найти все что угодно.
Action, команду, файл, все. Там найти класс, найти метод, там command-o, command-n и command-f.

140
00:25:01,070 --> 00:25:15,070
Это всё, что в поиске, ну и прыгать там по тексту туда-сюда, выделять, то есть какие-то базовые штуки, их там с десяток, там, 15, и всё.
А дальше там оказывается, что сейчас у них есть всякие команды, ты можешь shift-shift-slash сделать, и там какую-то команду найти.

141
00:25:15,070 --> 00:25:23,070
Я вот об этом узнал только когда-то, что-то там гуглил, случайно нарвался.
И таких штук вот этот комбайн в себе содержит очень и очень много.

142
00:25:23,214 --> 00:25:28,974
И я не уверен, что это то, что мне большинству людей нужно.
Там независимо от того, джава ли ты разработчик,

143
00:25:28,974 --> 00:25:38,774
котлин или пишешь на оси. Мне кажется, что нам, как разработчикам, нужно уметь
решать свои задачи и транслировать свои идеи из головы в текст.

144
00:25:39,502 --> 00:25:49,422
чтобы минимально была задержка между этим. И мне кажется, что да, когда ты овладеваешь там
шорткатами Vima и в нем начинаешь прыгать по словам туда-сюда,

145
00:25:49,422 --> 00:25:57,782
у тебя пальцы даже не двигаются, то есть ты вот этим вот этим
J-K-L-H и другой комбинацией просто можешь делать чудеса.

146
00:25:57,782 --> 00:26:03,782
И в целом, как будто бы это тоже сложно выучить,
но это достаточно выучить один раз и навсегда, ты

147
00:26:03,782 --> 00:26:09,382
себе зашьешь это под корку и будешь использовать.
Это как вот станком или как стамеской овладеть,

148
00:26:09,456 --> 00:26:21,096
и ты ей будешь всегда работать, она такая какая она есть. А в идее, во-первых, настройки, например,
они постоянно куда-то прыгают, уходят. Вот ты один раз там себе environment новый поставил и

149
00:26:21,096 --> 00:26:31,936
вспоминаешь эту настройку и она иногда даже не гуглится, потому что уже два раза там поменялась,
где эта настройка находится. Какой-нибудь annotation processing, хорошо, по сельям времени я нахожу по

150
00:26:31,936 --> 00:26:42,176
словам annotation processing, но что-то такое другое, чтобы включить. Что-то другое иногда действительно
может оно как бы реально такая сложность тебе не нужна

151
00:26:43,176 --> 00:26:49,576
поэтому да, я с тобой полностью согласен по поводу этого вот пути
но справедливости ради я где-то там посередине сейчас нахожусь

152
00:26:49,576 --> 00:27:00,876
я не овладел ни Emax, ни VIV совершенствии и код я там не пишу, и не уверен что буду писать
но иметь в виду и базовые какие-то знания мне кажется это очень полезно

153
00:27:01,276 --> 00:27:08,076
тот же самый греб но вот AVK справедливости ради я всегда гуглю
вот AVK скрипт, чтобы я написал, это какая-то боль

154
00:27:08,076 --> 00:27:20,496
тот же самый сет Я не понимаю, что люди, что у них было в головах, чтобы сделать этот синтакс из седа через вот эти вот слыши.
Ну, это реально вот такие олдскулы, которые про UX ничего не знали, очевидно.

155
00:27:21,296 --> 00:27:30,996
Но греб плюс-минус, как бы там, можно его овладеть.
И как бы я еще очень... вот моя любимая вообще, это Reverse Find, как это называется в терминале.

156
00:27:30,996 --> 00:27:42,336
Я вот использую 50 на 50 фиш и Omized SSH. Прыгаю между ними, смотрю, что мне больше нравится.
на маке Command R и начинаешь по памяти там что-то было

157
00:27:42,336 --> 00:27:49,536
гре, и он тебе сразу находит все, что ты писал гре, и ты
можешь выбрать там стрелочками. И вот это я использую 24 на 7.

158
00:27:49,536 --> 00:27:54,496
То есть я один раз команду загуглил, а потом ее просто
вот таким образом нахожу, ну и тоже как бы паттерн

159
00:27:54,496 --> 00:28:07,186
такой удобный, быстрый, даже быстрее, чем всю команду
печатать. Вот. Какие-то такие, знаешь, атомарные... Ну, это вообще философия Unix'а про то, что вот каждая маленькая задача должна решаться своей маленькой утилитой.

160
00:28:07,186 --> 00:28:21,646
А ты их между собой потом можешь пайпами соединять и как бы сделать такой пайплайн обработки символов, как бы файлов.
Так или иначе, это всё. Мы с этим работаем. И решить свою любую задачу набором этих маленьких инструментов.

161
00:28:22,254 --> 00:28:29,074
но я бы сказал, что я использую максимум там
pipe2.3, если мне нужно, опять же это какой-нибудь

162
00:28:29,074 --> 00:28:41,694
less, elay, cat, grep, vc cat, то есть вот такие базовые примитивные
штуки, которые там когда ты начинаешь просто это от чего идет, вот ты сидишь в

163
00:28:41,694 --> 00:28:47,614
командной строке, тебе нужно найти файл, в котором там
конфигурационный ключ, не знаю там, ssh-ключ какой-то

164
00:28:47,614 --> 00:28:55,168
прописывается тебе нужно взять команду find, чтобы найти файлы
там по имени уметь их открыть кетом или лессом, и так далее.

165
00:28:55,168 --> 00:29:00,928
Тебе нужно уметь оттуда вычленить что-то по паттернам,
греб или авк. То есть это решение твоих задач.

166
00:29:00,928 --> 00:29:06,448
Это не сами по себе тулы, которые нужно знать, это
они тебе помогают что-то делать, решать свои задачи,

167
00:29:06,448 --> 00:29:14,728
когда ты населишь терминали. И пару раз тройку, конечно, погуглив, и если плотно
с этим работать, оно потом как-то в пальцы въедается

168
00:29:14,728 --> 00:29:27,928
и уже не гуглишь. Но, как я сказал, что большинство команд я гуглю, но потом
делаю контр-лэр и нахожу. С другой стороны, можно немного с другой стороны зайти на работу вообще с command-linem.

169
00:29:27,928 --> 00:29:33,728
Я как сейчас человек, который пишет command-line утилиту,
я думаю, а что, как люди будут с ней взаимодействовать?

170
00:29:33,728 --> 00:29:42,528
Какой у них будет первый опыт? И как они вообще будут изучать этот C-Line?
И мне кажется, что он должен быть максимально предсказуемым,

171
00:29:42,528 --> 00:29:51,128
логичным и никаких не вызывать вопросов в голове.
То есть берешь ты там гид-команду, попробуй не гугля, а что-то сделать.

172
00:29:52,048 --> 00:30:01,808
гуглить типа там git force push не знаю что-нибудь в какой-нибудь upstream там другой ну не чем-то такое
а ты такой возьми такой так вот у меня есть git у меня всегда help у меня всегда есть ман

173
00:30:01,808 --> 00:30:12,968
мануал у меня всегда есть какая-то структура в голове команд сап команд у гита есть гит команды
потом есть сап команды например push или там commit или там add submodule то есть все эти штуки они

174
00:30:12,968 --> 00:30:17,488
как бы такие как сап команды выстраиваются потом у каждой сап команды тоже есть хэлп ты по каждой

175
00:30:21,968 --> 00:30:34,748
вот этого вот, то есть ты как на сайт заходишь, ты же не гуглишь как на сайте купить товар.
Ты зашел на сайт и ты понимаешь как его купить и точно так же с командлайном ты заходишь в командлайн, ты что-то пишешь просто

176
00:30:34,748 --> 00:30:49,388
от балды там cat и он тебе объясняет, смотри, тебе что бы cat тебе нужно файл передать, ты такой а ну да cat и файл передал.
То есть как бы вот такое изучение тулы, работы с ней, это тоже прикольный опыт и я как разработчик я всегда вот пытаюсь облегчить этот опыт

177
00:30:51,888 --> 00:31:02,888
И в целом, в будущем, мне кажется, мы перестанем гуглить подобные команды.
Они будут либо логичными, понятными, потому что больше разработчиков будут думать о UX,

178
00:31:02,888 --> 00:31:10,888
о developer experience работы с этой штукой,
либо она будет просто Co-pilot подсказывать, и нам вообще ничего не надо будет делать.

179
00:31:13,550 --> 00:31:31,830
Спасибо, очень много мыслей, мне сейчас просто тоже хочется много у тебя по всем направлениям тоже спросить, но надо выбрать что-то одно.
Первое, что хотел сказать, во-первых, слушатели, вот у нас тут было два тейка про скорость печати, напишите в комментариях, какая у вас скорость печати.

180
00:31:31,830 --> 00:31:49,944
Ну, чтобы как-то, не знаю, вот Саша сказал, что не 50 слов в минуту, ну, напишите нам, много это или мало, какая у вас скорость печати.
тулы вы пользуетесь в том плане что вот какие камонлайн тулы которые может быть мы не назвали

181
00:31:49,944 --> 00:32:03,744
в этом подкасте вот должен знать каждый и то что вот что у вас должно быть на какие слова должны
быть на на концах пальчиков вот когда вы находитесь в терминале я добавлю то есть я добавлю

182
00:32:03,744 --> 00:32:09,424
камонлайн тулы которыми я пользуюсь ну даже может быть не пользуюсь на вот одна из моих любимых это

183
00:32:13,424 --> 00:32:21,864
не знаю какие у нее есть супер команды, я пользуюсь
лишь одной GQ, там кавычки, точки, он мне показывает

184
00:32:21,864 --> 00:32:33,304
Gson, либо ищу там какой-то property, его тоже в формате
Gson достаточно просто искать, еще пользуюсь Head, Tail, ну

185
00:32:33,304 --> 00:32:42,264
и собственно не знаю, даже PS, наверное, у PS я там всегда
тоже гуглю, ну не гуглю, а смотрю каждый раз какие

186
00:32:43,344 --> 00:32:52,504
там рандомно там что-то было е там а и просто так дык дык дык дык дык на
канатуре побольше побольше букв чтобы он мне просто выдал побольше информации

187
00:32:52,504 --> 00:33:02,184
об этих об этих всех процессах но тоже каждый раз гуглю вот напишите слушатель
в как каким вы пользуетесь пользуетесь улайм может быть может быть мы так вместе

188
00:33:02,184 --> 00:33:19,038
найдем еще какие-то новые новые новые тулы Вот, ты начал говорить про командную строку, а вот при дизайне команлайных утилит,
вообще, что важно? Ну, то есть ты начал говорить, что она вот так вот бы разворачивалась,

189
00:33:19,038 --> 00:33:32,358
а разворачивалась, и ты как бы как дерево ее раскрывал, то есть ты как бы ходил по ней,
как по веб-сайту, по какой-то иерархической структуре. Вот...

190
00:33:32,910 --> 00:33:56,870
Комодлайн утилита еще иногда так бывает, что ты ее дизайнишь-дизайнишь, а потом пользователь просто заходит через какой-то там терминал, который ничего этого не поддерживает.
И из-за того, что ты пользуешься своим терминалом там, не знаю, в ZSH, в FISH, по-моему, в этих терминалах, чтобы добавить тебя auto-completion, тебе все равно нужно как-то положить какие-то, что-то сделать дополнительные действия.

191
00:34:02,864 --> 00:34:09,784
положить какие-то скрипты в какое-то место.
И получается так, что разработчик сам, у разработчика, который

192
00:34:09,784 --> 00:34:16,544
разрабатывает Command Line утилиты, он такой тоже зашел в эту
утилиту, там тап-тап, пробел-пробел, у него все подсвечивается,

193
00:34:16,544 --> 00:34:22,024
у него все везде моргает, он быстро, он так же, как
вот developer, адвокат идеи, такой пау-пау-пау-пау, летает

194
00:34:22,024 --> 00:34:30,590
просто по Command Line вот этой утилите. А...
а потом смотреть как пользуются другие разработчики тузуя они там двумя пальцами

195
00:34:30,950 --> 00:34:43,022
просто страдают и набирают одну одну команду за другой вот есть какие-то может быть
даже не user experience штуки, а вот какие-то must-have, что

196
00:34:43,022 --> 00:34:48,382
должно быть у командной утилиты, что у нее важно,
время старта, короткие параметры, нужно ли ставить

197
00:34:48,382 --> 00:34:57,582
дэш либо два дэша, вообще что должно быть прям вот
такого must-have у командной утилиты, чтобы это считалось

198
00:34:57,582 --> 00:35:06,262
как бы, не знаю, хорошо, чтобы ей просто пользовались
люди, расскажи пожалуйста. Да, давай, ну справедливости ради, пока все, что я разрабатываю

199
00:35:07,216 --> 00:35:16,176
пользует потому что как я сказал что все это в альфе но надеюсь что будет и вот короче по
поводу того есть ли какие-то маст хэв гайдлайны

200
00:35:16,910 --> 00:35:24,990
Смотри, насколько я знаю, есть 12-факторный что-то там
application, guideline такой, вот эти 12 факторов, которые

201
00:35:24,990 --> 00:35:32,270
должны там в твоем сервисе приложений присутствовать
обязательно. Вот есть прям такая же штука только для command-line

202
00:35:32,270 --> 00:35:44,430
аппликейшнов. И называется этот сайт CLIG.DEV, типа CLIG.DEV, и там прям первая
страница, это command-line interface guidelines.

203
00:35:44,430 --> 00:35:57,784
Офигенный сайт. как командная строка такая все черно-белая, структурированный, достаточно понятный. И вот
по нему можно пройтись, там прям гайдлайны по каждому, по каждому. Но если что-то прям выделять

204
00:35:57,784 --> 00:36:14,624
для себя, то естественно, ну, наличие хелпа — это база. То есть причем он должен быть как в виде
флажка типа "-h", как в виде "--help", так и в виде хелп и имя команды. Потому что пользователь может

205
00:36:16,784 --> 00:36:22,784
знаешь, как он наберет, и поэтому нужно поддерживать
все вариации хелпа, ну а в нем уже писать все что

206
00:36:22,784 --> 00:36:34,344
угодно, то есть описание команд, описание ключей,
вот это как бы база, без которой никуда. Дальше это сокращение, например, флажков, то есть

207
00:36:34,344 --> 00:36:42,864
у тебя вот, например, есть dash dash help и dash dash h, то
есть короткая и длинная версия. Тоже плюс и минус у самых распространенных флагов

208
00:36:42,864 --> 00:36:54,424
должны быть и те, и другие, и естественно в хелпе тоже
другие, просто чтобы было понятно. Так, из того, что ещё из интересного, это, например,

209
00:36:55,214 --> 00:37:06,814
то, куда мы пишем output. Если кто-то не знает, то у терминала есть два output'a.
Это stdout и stdyear, то есть то, куда мы пишем ошибки,

210
00:37:06,814 --> 00:37:15,694
то, куда мы пишем обычный текст. Так вот, не надо их путать, потому что по этим stdout'ам
некоторые другие программы, например, pipe'ы, могут что-то

211
00:37:15,694 --> 00:37:23,854
брать, что-то нет. Если тебе в pipe'е, например, он читает, например, stdout,
и он там пойдет в программе на вход какая-то, ну, например,

212
00:37:25,168 --> 00:37:35,168
сплит тейп-тап-сепараитет файла по линиям и туда его отправляем дальше. Туда придут
действительно линии, которые мы засепаратили.

213
00:37:35,168 --> 00:37:41,168
А если была ошибка, то она туда уже не придет.
А если мы ошибку будем писать в общей стедау, то нам на следующей

214
00:37:41,168 --> 00:37:47,168
программе придет ошибка, и мы ее начнем там парсить.
И вообще непонятно, какой результат получится. Поэтому разделение

215
00:37:47,168 --> 00:38:02,408
вот этих вот аутпутов — это важно, но это в целом во всех окружениях
поддерживается. ошибок, то есть Exit 0, Exit 1 и так далее. В целом большинство не сильно разделяет эти кода,

216
00:38:02,408 --> 00:38:13,648
вот реально, вот если в REST хоть кто-то как-то мы что-то разделяем, то в command-line application
если все хорошо, то это 0, если плохо, то это 1 и в целом все. Но я тоже так, например,

217
00:38:13,648 --> 00:38:19,328
делаю, потому что если большинство людей не разделяет какая там ошибка, то может оно и не

218
00:38:25,008 --> 00:38:37,388
это все уже какие-то вот здравый смысл. Вот действительно очень важно поставить себя на место того человека, кто будет использовать вот твою программу
твой command-line application и понять, что бы он хотел

219
00:38:37,848 --> 00:38:50,048
как бы он изучал твою программу, какие команды он изучает. Ну например, если у тебя есть структура там git add,
git push, git там что-то еще, git commit, у тебя вот четко

220
00:38:50,728 --> 00:39:00,190
ты можешь увидеть, что второе слово после гита это
глаголов. То есть и после глагола дальше идет уже его...

221
00:39:00,190 --> 00:39:06,350
Собственно, это значит, что команда закончилась.
Все, дальше уже идут параметры, флажки. А вот, например, Git-сабмодуль.

222
00:39:06,350 --> 00:39:13,750
Сабмодуль — это не глагол. Но после сабмодуля пойдет глагол.
И вот когда он пошел, после него ты уже начинаешь тоже делать.

223
00:39:13,750 --> 00:39:19,430
То есть выстраивается такая четкая структура и паттерн
того, что ты в целом, когда ты пользуешь это,

224
00:39:19,430 --> 00:39:25,950
ты можешь даже не заметить, но в этом есть какая-то логика, структура,
которую нужно придерживаться, нельзя менять.

225
00:39:26,544 --> 00:39:31,624
всегда, когда делаю такие сапкоманды, сапсапкоманды,
я всегда эту структуру выдерживаю, потому что, мне кажется,

226
00:39:31,624 --> 00:39:39,384
это просто логично и понятно. Имена там флагов, например, тоже.
Если где-то ты, допустим, есть ряд команд, которые

227
00:39:39,384 --> 00:39:50,110
делают что-то для всех, вот условно там. покажи мне все конфиги, покажи мне все таблицы, покажи мне там все.
И у тебя этот флаг, он передается типа dash dash all.

228
00:39:50,110 --> 00:39:56,310
Ты передаешь его туда, в одной команде, и он работает.
Если в другой команде у тебя по дефолту будет показывать всех,

229
00:39:56,310 --> 00:40:03,950
а чтобы отфильтровать нужно передавать dash dash filter,
то это ломает как бы подход. То есть в одной команде так, в другой так уже людям сложно держать в голове,

230
00:40:03,950 --> 00:40:10,750
поэтому если ты dash dash all везде выводишь, пожалуйста, уводи так.
Если у тебя all это какая-то сапкоманда, пускай она будет везде такая.

231
00:40:12,464 --> 00:40:18,784
предсказуемость и понятность, мне кажется, это самое важное
в Common Line Application, в целом во всем, что мы пользуем,

232
00:40:18,784 --> 00:40:23,304
независимо от того, что это веб-сайт, программа, идеи
и так далее, то есть оно должно быть понятно, если

233
00:40:23,304 --> 00:40:36,110
оно не понятно, пользоваться, наверное, этим не будут.
Вот такие мысли. Я сейчас вот слушал и думал, как бы это могло относиться к Java разработчику.

234
00:40:36,110 --> 00:40:44,190
Какие command-line тулзы пользуются именно каждый день Java разработчику?
Хороший ли у нас command-line тулзы? Ну вот Java это же тоже command-line tool.

235
00:40:44,190 --> 00:40:51,950
Там Java C command-line tool. Там JAR это тоже же command-line tool.
И вот я думал, хороший ли у них интерфейс?

236
00:40:51,950 --> 00:41:04,104
Ну, так. Ну давай так. Знаешь, он, наверное...
Да-да. Я тебе так скажу. C, Java и Jar были бы хорошими Common Land Tula, не было бы

237
00:41:04,104 --> 00:41:16,222
Мевина, Градла и Анта. Потому что, знаешь, я иногда так думаю, эти штуки, они реально просто делают
просто удобнее, и пользование Java C, и вот этими всеми, чтобы все собрать вместе,

238
00:41:16,222 --> 00:41:24,422
и оно, блин, начало работать. То есть, мы просто хотим, чтобы классы, они скомпилировались,
положились в одно место и запустились, и ради этого нам нужен Gradle.

239
00:41:24,782 --> 00:41:34,710
Ну, это я так, конечно, утрирую и шучу, но в целом, да, то есть, то, что ты сказал, что это...
Ну, это сделано просто не то, что... неудобные, непредсказуемые.

240
00:41:34,710 --> 00:41:41,550
То есть каждый раз любой ключ в GVM я всегда гуглю,
и они то через D, то через какие-то другие.

241
00:41:41,550 --> 00:41:47,270
Ну как можно было вообще придумать такую систему
подачи аргументов в command-line application?

242
00:41:47,270 --> 00:41:53,550
Я даже не знаю, это какое-то, видимо, затмение было или
что, потому что есть же примеры нормальных command-line

243
00:41:53,550 --> 00:42:00,350
application, независимые, это компилятор или что-то,
можно просто с ней коммуницировать, более понятно, и это конечно

244
00:42:00,350 --> 00:42:14,084
да, это жестко. что возможно, не уверен что это прям жестко, но в том плане что возможно,
джава же она достаточно старенькая, возможно в 91 году были, знаешь типа,

245
00:42:14,084 --> 00:42:24,384
программисты настолько страдали, что для них вот эти вот тулы джавы казались каким-то,
знаешь, типа вау, просто каким-то невероятным, невероятным, во-первых,

246
00:42:24,384 --> 00:42:29,304
то что они есть, то есть возможно просто в то время оказалось, что это, блин, это, это,

247
00:42:32,784 --> 00:42:45,024
видим какие-то, не знаю, вот я с завистью смотрю на ГО, где там, ну, ты запускаешь
бинарник, там делаешь билд, делаешь раны, все как бы, и все работает, и

248
00:42:45,024 --> 00:42:53,024
смотришь на другие языки, там, например, в Rust есть там package manager, он есть
стандартный, он есть из коробки, там есть Rust App, который сам тебе тоже

249
00:42:53,024 --> 00:43:02,664
стандартный, он помогает тебе обновлять это все. У нас в Java есть там всякие,
есть дикомены, там какие-то еще тузы, которые у менеджера, вот эти

250
00:43:02,704 --> 00:43:14,384
gdk и причем ты менеджить этими gdk может только у себя на лэптопе потому что девопс конечно же он не будет этой
пользу с вашим издики издики мэном че это за хрень для хипстеров

251
00:43:14,784 --> 00:43:25,464
программа которую через sh устанавливается я думаю не один д вопсе или там инженер какой-то не поставит на сервер
там же скрипт на да ну то есть я к тому что как будто

252
00:43:25,864 --> 00:43:39,544
ну как будто есть сейчас более удобные примеры поэтому жалована на фоне этих пример смотрится так
так вот как-то не очень не очень выгодно именно с этой стороны все еще на классе красиво смотрится с точки зрения языка это

253
00:43:39,704 --> 00:43:56,344
элегантный и красивый язык и на нем правда удобно удобно писать но вот вот та часть которая command line tools это прям какой-то
какое-то ну прям страдание вторая вторая мысль которая хотелось сейчас еще задать вопрос вот мы говорим про использование command line tools но вот

254
00:43:58,382 --> 00:44:05,702
Что про написание command line tools именно на джаве?
Я к тому, что command line tool на джаве это java jar и jarnic,

255
00:44:05,702 --> 00:44:14,142
то есть вот так вот в нашем джаве в мире выглядит
command line tools. Стоит ли вообще писать command line tool на джаве, либо

256
00:44:14,142 --> 00:44:22,662
можно написать его на питоне, который там питон есть
почти что на всех серверах, на многих машинах он предустановлен.

257
00:44:22,662 --> 00:44:34,696
Может быть стоит эту command line tool написать на каком-то
там не знаю. Ну, я знаю, это плохо. наверное, но говорить джава подкасте, но даже на гоносе плюс-плюс ты написал, неважно, неважно

258
00:44:34,696 --> 00:44:46,896
как, она как бы будет работать и будет быстро стартовать, будет как бы что-ли
предсказуемым, тебе не нужна в конце концов виртуальная машина для того чтобы она там была

259
00:44:46,896 --> 00:44:55,896
на этом серии, какая версия у этой там виртуальной машины, потому что питон у
все просто, есть второй питон, есть третий, нету 18 питонов, у нас же у нас же этих

260
00:44:58,256 --> 00:45:08,376
просто невероятное количество. Многие скажут, что конечно она там backward compatible, но
все равно их просто много. Просто если ты знаешь об этом, когда ты уже много

261
00:45:08,376 --> 00:45:16,416
знаешь о Java, когда ты не знаешь ничего о Java, тебе
кажется, что это просто какое-то невероятно сложно.

262
00:45:16,416 --> 00:45:24,056
Вот ты когда пишешь VTOL именно на Java, я так понимаю, не
с точки зрения user experience, а с точки зрения старта

263
00:45:24,056 --> 00:45:33,376
и того, что должна быть используется GVM и все.
такое. Вообще, правильный ли это выбор? Может быть, нужно было взять что-то другое?

264
00:45:33,376 --> 00:45:47,736
Командлайн тулы на джаве писать не нужно. Это можно вначале вставить нарезку. Ну, как бы всегда
есть обстоятельства, которые влияют не только на наши прагматичные какие-то представления о том,

265
00:45:47,736 --> 00:45:56,376
на чем бы хорошо было писать, ну и, например, основной язык продукта, для которого ты пишешь этот
командлайн аппликейшн, хорошо было бы, если бы он был написан на том же, если есть такая возможность

266
00:45:58,096 --> 00:46:10,616
проблем. Поэтому вот я, например, сейчас full-time пишу на джаве, но я бы сказал, что для себя я
могу написать что-то на питоне, потому что супер просто удобно, быстро, домашнее что-то, вообще

267
00:46:10,616 --> 00:46:22,696
кому-то не нужно что-то шипить, какой-то продукт, много тестов писать, вот просто для себя. Ну а если
брать какое-то действительно такое решение в вакууме, когда у меня все множество языков,

268
00:46:22,696 --> 00:46:32,616
инструментов есть, на чем бы я писал ком онлайн, это было бы однозначно год, для меня лично
сейчас, потому что, во-первых, я этим языком интересуюсь, смотрю, изучаю, и мне он нравится

269
00:46:32,616 --> 00:46:45,496
в целом, как язык мне очень сильно импонирует Go, поэтому я бы выбрал его. Если по каким-то
причинам не нравится, то можно посмотреть в сторону действительно Python или даже там... Очень много,

270
00:46:45,496 --> 00:46:56,496
кстати, command-line-applications написано на JavaScript. Я когда изучал эту тему, просто куча, они еще
любят эмоджи. Это просто любой JavaScript какой-то command-line, там будут галочки, вопросики,

271
00:46:57,936 --> 00:47:12,656
не сильный фанат этого, но в целом тоже можно, если вы JavaScript знаете. Почему, например,
Java плоха для этого? Естественно, очевидно, это время старта первое, потому что Java стартует

272
00:47:12,656 --> 00:47:25,216
долго. И когда время старта является частью experience, я все-таки так и хотел сказать,
вот без user experience, я вот не могу, я вот на этом помешан. Если эта часть, он ожидает результата,

273
00:47:28,302 --> 00:47:41,182
Это звучит как дикость, во-первых, в мире нашем, когда есть куча других способов запустить программу.
Но вот время ожидания. Если приложение более-менее сложное, более-менее такое...

274
00:47:41,838 --> 00:47:55,438
там внутри есть dependency injection, не дай бог вы spring туда затянули, зачем-то в CLI и так далее, то он будет стартовать 3-4 секунды.
Вот представляешь, тебе health нужно прочитать, ты ждешь 3 секунды. Ну о чем мы говорим?

275
00:47:55,438 --> 00:48:08,758
Поэтому, естественно, это огромный минус. Но если, например, не тащить какой-то DI,
все там писать самому, библиотеки только легкие, то можно там добиться типа в секунду, ну миллисекунд 800 там,

276
00:48:08,758 --> 00:48:15,432
и ты будешь получать что-то типа уже приемлемо,
большую часть инфраструктуры и фишек Java, за которые мы ее любим.

277
00:48:16,750 --> 00:48:24,150
Вот, но есть, естественно, Grail VM, которая нам может помочь
Head of Time Compilation. Мы можем скомпилировать нашу программу с помощью

278
00:48:24,150 --> 00:48:34,110
Grail VM компилятора, собрать его Native Image и получить такую
же скорость, как угол программы. Она незаметна для человеческого глаза, это выглядит моментально.

279
00:48:34,110 --> 00:48:40,430
Но это тоже какие-то свои ограничения, свои приколы
с Grail'ем. Я думаю, что, наверное, в какой-нибудь, может быть,

280
00:48:40,430 --> 00:48:45,830
другой раз можно про это поговорить, но не все там
так гладко, просто и хорошо, не все так круто, как рассказывают

281
00:48:46,704 --> 00:49:02,104
девелопер-адвокат из всех углов. Крутая штука, но еще сыроватая. Вот поэтому, да, короткий
ответ, я бы выбрал Go и не парился. Вот такая вот реклама Go Leng'a у нас в подкасте. В предыдущем

282
00:49:02,104 --> 00:49:16,034
подкасте мы рекламировали Kotlin, в этом подкасте мы рекламируем Go Leng'.
Чему я, собственно, и рад. Языков должно быть много, и потому что, иначе бы, если бы не было вокруг столько языков,

283
00:49:16,034 --> 00:49:25,854
наша Java бы вообще бы не развивалась, осталась бы на том же месте.
Мне кажется, что именно соседние языки играют большую роль, тащат Java наверх.

284
00:49:28,174 --> 00:49:36,454
Саша хотел перейти ко второму блоку, этот блок про
прагматичные практики. Ты вот в своем подкасте, когда читаешь книгу и рассуждаешь

285
00:49:36,454 --> 00:49:48,414
о некоторых практиках, вспоминаешь про стандарты
OpenAPI. И это такая интересная штука конкретно для Java-разработчиков,

286
00:49:48,414 --> 00:49:53,774
потому что каждый, наверное, Java-разработчик в какой-то
момент жизни, когда хочет написать клиента для своего

287
00:49:53,774 --> 00:50:03,128
какого-то любимого Java-сервиса, сталкивается с тем, а как
пишут другие. И тут оказывается, что есть несколько стандартов, вот один из них Open API

288
00:50:03,128 --> 00:50:11,128
И тогда Java разработчик говорит, ну конечно же, мы любим стандарты
Мы со времен... У нас вообще в Java все там стандартно и по стандарту

289
00:50:11,128 --> 00:50:21,128
Мы фанаты стандартов, отлично, есть стандарт, как это дальше сделать?
И там дальше открывается целый дивный номер в мире, что ты можешь делать стандартно, но будет очень неудобно

290
00:50:21,128 --> 00:50:33,248
Либо можешь делать, отходить немного от стандарта и генерировать какие-то более легковесные, не знаю, клиенты
но уже не по стандартам, но другим разработчикам опять же придется разбираться с твоим вот

291
00:50:33,248 --> 00:50:47,328
каким-то самописным клиентом, как им пользоваться и все такое. Можешь рассказать, какую ты задачу
решал в своем проекте и как ты дошел до написания API клиента и чем все в итоге закончилось,

292
00:50:47,328 --> 00:50:53,048
потому что, честно говоря, я не помню, чем закончилось в подкасте. Да, там в общем подкасте это был такой

293
00:50:57,968 --> 00:51:06,968
чекпоинт текущего состояния, как бы, то чем я занимался.
Но задача была простая. Нау SQL база данных, на то и нау SQL, что они not only SQL,

294
00:51:06,968 --> 00:51:13,968
и у них есть, например, REST API у современных и хороших.
И хотелось бы, чтобы они были достаточно предсказуемыми,

295
00:51:13,968 --> 00:51:21,968
шли в ногу со временем и не вызывали вопросов у людей,
и были удобными в том числе. Поэтому, да, я разрабатывал REST API

296
00:51:21,968 --> 00:51:39,048
и выбрал как декларацию интерфейса спецификацию и фиксирование этого API и документирование этого API. Я выбрал оба API
спецификации, но в целом выбор-то достаточно очевидный, простой и лежит на поверхности. Другое

297
00:51:39,048 --> 00:51:51,688
дело, что и многие не пренебрегают очень часто. Это уже другой вопрос почему. Мне кажется,
один из ответов на этот вопрос это то, что вокруг самой хорошей спецификации написано очень много

298
00:51:51,688 --> 00:52:01,248
плохих туллов, которые очень сильно портят experience работы с этой спецификацией.
лишний раз разработчик, который разрабатывает уже

299
00:52:01,248 --> 00:52:09,328
150 первый раз сервис, он подумает, возможно, если
не нужно, нет необходимости декларации этой спеки,

300
00:52:09,328 --> 00:52:15,088
он может быть ее не будет декларировать, потому
что я бы сейчас для внутренних сервисов подумал, не то

301
00:52:15,088 --> 00:52:21,408
чтобы я 100% брал бы, я бы еще посмотрел, потому
что всякие генераторы клиентов, те же самые генераторы

302
00:52:21,408 --> 00:52:29,728
самой спецификации или генераторы бэкэндов из
спецификации, они такие богованные. в том, что не так, это невозможно.

303
00:52:29,728 --> 00:52:36,728
И ты так много времени проводишь, страдая с этими тулами,
что все желание отбивается следовать этой спецификации,

304
00:52:36,728 --> 00:52:42,728
и лучше там думаешь самому написать два раза, блин,
руками навоять спецификацию и бэкэнд под нее написать,

305
00:52:42,728 --> 00:52:49,728
и проверифицировать как-нибудь, и нормально.
Но да, мы сейчас используем генерацию самой спеки из бэкэнда,

306
00:52:49,728 --> 00:52:56,728
то есть у нас декларация интерфейсов, контроллеров, дтошек,
всего-всего, оно в перемешку с микронавтом

307
00:52:57,648 --> 00:53:14,368
анатациями от Open API спеки, после этого на этапе компиляции из этих анатаций делаются всякие
процессинги, в итоге результатом артефактом сборки Rest модуля является Open API спецификация

308
00:53:14,368 --> 00:53:19,808
сгенерированная, которая лежит там же в коде, в гите, по которой, например, очень удобно смотреть

309
00:53:27,568 --> 00:53:34,808
на полреквести я вижу изменения в этом файле.
И я вижу, что вот прям декларация нового endpoint появилась.

310
00:53:34,808 --> 00:53:41,568
Это очень удобно. То есть ты сразу видишь, как изменился интерфейс,
поломалась ли обратная совместимость API, потому

311
00:53:41,568 --> 00:53:47,968
что это очень важно не ломать ее в таких продуктах.
То есть такая вот документация в коде, которая идет с тобой,

312
00:53:47,968 --> 00:53:56,208
и всегда up to date с кодом, потому что генератор говорит,
что 100% оно будет up to date. Это очень удобно.

313
00:53:56,718 --> 00:54:04,558
Ну и с другой стороны, для консьюмеров этого API это тоже очень удобно.
Помимо того, что ты можешь, во-первых, документацию открыть,

314
00:54:04,558 --> 00:54:11,998
которая всегда с кодом соответствует на сайте,
который генерируется из Open API Spaki, ты можешь изгенерировать клиентов из этого Open API Spaki.

315
00:54:11,998 --> 00:54:20,318
Да, не всегда получается. Если бэкэнд достаточно сложный, там есть работа с файлами,
и какие-нибудь там стриминги, сложные какие-то штуки,

316
00:54:20,318 --> 00:54:28,830
связи между сущностями там, то... чтобы сгенерировать из этого какого-то адекватного
клиента, тоже придется, наверное, поприседать.

317
00:54:28,830 --> 00:54:34,630
Но если что-то простое, то делается одной кнопкой,
я и в своих проектах тоже генерирую клиента спокойно,

318
00:54:34,630 --> 00:54:45,678
и это очень удобно. То есть мне не нужно постоянно писать код под...
подновляющиеся API, под изменяющиеся какие-то штуки, я просто добавляю нового клиента, и он у меня работает из коробки.

319
00:54:45,678 --> 00:55:00,118
Так, например, у нас CILA использует сгенерированный клиент из REST. Мы сами dogfood'ем то, что производим.
Поэтому, наверное, вот как-то так. Это очень удобно, одним словом, но есть нюансы, есть кривой туллинг,

320
00:55:00,118 --> 00:55:08,718
про который можно разговаривать вечно, я бы не стал тратить времени, потому что это очень больно,
неприятно и непонятно, как от этого уйти. Непонятно, что с этим делать,

321
00:55:09,072 --> 00:55:25,062
это вот блеск и не счета open source я сталкнулся с абсолютно теми же проблемами то есть в какой-то момент ты встречаешь
OpenEPI такой счастлив как не знаю кто ведь идея очень классная но вот когда

322
00:55:25,062 --> 00:55:35,622
начинаешь это реализовывать в конце вот особенно с аннотациями вот у тебя метод
там называется там не знаю create что-то и на нем просто настолько не знаю 16 этажей

323
00:55:35,622 --> 00:55:47,496
этих аннотаций что ты в какой-то момент такой думаешь блин ну и ради этого я не
боялся его одной аннотации, да тут мне это там какой-то свагер с

324
00:55:47,496 --> 00:55:57,296
OpenAPI, просто невозможно смотреть на этот метод, это превращается в
какой-то такой annotation hell, что просто ну прям больно

325
00:55:57,296 --> 00:56:10,216
смотреть. В итоге, конечно, получается красивый вот этот файлик, но
столько всего в коде приходится как-то хранить вот этих вот

326
00:56:12,816 --> 00:56:21,536
потом тоже какой генерируется клиент да он генерируется тоже хорошие но опять же
проблемы с производительством плане что чтобы там подменить подменить его

327
00:56:21,536 --> 00:56:30,896
какие-то вещи внутри это достаточно тяжело сделать и не может заменить просто
там эти типи клиента вот так вот прям вот легко чтобы что-то там тоже подебажить

328
00:56:30,896 --> 00:56:39,954
и всегда приходится тоже лазить поэтому по этому коду и очень это как-то
неприятно в том плане что возможно возможно ты прав и стоит

329
00:56:40,366 --> 00:56:55,366
стоит, если у вас действительно какой-то клиент и вы хотите контролировать вообще все это, у вас имеет место производительность,
вы сами хотите следить за тем, что и куда возможно, просто стоит написать с нуля аккуратненько,

330
00:56:55,366 --> 00:57:08,402
и когда вы добавляете метод на сервер, вы идете добавляете метод в клиент, пишете тест, что он работает, проверяете, что он там...
правильно вызывается и это вами написанный вручную

331
00:57:08,402 --> 00:57:15,302
ваш любимый код за который вы несете ответственность
как разработчик и если будут баги вы в нем аккуратненько

332
00:57:15,302 --> 00:57:23,062
все это пофиксите отрифакторите а не будьте говорить что
вы знаете это OPNPi кривой мы тут разработчики как

333
00:57:23,062 --> 00:57:31,622
бы хорошие это просто вот там вот какие-то там вот
какую-то фигню написали и как будто происходит такая

334
00:57:33,136 --> 00:57:46,576
на клиента к вашему серверу. Но спецификация действительно, это как сама идея, это очень
хорошо, и описывает свои сервисы понятным языком, это обязательно обязательно к своим, к серверам

335
00:57:46,576 --> 00:58:00,456
пишите документацию и генерируйте как можно больше документации, потому что у некоторых
сервисов вот разбираться, разбираться с тем, как работает каждый какой-то API-клиент, если вам

336
00:58:03,056 --> 00:58:15,616
это просто такой ад и каждый раз просто много бесполезного времени тратишь на это,
которое уходит просто в никуда. С каждой новой версии тебе приходится заново разбираться,

337
00:58:15,616 --> 00:58:29,376
как это все работает. В общем, спецификации хорошо, но вот так что-то как-то и недостигли мы
вот с ZEN с этими спецификациями. И я не знаю, как выглядело бы идеальное что-то. То есть,

338
00:58:32,976 --> 00:58:44,796
как бы выглядела идеальная вот это вот как это workflow когда ты что-то добавляешь фичу там на
сервере она сразу появляется в клиенте может быть есть какие-то какие-то идеи либо примеры

339
00:58:44,796 --> 00:58:58,366
удачных тузов где таку ау как у вас круто все это вместе генерируется и взаимодействует
Да, я вот не раз на самом деле пытался представить себе какой-то такой тул, возможно даже с позиции

340
00:58:58,366 --> 00:59:09,366
человека, который мог бы в целом такой тул написать, там вот, куда бы упороться.
И пока на самом деле я не сильно много каких-то открытий для себя сделал, размышляя над всем этим,

341
00:59:09,366 --> 00:59:19,366
потому что, ну, попытка уже не первая на самом деле сделать какую-то вот такую универсальную штуку,
и она постоянно вот о грабле реальности разбивается, потому что слишком много всего хочется потом

342
00:59:22,320 --> 00:59:34,778
неконтролируемо. Поэтому мне кажется, что возможно подход шипинга конкретных...
Что-то универсальное сделать я пока не готов задизайнить, что-то универсальное.

343
00:59:34,778 --> 00:59:46,478
Но что-то конкретное, например, вот у тебя есть клиент, сервер, ты хочешь обеспечить между ними взаимодействие какое-то,
вот какое ты описал, что на сервере появилось, что-то на клиенте, там оно как-то само потом пошло.

344
00:59:46,478 --> 00:59:56,478
Ну вот, я бы сейчас, если я хочу прям делать какой-то продуктный уровень там базы данных,
я бы писал своих клиентов и поставлял бы их отдельными библиотеками.

345
01:00:00,432 --> 01:00:09,952
где-то работает, я могу обеспечить обратную совместимость, как я хочу, все там реализовать,
и для пользователей это будет наилучший, для пользователей, я имею ввиду для консюмера

346
01:00:09,952 --> 01:00:20,652
твоего клиента, тот, кто его у себя в коде использует, это будет лучший опыт, потому что ты там все,
у тебя есть контроль там внутри. Так что это вот первая такая мысль, что если есть какая-то

347
01:00:20,652 --> 01:00:29,912
узкая задача, я бы ее решал тоже узкой, я бы не делал какой-то широкий, какую-то вундерваффлю,
которая во всех случаях, для всех возможных языков будет работать, потому что передо мной

348
01:00:30,352 --> 01:00:42,352
такой задач не стоит. А какой-то стандарт, я думаю, в целом, Open API спецификация, как сама
спецификация, она достаточно хорошая. Ее реально можно написать руками самому, ее можно прочитать,

349
01:00:42,352 --> 01:00:56,472
по ней можно генерировать что-то. Вопрос просто в поддержке и в качестве туллов, и тех, кто их
пишет, и сколько на них времени тратится, и ресурсов. Это же просто open source, который никто особо не из

350
01:01:00,272 --> 01:01:11,072
например, хсвагер-генератор, который генерирует документацию, и сервер тебя поднимает,
ты можешь документацию. Он в целом OK. И с ним проблем редко бывает, когда вот с вот этой частью.

351
01:01:11,072 --> 01:01:20,792
Проблема возникает с тем, что пишут обычные люди, которые приходят и хотят сделать там,
об, генерацию клиента для микронавта, генерацию клиента для спринга, для какого-нибудь еще,

352
01:01:20,792 --> 01:01:25,552
для нативной Java. Вот в этих штуках проблемы, мне кажется, просто контроль, может быть,

353
01:01:30,192 --> 01:01:36,852
собственных генераторов. Если есть такие ресурсы, если вы какая-нибудь там
большая компания, которая много занимается open-source,

354
01:01:36,852 --> 01:01:43,132
можно вот этому просто внимание уделить и сделать
просто этот продукт более контролируемым и качество

355
01:01:43,132 --> 01:01:50,086
проверять там. А что-то такое, я, знаешь, пока даже не уверен, в каком
направлении мы двинемся, потому что с генеративными

356
01:01:50,086 --> 01:01:57,406
моделями вся эта генерация и вся эта штука, она может
кардинально поменяться. И я бы даже сейчас, будучи каким-нибудь большим инвестором

357
01:01:57,406 --> 01:02:04,686
или большой компанией, я бы не занимался инвестицией
вот в тулы, какие мы сейчас обсуждаем. Я бы подумал, подождал бы немножко, посмотрел, как

358
01:02:04,686 --> 01:02:17,600
себя поведут генеративные модели. И в целом, генерация документации идеально те модельные генерируют.
Вот уже сейчас может это делать. Ну, под вопросом, но возможно тоже сможет сделать.

359
01:02:17,600 --> 01:02:24,560
Проверять, что клиент соответствует серверу, почему нет?
То есть, вот эти все проблемы, которые мы обсуждаем, они

360
01:02:24,560 --> 01:02:32,400
в целом могут быть решены теми моделями, которые сейчас
очень сильно развиваются. Поэтому вот есть такие две ветки, либо контроль качества

361
01:02:32,400 --> 01:02:39,120
и написание, просто вливание ресурсов условно вот в эту
штуку в Open Source, который этим занимается, либо вообще

362
01:02:39,120 --> 01:02:50,202
это будет генеративная модель. Посмотрим, в интересное время живем.
Очень интересно, что ты напомнил про вот эти вот про генеративные модели, потому что тоже сейчас много, ну то есть весь твиттер завален

363
01:02:51,262 --> 01:03:04,522
хайпом про них, что когда они там заменят разработчиков, когда они заменят тестировщиков, когда они заменят, ну всех просто заменят, ходят и заменяют всех
всех подряд вот и с этой мысль хотел спросить тебя про

364
01:03:05,422 --> 01:03:18,510
тестировщиков в том плане, что ты в начале подкастка сказал, что ты привержен TDD и тесты во первых
Во-первых, мне очень понравилась эта фраза, вот мне кажется, что это достаточно хороший ручифицированный перевод фразы

365
01:03:20,174 --> 01:03:30,554
типа тест тест фест тесты во-первых он достаточно достаточно приятно звучит
вот расскажи как ты пишешь тесты тесты во-первых потому что я не пишу тесты

366
01:03:30,554 --> 01:03:41,534
во-первых я их пишу уже потом когда когда у меня все все все все сломалось вот
расскажи пожалуйста как ты вот если тебе нужно писать допустим да какой

367
01:03:41,534 --> 01:03:52,954
конкретный пример вот ты пишешь ком онлайн тулзу давай это будет ком онлайн
тулза для генерации выпусков выпусков подкастов, какие, как бы ты писал вот ее с помощью

368
01:03:52,954 --> 01:04:02,770
TDD. Так, ну у нашей Тулзы что на вход идет?
Выпуск МП3, а из нее что-то выходит? Давай любые, вот все, что ты сейчас придумаешь для

369
01:04:02,770 --> 01:04:08,590
тузы, для генерации подкастов, вот то мы и разберем.
Ну давай придумаем, потому что я на самом деле вот сейчас

370
01:04:08,590 --> 01:04:15,990
нахожусь в процессе небольшом придумывания чего-то такого,
потому что я хочу сделать, чтобы мой подкаст сопровождался

371
01:04:15,990 --> 01:04:26,190
постами на моем сайте, и там была расшифровка и транскрипция
всего подкаста. И давай вот какой вход для нашей коробочки есть,

372
01:04:26,190 --> 01:04:34,144
и какой будет выход. Вот вход — это mp3-файл, очевидно.
И какая-то мета-информация, которая, например, ну, например,

373
01:04:34,144 --> 01:04:42,704
все ссылки на, ну, корневые ссылки на Apple Podcasts, на Яндекс.Музыку,
то есть ссылка на подкаст, не на сам выпуск, а вот типа

374
01:04:42,704 --> 01:04:48,544
корневая, а потом ID-шник, потом после выкладывания.
То есть RSS-фит какой-то, то есть все вот эти артефакты,

375
01:04:48,544 --> 01:04:55,264
они туда идут на вход. И на выходе я хочу получить, например, статический, ну,
с сайтом, конечно, проблема тестировать HTML, это фигня

376
01:04:55,264 --> 01:05:06,384
какая-то. Ну, давай будет на выходе какой-нибудь файл, пускай
и в нем будет несколько полей, будут там 5 ссылок на все соцсети с выпуском и

377
01:05:06,384 --> 01:05:16,146
собственно таймкоды в Gson, ключ значения таймкод и текст.
Вот, есть импут и есть вход. Это очень важно.

378
01:05:16,146 --> 01:05:27,546
Вот я так мыслю всегда обо всем. То есть, common line application легко мыслит импут, что-то вошло,
что-то вышло, black box такой. Но и про классы, про методы, про все, с чем я работаю,

379
01:05:27,546 --> 01:05:33,506
я всегда мыслю, как black box штуки, потому что потом,
когда я или мои коллеги будут с ней работать, она

380
01:05:33,506 --> 01:05:39,586
для них и будет black box. Они такие, вот у меня есть метод, что ему надо дать
и что я получу. Вот реально все, что их интересует.

381
01:05:39,586 --> 01:05:46,100
Редко когда тебя действительно интересует внутренняя реализация,
хэшмапы используются или там concurrent хэшмапы, да

382
01:05:46,100 --> 01:05:53,920
всем все равно. Ну ты можешь определить контракт, что он thread-safe или
не thread-safe, да это важно. Но какие-то внутренние вещи, они не интересные.

383
01:05:53,920 --> 01:05:59,100
И мне, когда я пишу, тоже они в начале не интересные,
потому что мне нужно в начале вот этот вот интерфейс

384
01:05:59,100 --> 01:06:07,960
сделать. Если мы говорим про command-line application и про тесты вперед,
на самом деле тема такая, достаточно щепетильная,

385
01:06:07,960 --> 01:06:16,520
потому что нормально протестировать command-line application, вот с точки
или даже вот такого высокого уровня функционального,

386
01:06:16,520 --> 01:06:23,960
типа я на вход подал три файла, запустил там через
командную строку команду и получил какой-то результат.

387
01:06:23,960 --> 01:06:32,440
Эта задача вообще нетривиальная. Я вот в свое время на это потратил недели две фуллтайма,
я ресерчил, как можно такие тесты в целом написать,

388
01:06:32,440 --> 01:06:55,278
чтобы их без боли писать. И в итоге я написал свой микрофреймворк такой, но он пока что движение, чтобы допилить до какого-то состояния, чтобы можно было показать публичности, он еще не дошел.
Но в целом он условно выглядит так. Я пишу вот эту команду, там, mike-cli--input-file-tara-la-la-ta-pala.

389
01:06:55,278 --> 01:07:10,712
Вот просто такую строку написал. Типа вот, я запускаю вот это типа given, потом я жду пока она отработает. Вот тоже.
execution и у тебя есть exit code, то ты можешь в коде понять, что exit code прошел и ты получил

390
01:07:10,712 --> 01:07:20,752
результат. А если у тебя интерактивная штука, то она постоянно output производит, и ты не знаешь,
когда она закончит этот output производить. Там тоже плясок много. Ладно, это тоже такое отступление.

391
01:07:20,752 --> 01:07:31,832
Условно говоря, я пишу верхний уровень тест, пускай вот реально я бы с чего начал бы, сейчас я
бы написал бы, допустим мы не говорим про сяний, про что у себя локально, я бы написал типа создал бы

392
01:07:35,152 --> 01:07:43,252
и через Java run, через runtime сделал бы run command
и прямо бы сделал бы вот моя команда, как я ее себе вижу

393
01:07:43,252 --> 01:07:51,652
и прямо строку бы передал какая есть строка
и потом, дальше бы сказал, что вот output там output будет редиректиться в output stream

394
01:07:51,652 --> 01:08:02,852
я бы этот stream скомвертнул в строку и посмотрел, что эта строка в себе содержит JSON
и в нем есть поля какие-то просто в начале, типа очевидные

395
01:08:02,852 --> 01:08:15,338
после этого я Запускаю тест и очевидно он у меня падает, я вижу что он не работает.
я иду, всё, начинаю реализовывать, типа всё, я себе как бы вот на этом этапе я поставил себе задачу, какую мне сейчас надо решить.

396
01:08:15,338 --> 01:08:24,078
Мне нужно, чтобы тест прошёл. Это вот первая такая итерация. Я написал падающий тест.
Я никак, то есть это ничего, у никого упорства нет, я просто написал тест, и он потом будет работать.

397
01:08:24,078 --> 01:08:31,958
Я пошёл уже в Main, создал класс там, сделал его максимально кривым, максимально тупым, потому что я сейчас о реализации тоже особо не думаю.

398
01:08:38,832 --> 01:08:46,872
каких других больше, без налчеков, без всего.
Предположил, что Happy Pass, написал под это код, запустил

399
01:08:46,872 --> 01:08:55,902
тест, он прошел. Замечательно. Это первый круг итерации тест-дривер-девеллотн на
пройден. точнее не круг, а мы его завершаем в конце

400
01:08:55,902 --> 01:09:01,742
нужно сделать рефакторинг того кода, который ты написал
то есть у тебя был красный тест, ты сделал тест зеленым

401
01:09:01,742 --> 01:09:09,042
теперь делаешь код нормальным я пошел, естественно теперь как-то его порефачил
ну кстати на первой итерации я бы его вообще не трогал

402
01:09:09,042 --> 01:09:19,222
и написал бы второй тест в втором тесте я например передаю mp3 файл, которого нет
не существующий файл запускаю, он у меня падает, потому что у меня там файл found или какой-нибудь npe вообще выскочит

403
01:09:19,222 --> 01:09:26,756
потому что я же код писал, не думая про это
я пошел, эту багу пофиксил код заработал на этом этапе уже можно подумать о

404
01:09:26,756 --> 01:09:34,156
каком-то рефакторинге, но вроде бы еще ничего рефачить такого не надо
потом я там начинаю понимать, что мне нужен какой-то ключик новый, который будет

405
01:09:34,156 --> 01:09:42,256
отвечать за то, что у меня формат json не будет содержать тайм-кодов, а будет
только блок-пост генерировать то есть вот такая штука

406
01:09:42,256 --> 01:09:47,136
и я иду, пишу на этот тест, что если вот такой
флаг, то у меня там нет тайм-кодов, никаких цифров

407
01:09:47,136 --> 01:09:52,616
в этих полях ну просто json-pass-ом каким-то делаю, regexp
и говорю, что вот есть такое поле, и в нем

408
01:09:52,976 --> 01:10:05,096
какие-то слова. Вот делаю assert, получаю тоже красный, иду обрабатываю этот флаг, пишу новый if,
уже вижу, что ага, у меня if, и у меня есть два процессора файлов, я уже такой, ага, я могу вынести

409
01:10:05,096 --> 01:10:16,196
вот эти два процессора в какой-то интерфейс, в какой-то другой класс конфигурируемый, и чтобы
он работал. Вот в этом моменте я делаю refactoring, привожу код в порядок, тесты работают. И вот так вот

410
01:10:16,196 --> 01:10:46,896
постепенно на каждом шаге задача максимально тривиальная и понятная, мозги на самом деле реально
ты начинаешься представить все решение сразу, все что тебе нужно это выдать из себя первый вот этот вот тест, потом уже реализацию легко идет и дальше оно как бы накатано и ты просто в процессе вот в этом вот потоке фигач-фигач-фигач и выходишь потом у тебя дофигище тестов и нормальная переиспользуемая, конфигурируемая реализация выходит и как будто бы оно того стоит в конкретном этом примере.

411
01:10:52,878 --> 01:11:03,878
Вот они мне дают как раз уверенность в том, что я написал то, что я хочу, а не просто написал класс, который что-то выдает,
а потом в command-line у меня не распарчивались реальные аргументы и у меня упало там с NPE.

412
01:11:03,878 --> 01:11:13,878
Ну и что мне этот тест как бы дает? Поэтому я сюда сразу пишу максимально верхнеуровневые тесты, которые возможны.
Вот, наверное, какой-то такой пример, который ты дал, я бы так его разрабатывал.

413
01:11:14,606 --> 01:11:27,346
Да, спасибо большое, мне кажется это очень хороший пример мыслительного процесса и действительно прикольно, что можно
кодить не используя клавиатуры, это очень здорово, разобрал все кейсы, то есть ты объясняешь, я понимаю, ага, вот тут добавляем

414
01:11:27,346 --> 01:11:34,046
ИВчик, вот тут прям вот у нас тут какой-то еще процессор
интересно, как передаются, передаются даже голосом

415
01:11:34,526 --> 01:11:38,326
понятные программистам концепции

416
01:11:44,560 --> 01:11:56,240
вот команда онлайн утилитов конечно круто вы протестировали такие тут молодцы и сидите такие
умные вы моем приложении на работе видели да там задница там он стартует три минуты и что и

417
01:11:56,240 --> 01:12:10,600
если это ладно интеграционность не могу написать g unit тест так я чтобы создать один бин мне надо
туда засетить 16 бинов и чтобы из каждой из этих 16 бинов создать надо либо написать там 16 16

418
01:12:14,480 --> 01:12:32,240
Вот такое полотнище кода на верифаях, на каунтах, на моках,
которые просто невозможно поддерживать. Как мне писать через TDD, если у меня уже такой беспорядок в коде?

419
01:12:32,240 --> 01:12:39,160
И большинство разработчиков, неправда, приходят на проект,
а там уже кем-то написано без TDD, там уже все плохо.

420
01:12:44,400 --> 01:12:57,720
только повосхищаться тому, как там все прекрасно работает. У каждого есть такой, как бы, чулан,
чулан, либо что балкон со старыми вещами, который не разобран. Вот что делать с ТДД и таким вот

421
01:12:57,720 --> 01:13:09,400
старым чуланом, в котором даже не понятно. Ты там одну достаешь оттуда из этого чулана, не знаю,
велосипед, а там сверху на нем, оказывается, какие-то коробки стояли, они тебе раз по башке,

422
01:13:14,320 --> 01:13:23,320
то есть ты просто в какой-то безвыходной ситуации.
И конечно здорово ходить, вот они смотрят на конференциях,

423
01:13:23,320 --> 01:13:31,320
на TDD, на разные G-Unit фреймворки такие, вау-вау,
потом приходят к себе на работу такие, ну, здорово послушали,

424
01:13:31,320 --> 01:13:40,320
как бы у меня очень было приятно, ну а теперь за реальную работу.
Это все конечно очень интересно, но теперь надо заниматься делом.

425
01:13:44,240 --> 01:13:55,240
сможет ли ТДД как-то помочь в этой ситуации?
Да, мысль... Я примерно... Вот так же я мыслил все время, то есть вот все, что ты сейчас

426
01:13:55,240 --> 01:14:04,240
рассказал, я уже через это прошел, когда прям знакомился почти, начиная от тех
замечательных спикеров на конференциях, которые с нуля начинают чистый проект

427
01:14:04,240 --> 01:14:13,240
писать, и у них все настолько красиво, круто, и все работает, и реально ты такой
ну, круто, ребят, конечно, но у меня реальные проекты, у меня есть работа, в

428
01:14:14,160 --> 01:14:29,040
вас и я ее делаю и поэтому вот с нуля пожалуйста демки свои там лайф кодинги пишите тд д круто
супер реально вся developer advocate они вот так пишут код и меня это честно говоря очень сильно

429
01:14:29,040 --> 01:14:41,480
раздражало я думаю что многих людей тоже потому что вот ты не чувствуешь за этим правды когда
тебе говорят я сейчас spring boot 3 все подниму здесь мне сервис мы здесь будем сейчас магазин делать

430
01:14:44,080 --> 01:14:54,880
поднял, ты понимаешь, что это просто эмуляция реальной разработки. В жизни так не бывает. В
начале я думал, что у меня что-то с жизнью не так, потому что это у меня что-то не то. То есть

431
01:14:54,880 --> 01:15:04,840
я вот они показывают, а я, ну у меня вообще по-другому. Но потом, когда уже достаточно много кода пишет,
ты понимаешь, что нет, у тебя все в порядке, это все, наверное, по-другому к этому стоит относиться.

432
01:15:04,840 --> 01:15:20,400
И поэтому я всегда, когда начинаю разговаривать про тдд или про какие-то такие вот developer
я максимально начинаю сразу понять аудиторию, с кем я говорю, что я с вами, я вместе с вами пишу код,

433
01:15:20,400 --> 01:15:29,440
я каждый день пишу код, я не девелпер-адвокат, и я им никогда не буду, я чувак, который просто
любит программировать и делиться об этом с людьми, и поэтому все, что я говорю, это то,

434
01:15:29,440 --> 01:15:38,560
что происходит в реальной жизни, то есть я так код пишу реально, вот, поэтому если говорить про

435
01:15:43,920 --> 01:16:02,138
например, сразу теста на самого высокоуровневого, то есть когда ты на input даешь команду и на output'е проявляешь там файл, например, существования, он тоже как бы...
И идея написания этого теста, она пришла ко мне с опытом, потому что я понимаю, что если сейчас... в начале я писал unit-теста, то есть я создавал класс,

436
01:16:02,138 --> 01:16:16,478
и бы там, импатри-файл-процессор, на него бы создал тест, и ему бы подавал уже на вход джавовский файл.
На выходе я бы ожидал, что у меня тоже будет джавовский файл, и я бы эти два файла ассертами там сравнивал.

437
01:16:16,478 --> 01:16:29,952
Но я не начал так код писать, потому что так можно, но это не прагматично, потому что ты начинаешь завязываться на конкретную реализацию,
вот как ты сказал в этом чулане, это равносильно тому, что ты в чулан руку засовываешь и

438
01:16:29,952 --> 01:16:42,552
пытаешься там что-то этой рукой достать, но ты не достанешь, потому что все рассыпется.
Но когда ты ставишь задачу, вот у меня есть этот чулан, но мне нужно в этом чулане найти какой-то

439
01:16:42,552 --> 01:16:51,592
предмет. И я задачу ставлю не к тому, что я вот руку засуну и буду его доставать, я говорю,
что вот у меня есть предмет, не было предмета, потому что я что-то сделал, у меня предмет есть.

440
01:16:51,592 --> 01:16:59,852
Я на таком уровне начинаю писать тесты, то есть я поднимаюсь максимально,
высоко, чтобы не говорить про реализацию. А реализация может быть любой. Я могу сунуть

441
01:16:59,852 --> 01:17:11,112
руку в чулан, действительно. А я могу заказать какого-то монтажника, который по веревке сверху
достанет с другой стороны на балконе. Я это в тесте не указываю, я на это не завязываюсь. Я говорю,

442
01:17:11,112 --> 01:17:24,672
что мне нужен результат. И когда на таком уровне мы пишем тесты, вот это вот наследие, этот легосетер,
она уже начинает играть меньшую роль. Действительно, бывают ситуации, я не раз в них попадал, когда я

443
01:17:25,072 --> 01:17:34,392
Таких тестов просто невозможно написать. Есть какая-то интеграция с какой-нибудь древней очередью,
чтобы её поднять, там нужно этот класс. Бывает.

444
01:17:34,392 --> 01:17:42,592
В таких случаях я либо-а просто не пишу тесты вперёд,
ну потому что бывает. И себе дороже реально сидеть и упарываться.

445
01:17:42,592 --> 01:17:48,912
Это уже какой-то оккультизм, когда ты уже без этого не
можешь код писать. Нет, пожалуйста, неудобно, я не пишу.

446
01:17:48,912 --> 01:17:57,452
Я сильно себя не утруждаю вот этими стараниями и
выглядеть вот этим вот адептом, который постоянно это пишет,

447
01:17:57,452 --> 01:18:03,572
это вообще нет. Когда есть возможность, когда это в кайф, когда
это прикольно, я это делаю, когда нет, я смотрю на возможности,

448
01:18:03,572 --> 01:18:08,812
а как можно было бы так сделать, если я помню, что
здесь нужно все переписать, перефигачить, я такой, ну

449
01:18:08,812 --> 01:18:17,252
и ладно, напишу я просто код, вставлю я этот if, этот
флажок и напишу максимально верхнеуровневый тест в

450
01:18:17,252 --> 01:18:22,892
той тестовой системе, в той тестовой парадемии, в которой
живет проект и не буду ничего с этим предпринимать,

451
01:18:24,912 --> 01:18:31,912
в свое время оно тоже имеет ценности, не всегда идеи
стоят того, чтобы им всегда следовать. Поэтому вот так вот...

452
01:18:31,912 --> 01:18:37,272
А, ну можно еще, например, у меня даже доклад-то был
самый мой первый в жизни доклад на работе, я как

453
01:18:37,272 --> 01:18:43,552
раз про ТДД рассказывал, и он назывался типа ТДД
в реальной жизни, что-то типа того, я прям сразу позиционировал

454
01:18:43,552 --> 01:18:52,032
это как вот не какой-то бул-чета, а реальный мы сейчас будем.
И чтобы быть прям трушным-трушным, я в лайф-кодинге брал свою

455
01:18:52,032 --> 01:19:01,752
заданную, ну это был внутри, в компании, я брал тикет
из бэклога своего в джире, двигал его in progress, создавал ветку, реализовывал это все в TDD,

456
01:19:01,752 --> 01:19:13,632
коммитил и типа вот мой рабочий реально в нашей джире процесс, я в TDD показывал это как keynotes.
Ну естественно я подготовился, я не брал те тикеты, которые будут очень сложные,

457
01:19:13,632 --> 01:19:25,386
я брал обычные какие-то там вот бэкфиксы вообще идеально просто, только так проскакивает в TDD.
и life coding я естественно подготовил, в плане не предзаписал, но у меня были какие-то в голове код,

458
01:19:25,386 --> 01:19:35,874
который я буду писать, потому что life coding не подготовлен, это что-то невозможное, поэтому я готовился.
И поэтому, реально, в этом докладе, в котором я тогда

459
01:19:35,874 --> 01:19:45,074
делал, там как раз был пример баги. То есть был какой-то сервис, который реально интегрировался
с каким-то древним сервисом, который сложно было поднять.

460
01:19:45,074 --> 01:19:56,974
Но была бага, которая была сконцентрирована в каком-то
одном объекте, в каком-то одном классе. И я увидел, что этот класс можно в целом вынести из…

461
01:19:56,974 --> 01:20:06,688
Даже не класс, а метод. Этот метод можно вынести в класс.
в класс, ты можешь этот метод тестировать в отрыве от того объекта здорового, частью которого этот

462
01:20:06,688 --> 01:20:17,828
метод является. Поэтому вот такой первый рецепт, если можем вынести код, который мы фичу добавляем или
багфиксим в отдельную какую-то сущность, и она не выглядит искусственной, а какой-нибудь там, ну,

463
01:20:17,828 --> 01:20:28,088
парсер, например. То есть, у тебя большой статический класс, который внутри себя есть метод, он парсит,
но вынесет это в отдельный класс парсер, создает, чтобы он настраивался какими-то настройками парсинга,

464
01:20:31,248 --> 01:20:42,258
строку или что тебе нужно. Выносим функциональность в отдельную сущность в класс.
пишем на него тесты как угодно, потому что мы уже вытащили это из чулана

465
01:20:42,258 --> 01:20:49,858
и можем с этой коробочкой отдельно играться и ее тестировать.
Да, это не такие большие верхнеуровневые тесты, но это тоже тесты, они тоже полезные.

466
01:20:49,858 --> 01:21:03,358
То есть вынесение в отдельную сущность — это рецепт, который я всегда использую, если есть возможность.
Вот такие, наверное, мысли. Про вынесение в отдельную сущность я подумал, какая может быть аналогия с чуланом.

467
01:21:06,512 --> 01:21:14,032
велосипед падает, подергался за велосипед, так, велосипед
дергаешь, коробка сверху валится. Но ты как бы долго смотришь на этот чулан и в конце концов

468
01:21:14,032 --> 01:21:22,612
находишь те вещи, которые можно оттуда вынести, которые
не связаны, у которых loose coupling, так называемый, и

469
01:21:22,612 --> 01:21:27,332
ты потихоньку их выносишь, и когда ты уже вынес две
коробки там, не знаю, стояли на полу с книгами, ты уже

470
01:21:27,332 --> 01:21:34,092
можешь зайти в этот чулан и посмотреть с другой стороны,
а за что там цепляются как бы те самые, те самые лыжи.

471
01:21:36,432 --> 01:21:49,632
можешь тестировать вот так вот потихонечку, вынося компоненты по DDD,
как бы смотря, рассматривая и рисуя диаграмму, что от чего зависит, склеивая

472
01:21:49,632 --> 01:21:58,672
какие-то компоненты вместе. Вот, это про аналогии. А про сам DDD,
слушай, очень здорово, мне очень понравилось, что ты сделал именно такой доклад на работе,

473
01:21:58,672 --> 01:22:12,798
который типа, смотрите, мы тут все коллеги, давайте вместе, давайте вместе просто...
попытаемся разобраться с этим тикетом потому что это полезно и для тех кто создает этот тикет они вид как разработчик читает этот тикет

474
01:22:12,958 --> 01:22:23,950
просто любой и что как он понимает что что нужно сделать куда нужно пойти потому что само описание тикета это тоже
часть, часть проблемы иногда в тикете просто, ну, если он

475
01:22:23,950 --> 01:22:30,230
хорошо написан, так он и занимает полчаса, а если
он плохо написан, он занимает три часа и очень хорошо даже

476
01:22:30,230 --> 01:22:36,150
вместе устраивает такие какие-то воркшопы, чтобы
люди видели, как разработчик садится, там отодвигается,

477
01:22:36,150 --> 01:22:42,310
включает компьютер, ставит кофе, сколько времени занимает
вот понять, что, что вообще происходит в такой системе.

478
01:22:42,310 --> 01:22:49,510
То есть, конечно, вот если вы слушатели, если кто-то
из слушателей хочет провести какой-то доклад, вот хорошая

479
01:22:50,864 --> 01:23:04,704
собрать в одну комнату людей, которые заинтересованы в этом, показать, как вы действительно работаете,
потому что вы увидите столько проблем, вы увидите и люди увидят, как насколько вам

480
01:23:05,184 --> 01:23:15,004
что легко делать, а что тяжело делать. Это очень хороший пример.
Спасибо тебе за него. Еще, Саша, хотел тебя спросить про

481
01:23:15,784 --> 01:23:25,584
билдеры. Ты же изначально, когда пришел вот
в подкаст или в личку начал писать, ты писал в комментариях

482
01:23:25,584 --> 01:23:37,304
к выпуску про DSL. Вот мы в прошлом выпуске обсуждали DSL, Kotlin и всякие
там объекты, и ты говорил, что у тебя есть мнение про

483
01:23:37,304 --> 01:23:46,984
билдеры. Это еще не популярное мнение, не популярное мнение, еще
прибереги. Но вообще, вот как ты относишься к билдерам, и то есть надо

484
01:23:46,984 --> 01:23:56,144
ли геерить, тоже как по спецификации, надо ли там
аннотации, аннотации ставить, либо в этом плане, что ты как Java разработчик должен как бы сесть

485
01:23:56,144 --> 01:24:08,544
спокойно, у меня есть Person и сейчас моя обязанность как разработчика аккуратненько написать Person
Builder, потому что за это мне и платят деньги, чтобы Person Builder был аккуратный написанный,

486
01:24:08,544 --> 01:24:15,224
написанный человеком, чтобы там не знаю, Name, чтобы не генерировать тебе там не знаю там,

487
01:24:20,624 --> 01:24:29,944
протестировано объект протестирован как ты подходишь к разработке своих
персональных проектах вот интересно используешь ли ты генерилки любил дыры и на

488
01:24:29,944 --> 01:24:41,990
работе как ты вот пишешь билда расскажи пожалуйста про это
Да, вопрос хороший. Билдеры мне нравятся. Я как только познакомился с этой концепцией, сразу начал над ней размышлять.

489
01:24:41,990 --> 01:25:03,270
То есть это, наверное, один из таких паттернов, которые на слуху, которые реально полезны и очень часто могут пригодиться.
Потому что их неумелое использование, скажем так, или оно максимум что может навредить, так это на какие-то ненужные сущности напишут разработчики зеленые билдеров и будут радоваться.

490
01:25:03,824 --> 01:25:15,424
не такая проблема, как если всегда будут использовать фабрики, абстрактные фабрики,
всякие там бриджи, вот это вот все, не понимая вообще, оно здесь нужно или нет. Вот это вот паттерн

491
01:25:15,424 --> 01:25:28,638
один из таких, которые я бы всем советовал junior разработчикам овладеть им и там, где нужно использовать.
Дальше про то, использую ли я где-то их у себя в проекте или на работе.

492
01:25:28,638 --> 01:25:41,238
Ответ короткий, да, всегда использую, но стоит отметить, что на работе, например, я вот пишу такой код, который...
Ну вот у меня нет такой задачи много писать кода. Вот это такая специфика у меня работы.

493
01:25:41,238 --> 01:25:48,158
У меня есть задача много дизайнить коды и думать о том, как он будет работать, потому что одна такая ошибка,

494
01:25:53,872 --> 01:26:03,752
И в этом плане для меня ценность написания кода, значимость
boilerplate, кто-то может сказать, что это boilerplate, она очень

495
01:26:03,752 --> 01:26:14,392
мала, потому что вот я дизайню 95% времени код, опять я его
реализовываю. И вот эти 5% будет ли там пол-пол-пол процента билдеров,

496
01:26:14,392 --> 01:26:20,432
что я потрачу времени, или не будет, или я там ламбок
использую, он мне там оптимизирует 0,01 среди этих 5% и вообще

497
01:26:20,432 --> 01:26:28,750
все равно. Главное, как я задизанил код и как он работает.
Вот, поэтому да, я пишу на работе билдеры для сущности,

498
01:26:28,750 --> 01:26:34,270
которые гоняются между сервисами, объектами, которые
мы в тестах создаем, на которые мы в тестах пишем

499
01:26:34,270 --> 01:26:42,350
ассерты, то есть наши вот эти вот штучки, которые
как раз бегают между сервисами. Обязательно я на них пишу, потому что когда вот эти

500
01:26:42,350 --> 01:26:49,390
маленькие, вроде бы незначительные вещи продуманы и сделаны
с душой, с любовью, то можно, ты их используешь,

501
01:26:49,390 --> 01:26:53,870
у тебя вот в кайф, например, тест даже написать и создать
какого-то персона с какими-то такими интересными полями

502
01:26:54,704 --> 01:27:06,344
там, что у него адрес с несуществующим пост-кодом, и в это время у него еще отрицательный дом,
там, то есть какой-то такой кейс, и те, кто его создать, вот я три аспекта в адресе указал,

503
01:27:06,344 --> 01:27:17,384
я три строчки напишу, и больше ничего не будут писать, потому что сам код задизайнен так,
что не нужно создавать вот этот вот адрес и вызывать у него конструкторы с 15 параметров,

504
01:27:17,384 --> 01:27:29,984
первые три будут налы, потом пустые строки нули, потом та самая наша вот адрес строка,
типа, ну то есть это невозможно, на это не хочется с этим работать, естественно, путается и читать это сложно.

505
01:27:31,022 --> 01:27:37,662
Поэтому вот это такое внимание к мелочам, я бы сказал,
которые я в целом люблю. Я люблю внимание к мелочам, и в коде оно тоже проявляется.

506
01:27:37,662 --> 01:27:50,542
В домашних проектах все зависит от. Вот в последнем, который я реализовал, я использовал
билдеры на ключевых объектах, которые очень часто я использую,

507
01:27:50,542 --> 01:27:56,782
в том числе это были юзеры и их какие-то данные, которые
были прям частью бизнес-логики.

508
01:28:00,976 --> 01:28:12,976
какие-то инфраструктурные вещи, то, что я много в тестах не использую, вот так сформулирую.
Я этот ламбок использовал, генерировал билдеры из ламбок или линей, потому что в целом тоже

509
01:28:12,976 --> 01:28:25,456
можно использовать. А вот то, что мне важно, я прям такой ламбок в сторону и руками кропотливо,
тщательно, с любовью пишу и в целом вот так я к этому отношусь и везде использую. Такой короткий

510
01:28:25,456 --> 01:28:36,374
ответ. Или нет? Не, достаточно короткий ответ.
Я... Ну, мне опять же нравится этот подход, билдеры.

511
01:28:36,374 --> 01:28:43,454
И даже не знаю, меня вот единственное может быть в нем смущает
то, что на ревью вот такой подход, когда вот ты уже считаешь,

512
01:28:43,454 --> 01:28:50,054
что тут, наверное, не нужен билдер, а потом на ревью
тебе говорят, может быть, билдер добавим. И ты такой, а может добавим.

513
01:28:50,734 --> 01:28:59,594
А может и получается что как-то непонятно, когда нету четкого определения
Вот здесь мы делаем так, а вот здесь мы не делаем не так

514
01:28:59,594 --> 01:29:15,194
Это остается на отку программисту и у всех разное понятие того, что считается безопасным кодингом на джайве
То есть получается что как будто для этой структуры данных нету какого-то точного стайл гайда

515
01:29:16,174 --> 01:29:25,014
вот так вот плохо, а вот так вот хорошо, и мы теперь делаем хорошо. Поэтому каждый раз
получается такой вопрос, что а вот как вы относитесь к этой к билдерам? А вот мы

516
01:29:25,014 --> 01:29:35,214
пользуемся, а вот мы не пользуемся. А вот мы пользуемся тогда, а он пользуется никогда. И
получается очень много такого какого-то шума вокруг такой полезной полезной концепции и

517
01:29:35,214 --> 01:29:40,254
такого перекладывания друг друга тикеток надо ли это писать, не надо ли это писать. Хотя,

518
01:29:49,102 --> 01:29:58,502
и линтерами как это отловить. То есть нету какого-то общего решения,
чтобы встал Марк Рейнхольд и сказал, что да,

519
01:29:58,502 --> 01:30:08,222
билдеры нужны, все теперь пишем так, и все послушались.
То есть такая концепция, которая... Давай я тебе поделюсь, как я эту проблему решаю.

520
01:30:08,222 --> 01:30:16,102
Да, давай. Проблему ты подсветил реально важную.
Как я ее последнее время решаю? Во-первых, я немножко философски отношусь к коду,

521
01:30:16,102 --> 01:30:28,576
к работе, к своимодействию. как не написал билдер, я не буду ему никогда в ревью
писать, а напиши, пожалуйста. Даже если это мой код изначально был, и там все билдеры написаны,

522
01:30:28,576 --> 01:30:34,496
я не буду ему говорить, напиши билдер, потому что
я считаю, что главное, чтобы код был работал, и на него

523
01:30:34,496 --> 01:30:40,376
было достаточно количество тестов написано.
Потом у меня будет настроение, при наличии этих тестов

524
01:30:40,376 --> 01:30:46,496
я этот билдер допишу сам. Мне вот оно ничего не стоит.
Вот по кайфу просто написал, 10 пальцев печать, 50 слов

525
01:30:46,496 --> 01:30:53,456
в минуту, у меня эти билдеры. Я никогда не скажу.
Но хочется же, чтобы люди писали. Реально.

526
01:30:53,456 --> 01:31:01,736
Какое решение? Например, можно жесткий гайдлайн вести, стайл-гайд,
написать в конфлюенсе, жирным. Мы пишем билдер.

527
01:31:01,736 --> 01:31:07,016
И потом на каждом ревью, как дурачок, ссылку на
этот конфлюенс отправлять и делать еще один круг,

528
01:31:07,016 --> 01:31:13,616
еще один прогон ся, еще усложнять и без того сложную работу.
Без на то необходимых причин, как мне кажется.

529
01:31:14,542 --> 01:31:23,542
Я этот... Это не про меня. Я так... На своем проекте я бы никогда так не делал.
Росткие стайл-гайды. Это... Вот я как сказал, философски отношусь к коду.

530
01:31:23,542 --> 01:31:30,542
Главное, чтобы он работал и был протестирован.
А как человек пишет, это его подчерк. Не нужно брать руку человека и за него вводить ручкой.

531
01:31:30,542 --> 01:31:36,542
Ну, ты возьми, тогда сам лучше напиши. Главное, чтобы, ну, адекватно все было.
И вообще, когда есть такое большое количество стайл-гайдов,

532
01:31:36,542 --> 01:31:47,056
мое личное мнение, начинается смещаться фокус
от деталей, таких как билдер, там, налобл, нотнал, аннотация, вот это вот вся мишура,

533
01:31:47,056 --> 01:31:54,776
и мы начинаем не замечать, а вообще код, он как бы
следует каким-то open-closed принципам, он компонуемым,

534
01:31:54,776 --> 01:32:01,096
выражена ли в нем логика, легко ли его понять, то
есть вот эти вещи, они куда-то начинают уходить, и мы все,

535
01:32:01,096 --> 01:32:07,296
что мы делаем, это вот эти style guide начинаем соблюдать.
Поэтому я больше вот смотрю на то, что понятно ли выражена

536
01:32:07,296 --> 01:32:13,096
мысль, то есть вот человек написал поэму своим почергам,
я ее могу прочитать, могу, мне нравится что-то содержание,

537
01:32:13,096 --> 01:32:23,936
нравится, все, принимаем. Вот, но как, опять же, возвращаясь, хочется же, да, мы же пишем
билдер, хочется, чтобы остальные писали. Я вот придерживаюсь такой идеи, как софт пауэр, что

538
01:32:23,936 --> 01:32:29,816
ли, или как она, когда ты на примере показываешь,
что это прикольно, это удобно, и люди начинают следовать

539
01:32:29,816 --> 01:32:38,456
этому просто сами, по своей воле. Ты засылаешь на ревью какой-то класс, который аккуратненько
написан, и тесты на нем, и ты видишь использование

540
01:32:38,456 --> 01:32:49,216
этого билдера, ты видишь, как это удобно, и так или
какие-то упоротые там, ну, начинают замечать такие

541
01:32:49,216 --> 01:32:54,736
вещи, они начинают их сами писать. Просто сами.
И если это действительно полезная, хорошая, удобная

542
01:32:54,736 --> 01:32:59,176
практика, то большинство людей начнет так или иначе
эти штуки писать, и у нас команда их пишет, я ни

543
01:32:59,176 --> 01:33:04,136
одному ни разу в жизни не сказал на ревью «напиши
builder», они их пишут сами, потому что видят, что это

544
01:33:04,136 --> 01:33:13,136
удобно просто. Вот и всё. Точно так же про какие-то другие там нормальные комментарии
коду. Я, например, вот странности пишу в тестах, я пишу slash

545
01:33:14,256 --> 01:33:20,956
Потом даю какой-то сетап, типа подхадавливаю входные
данные, environment, после этого пишу slash-slash-pen, делаю

546
01:33:20,956 --> 01:33:27,356
action, типа вызываю там endpoint у сервиса, и потом zen,
slash-slash-3 блок, и в нем уже делаю ассерты.

547
01:33:27,356 --> 01:33:34,236
То есть у меня все тесты, вот все буквально, они разделены
на такие вот три блока. И в целом, никого, естественно, на ревью я не буду просить

548
01:33:34,236 --> 01:33:40,276
так писать, но это дебилизм, если я так попрошу.
Но люди потом, когда пишут, дополняют тесты, они тоже

549
01:33:40,276 --> 01:33:57,718
так пишут, потому что просто это логично, удобно, это
воспринимать тест легче. Вот как-то так. да, отличная идея и мне тоже кажется что не стоит все-таки программирование не стоит нагружать линтерами

550
01:33:57,718 --> 01:34:08,718
ну иначе вы не дождетесь плуреквеста, ваш код просто в следующий раз не отправят
вам не поправят ни одну, не попробуют улучшить код если в какой-то момент вы будете добавлять код на стонет

551
01:34:08,718 --> 01:34:14,718
слишком, слишком сложно я хотел переходить к третьему блоку, третий блок у нас про софт-скилы

552
01:34:18,672 --> 01:34:24,432
как к этому подвести, спрашивать вопрос у человека, который
если подкаст нужны ли, софт-скилы программисту

553
01:34:24,432 --> 01:34:35,652
как-то неловко, потому что подкаст, мне кажется, это
и есть ответ на этот вопрос. Но может быть у тебя есть какие-то истории, какая-то

554
01:34:35,652 --> 01:34:42,272
история, которая показывает, когда ты вообще в первый
раз, ну не то что в первый раз понял, а когда ты увидел,

555
01:34:42,272 --> 01:34:51,592
насколько софт-скилы важны, или насколько они тебя,
поразили как кто-то решает софт скиллами проблему,

556
01:34:51,592 --> 01:34:58,332
которую ты не можешь решить там, не знаю, программированием.
Вот есть у тебя какой-то яркий момент в жизни, когда

557
01:34:58,332 --> 01:35:05,232
тебя поразили софт скиллы кого-то, либо ты увидел,
что да, вот это вот конечно нужно развивать.

558
01:35:05,232 --> 01:35:16,286
Давай для начала уточним, а что такое софт скиллы,
вот что ты под ними понимаешь. я под софтский хороший вопрос я под софтский лайм понимаю все что не хард

559
01:35:16,286 --> 01:35:28,126
скиллы то есть все что все что все что программисты делает вне написания кода
софт скиллы это написание текста софт скиллы это все что мы говорим голосом

560
01:35:28,126 --> 01:35:41,366
это митинги переговоры выступление софт скиллы это то даже как-то не знаю там
зовешь кулеру попить попить чай все что не работа это софт скиллы все что все

561
01:35:41,680 --> 01:35:53,040
относятся к hard-skill, то есть у нас есть hardware, у нас есть software, то есть я про
это как-то делаю вот такое разделение в том плане, что то, что человек может

562
01:35:53,040 --> 01:36:04,358
решить не кодом, а проблема, которую он может порешать голосом,
тикетами, текстом выступлениями, не знаю, еще чем, какими-то дополнительными

563
01:36:04,358 --> 01:36:11,958
дополнительными штуками, не своим конкретно
Hardware-скелами, вот, такими программистскими.

564
01:36:11,958 --> 01:36:19,758
Вот, у тебя какое представление о соц. скиллах?
Что ты понимаешь про соц. скиллах? Да, до сегодняшнего, ну, до вчерашнего дня, пока

565
01:36:19,758 --> 01:36:27,878
я не прочитал пост Вастрика про соц. скиллы, последний, по-моему, заметка, я мыслил вот один-в-один,
как ты говоришь. Все, что не hard, это софт.

566
01:36:27,878 --> 01:36:36,512
Но он там делает такое небольшое уточнение, что
что, во-первых, формулировка звучит так. Софт-скилы — это те скилы, которые не являются хард-скилами

567
01:36:36,512 --> 01:36:46,312
— программированием, знанием библиотек и так далее,
всё, что вы понимаете под хард. Всё, что ими не является, но в то же время двигает

568
01:36:46,312 --> 01:36:53,934
вашу работу вперёд, помогает вам достичь результата
в работе. И в этом плане, почему я так и делаю акцент, например,

569
01:36:54,334 --> 01:37:00,774
то, как вкусно я готовлю кофе, оно не является софт-скилом.
И то, как я часто его предлагаю своим коллегам,

570
01:37:01,054 --> 01:37:09,574
оно в какой-то мере... Я налаживаю отношения,
но если мы это отпустим, то качество кофе, оно не софт-скил, хотя тоже скил.

571
01:37:10,134 --> 01:37:20,528
Это такое вот уточнение просто. Но в целом, твое определение мне подходит, откликается, я с ним согласен.
Так вот, давай, наверное, уже к вопросу, к самому, к твоему.

572
01:37:20,528 --> 01:37:27,288
Ты спросил, что были ли такие моменты, когда меня
какое-то озарение, когда-то я понял, что вот это оно

573
01:37:27,288 --> 01:37:37,694
нужно было. Прям есть конкретная хорошая история, но я немного хотел
бы к ней подвести. откуда у этого озарения как бы почва пошла

574
01:37:38,414 --> 01:37:49,394
возможно это какая-то история тоже возникновения подкаста будет я вообще был лютым адептом подкастов они я считаю что они сделали из меня
инженера и вообще того кто я сейчас есть потому что

575
01:37:49,894 --> 01:38:03,534
как-то я случайно на них набрел вот реально где-то статью на хабре там еще тогда хабр читал на первом курсе универа вот и
какие-то подкасты что-то я начал и понял да ну естественно там все эти классики радио ти да в зен

576
01:38:04,688 --> 01:38:11,828
достаточно быстро нашел кучу-кучу-кучу всего штук.
15-20 в пике у меня было подкастов, которые я на еженедельной

577
01:38:11,828 --> 01:38:19,888
основе все слушал. Ты понимаешь, сколько времени я на это тратил, но, во-первых,
я их слушал на x2, я вот обрел скилл, и сейчас я до сих

578
01:38:19,888 --> 01:38:26,428
пор на x2, и мне иногда медленно, чтобы ты понимал.
То есть, я, потому что если я слушаю не на x2, то я начинаю

579
01:38:26,428 --> 01:38:31,588
в свои мысли уходить, и все, пока я уже не слушатель
подкаста, я уже делаю свои дела, думаю о своем.

580
01:38:31,588 --> 01:38:42,242
А вот на x2 оно как-то в голову мне врезается лучше.
Опыт, можно сказать. Затем сами вот эти вот разговоры, рефлексии и обсуждения каких-то штук,

581
01:38:42,242 --> 01:38:51,442
они меня дико вдохновляли, потому что, во-первых, ты начинаешь больше думать о том, что ты делаешь,
ты начинаешь с людьми больше разговаривать, знакомиться, вот, например.

582
01:38:51,442 --> 01:39:02,922
И в целом разговоры об вот этих профессиональных штуках, которые, как бы, вроде бы ты должен знать.
Ты в университете выучили, ты книжек Талмутов начитался, всё, ты профессионал.

583
01:39:02,922 --> 01:39:19,376
Какой подказ? Зачем об этом разговаривать? с детства с ними рос, и меня они очень сильно вдохновляли, и я думал, что вот одна из моих таких
первых мечт в самореализации — это сделать свой подкаст. Ну, естественно, я думал, что это, во-первых,

584
01:39:19,376 --> 01:39:30,576
сложно, во-вторых, я кто я такой вообще, чтобы что-то говорить в подкасте, вообще я же не Бобук,
блин, я просто Саша Пахомов, кто меня будет слушать вообще. Ну и так далее, куча вот этих штук,

585
01:39:30,576 --> 01:39:43,216
и они во мне долгое время сидели. Это вот такая предыстория к озарению. Дальше теперь переходим
к самому озарению. Писала как-то свою любимую command line to loo, писала-писала, много ей уделял

586
01:39:43,216 --> 01:39:53,416
внимания и была такая штука как Ignite Summit, которая проводится раз в полгода. Не там ребята
зовут разработчиков, просто рассказать про то, что они делают в базе данных пользователям этой

587
01:39:53,416 --> 01:40:04,336
базы данных. Ну и меня как автора собственно позвали, сказали Саше сделай пожалуйста нам
Keynote, сделай нам презентацию, в общем расскажи. И тут я столкнулся с тем, что надо сделать,

588
01:40:06,576 --> 01:40:16,896
как бы видосики монтировать тоже не сильно умел и микрофона у меня не был я такой так давно хотел
микрофон мечтал о подкасте возьму нормальный микрофон пускай будет потом как-нибудь подкаст запишу

589
01:40:17,518 --> 01:40:28,318
купил себе вот этот Road Podcaster и принялся там к составлению каких-то сценариев,
лайв-кодингов. В общем, это был самый большой мой трудовой рабочий день за всю

590
01:40:28,318 --> 01:40:38,758
мою историю. До этого у меня был трудовой день в 17 часов, когда я работал на
автомойке в Липецке. Вот. А этот был рекорд 24 часа, я присидел перед компьютером,

591
01:40:38,758 --> 01:40:47,426
не отходя. потому что я старался сделать видос.
И после того, как я его сделал, как я посмотрел, как я в нём выгляжу,

592
01:40:47,426 --> 01:40:54,746
как я его веду, как я себя чувствую, вообще весь этот процесс,
пережив, я понял, что мне очень многого не хватает

593
01:40:54,746 --> 01:41:03,026
в как раз тех самых софт-скилах. Мне не хватает умения говорить, просто банально.
Вот говорить, чтобы меня можно было слушать.

594
01:41:03,026 --> 01:41:09,986
Я себя слушал на видосе, я такой, да и господи, ну что это вообще такое?
То есть, мне дико, кринж просто максимально испытывал,

595
01:41:09,986 --> 01:41:24,240
но это как бы нужно было сделать. было выбора откосить. Поэтому все-таки этот кринж пришлось произвести. Дальше, например, там то,
как я, в принципе, доношу мысль, то есть да, говорить это одном языком как бы, молодь, но вот

596
01:41:24,240 --> 01:41:35,680
структуризация мысли, вообще способность из своей головы вот эту картинку перенести в голову
другим людям, это тоже софт-скил, который я тоже понял, что им нужно овладеть, потому что доходчиво

597
01:41:35,680 --> 01:41:42,998
объяснить то, что ты хочешь объяснить, это вообще-то сложно.
И вот после этого саммита, после этого выступления,

598
01:41:42,998 --> 01:41:50,278
я посмотрел на видос, я понял, что мне нужно многому учиться,
и я начал расписывать план как проактивный человек,

599
01:41:50,278 --> 01:41:57,158
рефлексирующий, я подумал, что я могу сейчас сделать,
чтобы исправить вот эти 24 часа кринжа, которые со мной случились,

600
01:41:57,158 --> 01:42:05,966
чтобы в следующий раз мне доставило удовольствие, а не боль.
И я вспомнил, да, вот эти вот внутренние желания сделать подкаст,

601
01:42:06,006 --> 01:42:14,686
они как-то, знаешь, вот этот, я вот этот кринж испытал,
и он меня больше не сдерживал. Я такой, ну всё, теперь я буду подкаст сделать, как бы, чё, чё бояться-то?

602
01:42:15,006 --> 01:42:27,046
И погнал, то есть я прочитал книжку, что-то из взрывной подкасты, я сделал себе идеи,
я нашёл дизайнера, вступил в сообщество, мне нарисовали обложку, я нашёл звукомонтажёра,

603
01:42:27,286 --> 01:42:34,000
я всё подготовился, записал там пару-тройку выпусков,
мне в целом понравилось, я даже думал, что будет сильно хуже.

604
01:42:34,000 --> 01:42:40,500
Но когда ты добавляешь какие-то… Вот когда не один это делаешь,
а когда люди тебе помогают, кто умеет, сильно лучше выходит.

605
01:42:40,500 --> 01:42:47,000
Вот. И после этого я начал с той мотивацией, что я просто
хочу научиться доносить мысли и хочу научиться говорить.

606
01:42:47,000 --> 01:42:57,838
Я начал делать подкаст. Теперь, какие изменения я заметил, вот, реально ли это работает условно.
Ну, в целом, это можно оценить, но ты, например, со мной не разговаривал

607
01:42:57,838 --> 01:43:04,478
до подкаста, когда у меня не было подкаста, то есть сейчас бы эта беседа,
она выглядела немножко бы напряженней и немножко бы сложнее,

608
01:43:04,478 --> 01:43:13,478
если бы у меня не было подкаста. Сейчас намного проще говорить.
Это первый такой очевидный, яркий плюс. И как он в работе мне помогает?

609
01:43:13,478 --> 01:43:22,112
Это просто, то есть пока ты не поймешь и не сможешь видеть результаты вот этого,
над собой, ты не сможешь представить и оценить ту

610
01:43:22,112 --> 01:43:27,912
пользу, которая тебе приносит вот эта активность.
Когда я сейчас на митингах, на стендапах, на обычных

611
01:43:27,912 --> 01:43:35,238
вот, начинаю объяснять, что я делал. Самое банальное, вот каждый день, ну ладно, кто-то там,
не каждый день, но вот у меня были мы время, когда

612
01:43:35,238 --> 01:43:41,998
я каждый день с утра мы вставали и у нас был стенд-ап,
и мы просто обсуждали стандартные митинги, короче.

613
01:43:41,998 --> 01:43:47,638
И вот когда я начинал просто так, у меня была вот то,
такая-то проблема, я ее описываю, то есть я понимаю, что человеку

614
01:43:47,638 --> 01:43:56,158
нужно понять, что я делал. Мне не нужно отчитаться и произнести какие-то тикеты,
жиры и номера и статусы, а мне нужно людям дать представление

615
01:43:56,158 --> 01:44:08,852
о том, что я делал. сразу же storytelling какой-то начинает сетку. Ну вот у меня там была такая проблема, я с ней
столкнулся, когда решал вот это. Исходя из этого, я погуглил вот это, посмотрел там и, в общем,

616
01:44:08,852 --> 01:44:18,152
обнаружил, что вот эта часть функциональности, она работает не так, как мы себе представляли. Ну и,
в общем, начинаю просто говорить, и люди понимают, и намного меньше возникает вопросов, о чем там

617
01:44:18,152 --> 01:44:27,232
Саша целыми днями занимается, вообще он там код пишет или нет. И людям лучше, комфортнее
воспринимать меня, и мне спокойнее, я понимаю, что я могу донести свою мысль, в том числе на

618
01:44:30,192 --> 01:44:38,952
плюс преимущества, это естественно какие-то выступления.
В последнее время у меня есть достаточно большое количество

619
01:44:38,952 --> 01:44:45,152
внутренних выступлений, то есть когда мы подготавливаем
какой-то дизайн, какого-то решения, нужно его расписать,

620
01:44:45,152 --> 01:44:53,232
нужно его представить, обосновать, что у этого решения есть
вот такие-такие-такие pros and cons, то есть плюсы, минусы

621
01:44:53,232 --> 01:44:59,392
и так далее. Ты это все расписываешь, во-первых, в тексте, но про
текст пока мы не говорим, ты просто делаешь какой-то

622
01:45:00,112 --> 01:45:22,112
Документы, возможно это будет презентация, возможно нет, и потом на созвоне, который вот может длиться час, например, ты весь этот час рассказываешь, объясняешь доходчивы людям.
И после этого, вот реально я начал получать, мне в личку люди пишут, приходят, говорят, просто офигеть, как бы, настолько бодро, живо, и мне понравилось вообще, что ты рассказывал, что просто респект тебе.

623
01:45:30,032 --> 01:45:40,412
решения технические, которые как бы ну чё, мы ж код пишем, ну зачем это всё. Но вот затем,
что до кода есть много работы, которую тоже надо производить, в том числе обсуждать документацию,

624
01:45:40,412 --> 01:45:51,152
решение и так далее. Это вот про голос, про подкаст. Есть ли у тебя что-то ещё спросить,
а то я хотел немного к тексту перейти, но боюсь, я уже и так слишком много говорю.

625
01:45:52,302 --> 01:45:57,822
не отлично, мы же подкасты, в котором если в подкасте
мы говорим про подкасты, значит, значит все хорошо,

626
01:45:57,822 --> 01:46:03,062
мне кажется, что должно быть правило, что в подкастах
о подкасте должно быть безлимитное количество

627
01:46:03,062 --> 01:46:21,950
времени. Ну, у меня, наверное, вот... Ну, то есть для меня тоже как-то это было таким откровением, насколько можно...
То есть когда ты стараешься и читаешь, и прокачиваешь, вот говорят вот там во всяких интернетах, не читаете интернетах,

628
01:46:21,950 --> 01:46:36,150
потом говорят, вот когда ты качаешь вот эти hard-скилы, насколько твои прокачанные hard-скилы дают тебе на самом деле не так много...
Ну, то есть ты их очень тяжело прокачиваешь, очень тяжело изучаешь новую какую-то технологию,

629
01:46:37,104 --> 01:46:53,604
как бы ты очень тяжело заметить свой рост, насколько ты вырос, потратив столько много сил,
потратив много сил, гораздо меньше сил на софт-скелы, ты получаешь просто такой дивный новый мир,

630
01:46:53,604 --> 01:47:02,844
ты начинаешь писать лучше текст, твои заголовки в тикетах начинают быть интересными,

631
01:47:07,024 --> 01:47:18,904
либо блокбастер, твои видосы и твои как бы как ты
выглядишь перед камерой тебе приятнее находиться, то есть прокачав немножко софт-скилов я бы так сказал ты получаешь очень большое

632
01:47:19,584 --> 01:47:30,224
гораздо больше выгоды, то есть на 20 процентов увеличивая софт-скилы ты получаешь 80 процентов выгоды
как бы не знаю просто в общении на работе написание текста

633
01:47:30,504 --> 01:47:44,304
окачая хард-скилы на 80 процентов больше стараясь стать программистом
сильный, сильный, сильный программист, который решает сложные проблемы, ты получаешь удовлетворение

634
01:47:44,304 --> 01:47:58,794
где-то гораздо меньше, чем сколько ты... как бы тратишь усилий. Наверное, такая формула, она будет работать не всегда, зависит от того,
насколько у тебя низкие были hard-скилы или soft-скилы в начале. Возможно, у других людей,

635
01:47:58,794 --> 01:48:08,154
конечно, все по-разному, но вот лично мой опыт конкретно такой, и я вообще в восторге от того,
что как много проблем в мире решается со soft-скилами, и когда ты видишь людей,

636
01:48:08,154 --> 01:48:22,928
которые владеют словом, владеют языком, владеют письмом, насколько они не владеют hard-скилами,
решается просто вот хорошими софт скиллами таким вот софт софт веер не

637
01:48:22,928 --> 01:48:33,048
нам не нужно не решать проблемы в железе решите проблемы в софт софт
скиллах протекст начал уже говорить расскажи пожалуйста то есть я так

638
01:48:33,048 --> 01:48:42,408
понимаю идея такая чтобы чтобы начать презентовать чтобы начать говорить тебе
нужно сначала придумать что говорить чтобы придумать что говорить нужно

639
01:48:46,928 --> 01:48:58,328
набросать какой-то конспект сценарий с те же самые слайды как ты пришел вообще к тексту и
начал ли ты кстати вести свой блог я вот не видел либо как-то как ты ведешь заметки

640
01:48:58,888 --> 01:49:15,568
расскажи пожалуйста вот про про софт-килы в плане в плане текста в плане текста
слушай ну по поводу блога вообще я когда пытался наладить свою публичную деятельность мой первая попытка это как раз был блог я типа сделал статический на хьюго сгенерил сайт

641
01:49:16,848 --> 01:49:29,688
и такой, ну вот будут там блоги писать. Написал первый блог как раз про билдеры,
понял, что это слишком долго времени занимает, это слишком отдача какая-то слабая, и я решил,

642
01:49:29,688 --> 01:49:43,368
что вот классический блог — это не про меня. Но после этого я решил стартануть, начать делать
телеграм-канал, и это вот как раз то, что мне дает какую-то еженедельную подпитку каких-то

643
01:49:46,768 --> 01:49:59,008
обсуждать можно, но тоже это специальный выпуск надо делать, а тут что-то посетила какая-то мысль, и ты ее взял и
записал. Причем это же обладает, даже не при чем, а в первую очередь это обладает

644
01:49:59,328 --> 01:50:11,448
терапевтическим эффектом. Когда ты свои мысли выражаешь в бумагу, ты как будто бы начинаешь с собой как с психологом разговаривать.
То есть у тебя какая-то болит вот техническая тема, вот ну часто на работе какая-то вот на ревью что-то тебе сказали,

645
01:50:11,608 --> 01:50:19,288
такое едкое, ты такой вот сидишь и думаешь, ну вот ты же не скажешь, пойдешь человек,
а потом, пришл, напишешь вот это техническое решение,

646
01:50:19,288 --> 01:50:29,088
я считаю, что оно не такое, потому что... И начинаешь как бы сам с собой это дискутировать.
Написал, тебя отпустило, ты запостил, еще там тебе поставили лайков, кто-то в комментах пришел,

647
01:50:29,088 --> 01:50:37,888
ну как бы отпустил ситуацию. Это такой вот эффект телеграм-канала,
который я веду уже, наверное, года три. Он достаточно маленький, но он и не рассчитан на то,

648
01:50:37,888 --> 01:50:45,288
чтобы в нем было много людей. Он больше вот такая психотерапевтическая штука для меня личная,
и она мне доставляет огромное количество удовольствия.

649
01:50:46,608 --> 01:50:57,808
И идет, возможно, какое-то структурирование, написание адекватных текстов в тех же самых тикетоджирах,
как ты упомянул, или в Google Docs, которые мы тоже пишем на работе, чтобы как-то все описать.

650
01:50:58,478 --> 01:51:10,598
потому что это просто абсолютно такая же мышца, как и любая другая.
Мозг и рукавы. В целом, если тренировать долго руку, то она начнет поднимать тяжелые тяжести.

651
01:51:10,598 --> 01:51:18,918
Если мозг долго будет писать тексты, и ты их пишешь, анализируешь и пытаешься это улучшить,
то они станут лучшие, и они по-любому начнешь лучше писать.

652
01:51:18,918 --> 01:51:26,878
И это умение лучше писать, оно отразится везде.
В том числе в джеретики, прикольно, что ты, кстати, отметил,

653
01:51:28,432 --> 01:51:40,332
описанный, описанный Джиро тикет, вот когда на refinement ты, например, сидишь, оцениваешь тикеты, и вот представляешь, для человека, который ничего не понимает,
тут он видит большой такой тикет, там, мотивейшн, там, что-то, description, там,

654
01:51:41,052 --> 01:51:54,672
как это должно закончиться, как результат он выглядит, какое-то, может быть, решение предложил, ты думаешь, ну, все, это 100 500 story points и работа на полгода.
Ну, таки, один story point, пошли дальше. Тут такой тикет коротенький, там бага, короче, тест флакает, и все-таки, ууу,

655
01:51:54,952 --> 01:52:03,332
ну, это story points 13, не меньше. И человек с наручной
в смысле, там одна строчка, там двести одна строчка, как вы так оцениваете? Так вот так и

656
01:52:03,332 --> 01:52:13,612
оцениваем, потому что когда тебе на вход понятная структурированная информация приходит и все ее
понимают, не нужно больше тратить то время, которое мы закладываем в тикет, вот на этот investigation

657
01:52:13,612 --> 01:52:24,632
условно, чтобы понять, что не так и решить. Когда тикет описывает, что не так, ты уже понял,
и ты такой, а, да я знаю, даже знаю, что нужно написать. Поэтому это очень важно, и вот написание

658
01:52:28,272 --> 01:52:39,912
нам конечно на английском не native speaker тяжело, но вот как я уже отмечал в
этом помогает как раз chat gpt вот это как раз та его сильная сторона которая может

659
01:52:39,912 --> 01:52:49,472
помочь действительно то есть на вход я даю свой кривой не нативный английский
а на выходе получаю просто супер вообще native и причем он читается легче то есть

660
01:52:49,472 --> 01:52:57,792
это не просто я такой ой как я круто написал вот буду там такие обороты нет
я вот вижу два текста я уже такой более менее начитанный я вот свой читаю

661
01:52:58,192 --> 01:53:03,632
постоянно запинается глаз, то есть я спотыкаюсь, я такой
«ммм, мысль не льется вот по строкам», а чат-гпт

662
01:53:03,632 --> 01:53:09,432
мне сгенерил, я просто вот так вот читаю сверху вниз
и всё, я как бы понимаю, то есть в этом плане он сильно

663
01:53:09,432 --> 01:53:15,872
помогает и я его использую, честно признаюсь, в тикетах,
которые я на паблик пишу, я прям засылаю их в чат-гпт,

664
01:53:15,872 --> 01:53:22,232
почти что 100% копирую, убрав какой-то bollerplate, который он
там пишет, let's prioritize this ticket, то есть я ему даю как

665
01:53:22,232 --> 01:53:26,312
бы промд, говорю «ты короче технический писатель, тебе
нужно тикеты в джире писать для технического продукта,

666
01:53:26,312 --> 01:53:35,358
вот пожалуйста». Он всякий бред нам в начале в конце пишет, я это отрезаю
и вот суть оставляю. Ну и без него там на русском, когда я писал тикеты, тоже

667
01:53:35,358 --> 01:53:42,918
скилл написания помогает. А что касается документов Google Docs, т.е. тикеты это все-таки
более такая короткая выжимка, она там плюс-минус можно

668
01:53:42,918 --> 01:53:51,078
ей задать структуру. А вот когда ты пишешь какую-то research, например, вот я недавно
делал research про role-based access control вообще, механизмы

669
01:53:51,078 --> 01:54:03,792
в базах данных. И мне самому это, во-первых, огромное количество информации,
там от Ниста. Это существующие модели, все это нужно проанализировать, сложить, понять, и как это

670
01:54:03,792 --> 01:54:15,032
делать. В голову это не умещается. Естественно, я все пишу вниз, в текст, и как бы весь мой
мыслительный процесс, он выстраивается в Google Doc. После этого вот тоже было прикольно, что я от этой

671
01:54:15,032 --> 01:54:26,032
задачи оторвался, от такой достаточно сложной ресерческой, я бы даже ее по сложности сравнился
с дипломом написания в магистрской. Вот ты как бы, я его как бы написал на 80 процентов, потом оторвался,

672
01:54:27,312 --> 01:54:39,632
на работе и потом вернулся и такой блин а чё я там вообще ресёрчил и у меня есть текст у меня есть
дамп моих мозгов на бумаге я беру этот дэмп дамп просто подымаю и дальше с полпинка начинаю

673
01:54:39,632 --> 01:54:49,272
дальше продолжать как будто я не останавливался то есть это огромный помощник в таких долгих
мыслительных штуках ресёрческих и дальше этот материал служит основой для какого-то дизайн

674
01:54:49,272 --> 01:55:03,052
документа я могу ссылки на него положить какие-то отрывки вставить то есть это помогает структурировать
непосредственно вот в ресерче и в дизайне это артефакт. Это не код, это не комит, это не пуш,

675
01:55:03,052 --> 01:55:11,958
это именно гугл док. И вот чтобы этот артефакт был крутым, понятным и...
он доносил ту мысль, какую ты хочешь, чтобы он доносил,

676
01:55:12,158 --> 01:55:20,358
естественно, писательский скилл здесь играет ключевую роль.
Тут как бы синергия, понимаешь? И технически должны быть сильно развитые скилы,

677
01:55:20,478 --> 01:55:27,078
и писательские сильно развитые. Вот когда они вместе, получается просто бомба.
А когда один из них хромает, все равно какой?

678
01:55:27,238 --> 01:55:32,798
Получается какая-то либо маркетинговый буллщит,
вот ты, например, загугли софт-скиллсы в интернете,

679
01:55:32,838 --> 01:55:43,172
что там про них пишут? Да какую-то фигню, потому что люди пишут про софт-скиллсы,
не обладая нормальными софт-скиллами, их тоже вкладываю, например, больше даже вкладываю, чем умение говорить и

680
01:55:43,172 --> 01:55:51,332
представлять, а именно умение доносить информацию. Ну и также, если ты
технически не шаришь, что ты делаешь, то как бы ты красиво это не описывал, никто

681
01:55:51,332 --> 01:56:02,830
тебе не поверит. Вот такие мысли. Хотел еще поговорить про...
У тебя есть паблик, у тебя есть аудио-подкаст, дальше что?

682
01:56:02,830 --> 01:56:11,870
Есть текст, есть аудио, но не хватает одного же компонента
видео. Есть ли у тебя планы как-то развиваться в видео и если

683
01:56:11,870 --> 01:56:18,350
есть тебе сейчас что-то сказать, может быть, если нет своих
каких-то проектов, если можешь порекламировать, чтобы посмотреть

684
01:56:18,350 --> 01:56:26,510
такого, что тебе нравится, даже из подкастов, из видео-контента,
то тоже было бы интересно, если нет, то ничего страшного,

685
01:56:28,464 --> 01:56:39,544
что-то мы не советовали какого-то какого-то современного видео видео аудио контента вот что
ты слушаешь и чем ты чем ты вдохновляешься какие твои любимые подкасты проекты и не знаю авторы

686
01:56:39,544 --> 01:56:53,918
расскажи пожалуйста да да без проблем я вот сейчас пытаюсь вспомнить
автора канала, в общем как-то он называется, о, нашел, называется он NetworkChunk на английском, это ютубер

687
01:56:54,718 --> 01:57:09,998
англоговорящий, у него 3 миллиона подписчиков, у него видосы набирают огромное количество просмотров и
видосы на тематику, например как сделать фишинговую ссылку, например, которую ты отправишь своей жене, она перейдет,

688
01:57:09,998 --> 01:57:23,672
а ты в браузере у себя будешь видеть все логи, все куки, вообще все что у нее есть на компе, и он
видосы рассказывает то есть это такой популизация понимание того как работают вещи и среди обычной

689
01:57:23,672 --> 01:57:32,872
аудитории чтобы она понимала что и такое есть и вот это вот реально и для нас как для технических
людей ну посмотрите как он там на линут поднял но до как он там установил себе эту штуку как он

690
01:57:32,872 --> 01:57:43,472
ну то есть тоже какие возможности технической точке за ним тоже интересно ну и сами видосы сделаны
круто это как раз тот пример который меня возможно даже вдохновляет на то что чтобы двигаться в

691
01:57:45,870 --> 01:57:56,670
В остальном тоже есть прикольные всякие ютубы, но мне в русскоязычном
IT-сегменте ютуб какой-то максимально унылый.

692
01:57:56,670 --> 01:58:03,670
Я вот не знаю, может быть я не видел каких-то нормальных
видосов, но вот условно, где там топлес из мира IT,

693
01:58:03,670 --> 01:58:17,262
вот у нас есть такой. нет, потому что, ну, чтобы было и интересно, и не скучно, и не скатывалось в обсуждение
джун-не-джун, zp, 100k, 300k, как бы, встанутся, ну, то есть, ну, просто, ну, сколько можно уже об этом говорить,

694
01:58:17,262 --> 01:58:26,382
и как бы, какая практическая эта ценность от этого, ну, непонятно.
Ну, это ладно, я уже какие-то кислоты начинаю обрежать, и в целом хочется, знаешь, сделать вот реально хороший продукт,

695
01:58:26,382 --> 01:58:38,536
хороший, интересный канал, интересный видос, чтобы людям было интересно смотреть, и они не тратили время своё зря.
Я считаю, что большинство ютуберов тратит время людей зря.

696
01:58:38,536 --> 01:58:47,696
Это, вообще говоря, очень смелое заявление, как бы, сделать часовой видос,
чтобы люди его посмотрели, как бы, и ничего из этого не получили.

697
01:58:47,696 --> 01:58:53,936
Ты представляешь, у скольких людей ты по часу жизни отнял.
Ну, такое прям надо иметь какой-то наглостью, чтобы такие вещи делать.

698
01:58:53,936 --> 01:59:02,016
Так что да, в ютуб хочется двигаться, хочется что-то сделать,
вот как я уже упомянул, типа топлеса или там утопия шоу,

699
01:59:02,016 --> 01:59:15,356
вот эти такие популярные, около научпоп. какие-то ютубы, очень качественно сделанные, с достаточно глубокой
проработкой темы, но из мира IT. То есть вот условно там берешь, например, Docker и давай про

700
01:59:15,356 --> 01:59:21,976
него рассказывать. Не просто это command line, вот мы можем установить,
registry какой-то глупый очередной туториал, а рассказать про

701
01:59:21,976 --> 01:59:30,096
нее с другой стороны. Зачем эта технология появилась, а какие у нее альтернативы,
а вообще как бы можно ли без нее, на чем она написана,

702
01:59:30,096 --> 01:59:39,896
какие там есть приколюшки. То есть сделать какой-то попсу из технологии, но с
с нормальной проработкой этого всего. Но я понимаю, что это очень тяжело делать.

703
01:59:39,896 --> 01:59:48,896
Как бы подкаст вообще это полная чушь по сравнению с видосами.
Просто ты записался, как бы смонтировал, и оно есть.

704
01:59:48,896 --> 01:59:57,896
А вот чтобы видос, ну это нужно очень сильно запариться.
Но я двигаюсь в этом направлении, я уже изучил нормально монтажные программы,

705
01:59:57,896 --> 02:00:03,896
я нормально понял, как работает свет, я купил себе камеру,
я заказал себе свет, сегодня пойду забирать.

706
02:00:04,816 --> 02:00:10,456
И в целом уже есть понимание, как это может быть выглядеть.
И да, в будущем, наверное, кому интересно, я в подкасте

707
02:00:10,456 --> 02:00:19,094
расскажу про свои ютуберские приколюхи и обязательно
поделюсь ссылкой на канал. Супер, супер, отлично.

708
02:00:19,094 --> 02:00:26,014
Интересный вот лично мне вопрос, недослушатели,
чего тебе не хватает в мире Java подкастов и технологических

709
02:00:26,014 --> 02:00:33,334
подкастов? Во-первых, мы сейчас в Java Swag, в подкасте Out Java.
Вот что тебе не хватает, давай вот прям конкретно,

710
02:00:33,334 --> 02:00:39,494
конкретно в подкасте Java Swag, чего бы ты хотел бы еще
послушать и что бы тебя могло заинтересовать?

711
02:00:39,494 --> 02:00:51,408
В том плане, что мы, ну, я приближаюсь к 55, 55, 55,
выпуском вот и интересно насколько это может дальше дальше продолжаться

712
02:00:51,408 --> 02:01:02,288
насколько насколько еще мы можем собрать гостей насколько можем еще
затронуть интересных те тем вот чего бы тебе интересно было бы послушать ну вот

713
02:01:02,288 --> 02:01:11,728
конкретно в нашем подкасте либо какого контента амиры в мире java тебе не хватает а
может быть наоборот какой-то тебя уже как бы задолбал может поделиться

714
02:01:11,728 --> 02:01:27,128
своими не ну конкретно про java свэк Наверное, это одно из немногих, может быть даже единственный
подкаст интервью, который я слушаю. И слушаю с самого начала, наверное, с первого выпуска,

715
02:01:27,128 --> 02:01:33,008
я думаю. Ну, как я говорил, я с первого курса университета все подкасты
пособирал, по всем хаббарам и гитхаббам все себе в плеер

716
02:01:33,008 --> 02:01:43,648
засунул и все это слушал. И в целом тот факт, что я его слушаю, это уже огромный
респект и как бы значит, что в нем можно ничего не

717
02:01:43,648 --> 02:01:57,368
менять, он нормальный. формат интервью в целом штука наверное достаточно опасная как мне кажется потому
что все очень сильно упирается в гости и я честно говоря иногда даже не представляю как сложно

718
02:01:57,368 --> 02:02:08,768
вывозить ситуации когда гость ну вот прям дубовый вот он ничего особо как-то отвечает я не знаю были
у тебя кстати такие случаи нет я повезло что таких не было вот так вот так я отвечу как ведущий

719
02:02:08,768 --> 02:02:16,606
того подкаста Значит, джав разработчики молодцы, они не дубовые.
Или по крайней мере те, которые к тебе приходят,

720
02:02:16,606 --> 02:02:22,286
чтобы эта выборка все-таки не совсем репрезентативная.
Но иногда, знаешь, смотришь какие-то интервью, штуки,

721
02:02:22,286 --> 02:02:31,366
и прям видишь, ну прям уныло. У тебя интервью вроде бы получается хорошо, поэтому
я бы от этого формата не уходил. Единственное, что я бы поменял, это конечно джингл.

722
02:02:31,366 --> 02:02:43,182
Вот. Ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха-ха
И, наверное, да, вот качество гостей сильно решает, потому что я вот, знаешь,

723
02:02:43,182 --> 02:02:53,182
некоторым я прям верю и очень рад, вот там, например, Ване Углянской у тебя, по-моему, был как-то.
Я прям вообще, мне очень нравится, то есть человек открытый, искренний, и его приятно просто слушать,

724
02:02:53,182 --> 02:03:02,182
приятно разговаривать, и подкаст получается супер.
Ване привет. Ване, если ты нас слышишь, привет, ставь лайки, если ты нас слышал.

725
02:03:02,182 --> 02:03:12,016
Вот. Ну, в целом, да, мне кажется, вот, знаешь, вот что поменять Дудю?
пока что еще вроде бы смотрят и интересно, все зависит от

726
02:03:12,016 --> 02:03:19,696
гостей, а в целом, ты такой Джава Дудь, оставайся таким
наверное, но это лично мое мнение, не претендую ни

727
02:03:19,696 --> 02:03:30,456
на что. Хорошо, спасибо за комплимент, конечно, до дюдя очень-очень
далеко. Так, но у нас есть рубрика, и она не было, не было 30

728
02:03:30,456 --> 02:03:40,966
выпусков или 40 выпусков, но она появилась, и вот эта
рубрика честно, честно... позаимствованная из другого моего любимого подкаста на английском языке,

729
02:03:40,966 --> 02:03:49,766
она называется «Непопулярное мнение». Но прежде чем я спрошу у тебя твое непопулярное мнение,
давайте зачитаю непопулярное мнение предыдущего Гости.

730
02:03:49,766 --> 02:03:58,366
И вот мне опять же, каждый раз, когда я читаю непопулярное мнение Гости,
оно вырвано из контекста, я его перефразирую,

731
02:03:58,366 --> 02:04:04,366
и, наверное, Гость может сказать «Да не это я имел в виду»,
но цель этого, цель этой рубрики как раз в том, чтобы…

732
02:04:04,366 --> 02:04:24,280
Именно такая. Да, именно такая. То есть мнение было такое, то есть такие JVM языки как Kotlin в дальнейшем вытеснят оригинальную джаву.
Вот. К тебе вопрос. Не популярное ли это мнение, либо это мнение популярное?

733
02:04:24,280 --> 02:04:39,566
Я бы, наверное, сказал, что это мнение популярное как раз.
Потому что... Сложно мне говорить на такие темы, потому что я боюсь кого-то обидеть, вот реально, но

734
02:04:40,686 --> 02:04:52,246
я думаю, что это мнение популярное, но я его не считаю
правильным, потому что как бы вот и ты прямо замечаешь, как я пытаюсь подбирать слова.

735
02:04:53,230 --> 02:05:09,230
Но, грубо говоря, я не считаю, что Котлин вообще кого-то победит, и все, что он победил, это Android, и за это ему большой респект, и ребят из IntelliJ огромные молодцы, из JetBrains в частности.
Но Java он не победит, а если бы мог ее победить, то бы давно это уже сделал.

736
02:05:09,230 --> 02:05:15,730
Это если коротко, а если немножко подраскрыть, то я вообще не понимаю, откуда идея синтоксического сахара

737
02:05:23,184 --> 02:05:30,024
языков программирования. С какой, кстати, синтактический
сахар вообще является преимуществом? Я вот искренне не понимаю,

738
02:05:30,024 --> 02:05:36,104
вот искренне. Я начинал свою карьеру скалы-разработчиком.
Я писал на скале много и читал много скалы-кода.

739
02:05:36,104 --> 02:05:42,024
Там сахара очень много, там очень много элегантных
вещей, там замечательные коллекции, там все очень

740
02:05:42,024 --> 02:05:48,344
хорошо, там типы намного сильнее, чем в Java. Но как-то
вот не получилось. Ну, за скалой, конечно, не стояла

741
02:05:48,344 --> 02:06:01,384
такая, с таким хорошим брендом-разработчиком компании, как стоит за Котленом.
Но мне все-таки кажется, что потихоньку Kotlin останется на своем месте, но естественно никакую Java он никуда не вытеснет,

742
02:06:01,384 --> 02:06:12,104
потому что скорее всего Java вытеснять может какой-нибудь Go, потому что это реально что-то...
Зачем нам еще один GWM-язык? Вот я не сильно понимаю, когда выбираю языки, вот мне...

743
02:06:12,104 --> 02:06:23,024
Kotlin он компилируется в сто раз дольше, от него идеи начинают тупить, напиши-то на Java как бы и не парься.
А если хочешь что-то действительно другое, вот тебе Go, вот тебе R.

744
02:06:23,024 --> 02:06:33,464
вот тебе Python. То есть инструментарий он сильно больше, чем
Kotlin или Java, поэтому это, мне кажется, популярное мнение такое попсовое, но я с ним не согласен.

745
02:06:33,464 --> 02:06:43,944
Отлично. Мне очень интересно еще наблюдать за своим, со своими как бы сдвигами. Каждый раз,
когда я слушаю гостю, его мнение по какому-то по какому-то топу я такой согласен. Конечно,

746
02:06:43,944 --> 02:06:52,144
конечно это так. Слушаю следующего гостя, который говорит, нет, я с этим не стал,
конечно, конечно предыдущий гость не прав. То есть очень легко, очень легко убежит.

747
02:06:52,944 --> 02:07:02,064
когда говорю о всем. Да, вот идея про Гоми тоже понравится, то есть наверное если
знать Джао и Котлин, зачем? Ну ладно, мы оставим это слушателям, мы оставим

748
02:07:02,064 --> 02:07:13,206
слушателям отвечать на эти вопросы, но А теперь твоя очередь.
Какое непопулярное мнение есть у тебя, которое ты считаешь, что оно непопулярное?

749
02:07:13,206 --> 02:07:26,806
Да, я бы сказал, что у меня непопулярное мнение такое.
Наследование в Java вообще не нужно использовать, и без наследования Java была бы намного лучше, и элегантней, и красивей.

750
02:07:26,806 --> 02:07:39,094
Я и говорю про наследование классов. Если раскрывать, да? Что? Почему?
Давай раскроем. Ну, да, я еще раз подчеркну, что я говорю про наследование классов,

751
02:07:39,094 --> 02:07:48,614
то есть интерфейсы – это отлично. Дефолтные методы в интерфейсах – это уже непонятно, можно и без них,
но вот как декларация какого-то внешнего поведения,

752
02:07:48,614 --> 02:07:57,814
интерфейса, контракта – это идеальный инструмент,
и его использовать я бы стал и использую. А вот что касается наследования классов,

753
02:07:57,814 --> 02:08:06,128
каждый раз, когда я вижу в коде наследование классов,
такого legacy кода, скажем так, почти всегда это является проблемой, нежели чем преимуществом

754
02:08:06,128 --> 02:08:17,070
этого кода. Заметь, как сложно вносить изменения в структуру наследования классов,
если ты хочешь где-то что-то поменять, то всё, тебе нужно всё это дерево в голове представить.

755
02:08:17,070 --> 02:08:29,070
То есть идея понятная, этого ОУП, понятно, почему она возникла, как её использовали,
но сейчас, в современном мире, когда ОУП уже немного такой вот классической отходит в сторону,

756
02:08:29,070 --> 02:08:38,798
первое, что из ОУП нужно выкинуть, это наследование классов, потому что оно делает...
вот это вот сильное связывание, если перевести.

757
02:08:38,798 --> 02:08:49,150
То есть это самая максимальная, самая жесткая привязка друг
друга объектов в программировании. которые существуют, это наследование классов.

758
02:08:49,150 --> 02:08:58,630
Вот если ты наследовался, ты внёс кучу ограничений
в наследника и в родителя. Ты не можешь ещё одного, например, класса наследовать,

759
02:08:58,630 --> 02:09:03,470
мы можем только одного наследовать, всё, приехали.
Если тебе нужно какое-то поведение подмешать, ты

760
02:09:03,470 --> 02:09:08,470
начинаешь вмешать это в родителя, в общего.
А другим наследником это поведение не нужно, оно

761
02:09:08,470 --> 02:09:14,390
там появляется, и вот эта вот сильная связь, она
как клубок, который ты уже не распутать его, если

762
02:09:14,390 --> 02:09:22,204
там есть наследование. все используют просто в конструктор себе inject
какую-то часть поведения, которая конкретно им нужна

763
02:09:22,204 --> 02:09:28,284
и декларируют свое поведение через интерфейсы, то это
вот намного проще и мне кажется, что безнаследование

764
02:09:28,284 --> 02:09:41,630
в jai было бы только лучше сейчас. Мощно! Мощно мы въехали в одну из...
как бы не просто даже в Жаву, а как бы... все ООП!

765
02:09:41,630 --> 02:09:53,630
С ноги! Влетели, что не надо! Ведь наследование, это же правильно про ООП?
Там три вот этих... Да, наследование, полиморфизм...

766
02:09:53,630 --> 02:10:09,366
Вот и все! Инкапсуляция! Ну что же, отлично, Саш, спасибо что пришел, спасибо что...
Мне очень понравился наш разговор. Мы даже не затронули твою работу.

767
02:10:09,366 --> 02:10:14,366
А я знаю, что ты работаешь над Apache Ignite.
Мы там, наверное, про Apache Ignite можно только разговаривать.

768
02:10:14,366 --> 02:10:25,366
Ну, целый выпуск про то, чего там, чего там и как.
Потому что это инструмент с большой историей.

769
02:10:25,366 --> 02:10:46,320
Но так вот у нас получилось поговорить о практиках и таких о толзах.
Немножко задеть все темы твоего подкаста. очень приятно, когда можно послушать сначала подкаст, а потом поговорить с человеком и задать все вопросы, которые накопились. Спасибо тебе, что пришел.

770
02:10:46,320 --> 02:10:58,320
Дима, спасибо тебе, что позвал. Мне было очень приятно, особенно учитывая тот факт, что я твой подкаст давно слушаю. Это просто очень приятно быть здесь. Спасибо.
Ну что же, спасибо. С вами был подкаст Java Swag. Всем пока.

